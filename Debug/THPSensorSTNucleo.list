
THPSensorSTNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da90  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de54  0800de54  0001de54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800de5c  0800de5c  0001de5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800de60  0800de60  0001de60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000004  0800de64  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000090  0800def0  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  2000012c  0800df89  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000178  0800dfd2  00020178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 0000009c  2000018c  0800dfe3  0002018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006c0  20000228  0800e07f  00020228  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008e8  0800e07f  000208e8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000024  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       0000019f  20030024  20030024  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000880  200301c4  200301c4  00030000  2**2
                  ALLOC
 17 .debug_info   0004e153  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 000084fd  00000000  00000000  0006e3ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002f40  00000000  00000000  000768a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00002bf8  00000000  00000000  000797e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  00033717  00000000  00000000  0007c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002ca20  00000000  00000000  000afaf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0010ac95  00000000  00000000  000dc517  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001e71ac  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000cd94  00000000  00000000  001e7228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000228 	.word	0x20000228
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dbb8 	.word	0x0800dbb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000022c 	.word	0x2000022c
 800017c:	0800dbb8 	.word	0x0800dbb8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_ldivmod>:
 8000190:	b97b      	cbnz	r3, 80001b2 <__aeabi_ldivmod+0x22>
 8000192:	b972      	cbnz	r2, 80001b2 <__aeabi_ldivmod+0x22>
 8000194:	2900      	cmp	r1, #0
 8000196:	bfbe      	ittt	lt
 8000198:	2000      	movlt	r0, #0
 800019a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800019e:	e006      	blt.n	80001ae <__aeabi_ldivmod+0x1e>
 80001a0:	bf08      	it	eq
 80001a2:	2800      	cmpeq	r0, #0
 80001a4:	bf1c      	itt	ne
 80001a6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80001aa:	f04f 30ff 	movne.w	r0, #4294967295
 80001ae:	f000 b9bd 	b.w	800052c <__aeabi_idiv0>
 80001b2:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ba:	2900      	cmp	r1, #0
 80001bc:	db09      	blt.n	80001d2 <__aeabi_ldivmod+0x42>
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db1a      	blt.n	80001f8 <__aeabi_ldivmod+0x68>
 80001c2:	f000 f84d 	bl	8000260 <__udivmoddi4>
 80001c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ce:	b004      	add	sp, #16
 80001d0:	4770      	bx	lr
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db1b      	blt.n	8000214 <__aeabi_ldivmod+0x84>
 80001dc:	f000 f840 	bl	8000260 <__udivmoddi4>
 80001e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e8:	b004      	add	sp, #16
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	4252      	negs	r2, r2
 80001f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f6:	4770      	bx	lr
 80001f8:	4252      	negs	r2, r2
 80001fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fe:	f000 f82f 	bl	8000260 <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4240      	negs	r0, r0
 800020e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000212:	4770      	bx	lr
 8000214:	4252      	negs	r2, r2
 8000216:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021a:	f000 f821 	bl	8000260 <__udivmoddi4>
 800021e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000226:	b004      	add	sp, #16
 8000228:	4252      	negs	r2, r2
 800022a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <_ZN10ServoMotorC1Etttttt>:

#include "stm32wbxx_hal.h"

extern TIM_HandleTypeDef htim16;

ServoMotor::ServoMotor(uint16_t minv, uint16_t maxv, uint16_t zerov, uint16_t minp, uint16_t maxp, uint16_t zerop)
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	4608      	mov	r0, r1
 800053a:	4611      	mov	r1, r2
 800053c:	461a      	mov	r2, r3
 800053e:	4603      	mov	r3, r0
 8000540:	817b      	strh	r3, [r7, #10]
 8000542:	460b      	mov	r3, r1
 8000544:	813b      	strh	r3, [r7, #8]
 8000546:	4613      	mov	r3, r2
 8000548:	80fb      	strh	r3, [r7, #6]
{
	mMinLimitValue = minv;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	897a      	ldrh	r2, [r7, #10]
 800054e:	801a      	strh	r2, [r3, #0]
	mMaxLimitValue = maxv;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	893a      	ldrh	r2, [r7, #8]
 8000554:	805a      	strh	r2, [r3, #2]
	mZeroValue = zerov;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	88fa      	ldrh	r2, [r7, #6]
 800055a:	809a      	strh	r2, [r3, #4]
	mMinPulse = minp;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	8b3a      	ldrh	r2, [r7, #24]
 8000560:	80da      	strh	r2, [r3, #6]
	mMaxPulse = maxp;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	8bba      	ldrh	r2, [r7, #28]
 8000566:	811a      	strh	r2, [r3, #8]
	mZeroPulse = zerop;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	8c3a      	ldrh	r2, [r7, #32]
 800056c:	815a      	strh	r2, [r3, #10]
	SetCurrValue(zerop);
 800056e:	8c3b      	ldrh	r3, [r7, #32]
 8000570:	4619      	mov	r1, r3
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f000 f806 	bl	8000584 <_ZN10ServoMotor12SetCurrValueEt>
}
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4618      	mov	r0, r3
 800057c:	3710      	adds	r7, #16
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <_ZN10ServoMotor12SetCurrValueEt>:

void ServoMotor::SetCurrValue(uint16_t val)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	460b      	mov	r3, r1
 800058e:	807b      	strh	r3, [r7, #2]
	uint32_t temp;

	mCurrValue = val;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	887a      	ldrh	r2, [r7, #2]
 8000594:	819a      	strh	r2, [r3, #12]
	temp = (uint32_t)(mMaxPulse - mMinPulse) * (uint32_t)val;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	891b      	ldrh	r3, [r3, #8]
 800059a:	461a      	mov	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	88db      	ldrh	r3, [r3, #6]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	fb03 f302 	mul.w	r3, r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
	temp = temp / (mMaxLimitValue - mMinLimitValue) + mMinPulse;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	885b      	ldrh	r3, [r3, #2]
 80005b0:	461a      	mov	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	88d2      	ldrh	r2, [r2, #6]
 80005c4:	4413      	add	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
	if(temp > mMaxPulse) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	891b      	ldrh	r3, [r3, #8]
 80005cc:	461a      	mov	r2, r3
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d902      	bls.n	80005da <_ZN10ServoMotor12SetCurrValueEt+0x56>
		temp = mMaxPulse;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	891b      	ldrh	r3, [r3, #8]
 80005d8:	60fb      	str	r3, [r7, #12]
	}
	if(temp < mMinPulse) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	88db      	ldrh	r3, [r3, #6]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d202      	bcs.n	80005ec <_ZN10ServoMotor12SetCurrValueEt+0x68>
		temp = mMinPulse;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	88db      	ldrh	r3, [r3, #6]
 80005ea:	60fb      	str	r3, [r7, #12]
	}

	htim16.Instance->CCR1 = (uint16_t)temp;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <_ZN10ServoMotor12SetCurrValueEt+0x80>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000089c 	.word	0x2000089c

08000608 <_ZN6sensorC1Ev>:
    virtual void measure(void) = 0;
protected:
    SENSOR_STATE    state;
    uint8_t         sub_state;
public:
    sensor(void) {state = STATE_INIT, sub_state = 0;};
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <_ZN6sensorC1Ev+0x28>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	711a      	strb	r2, [r3, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	715a      	strb	r2, [r3, #5]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4618      	mov	r0, r3
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	0800dc94 	.word	0x0800dc94

08000634 <_ZN9THPSensor26setTemperatureNotifyStatusEh>:
public:
    void init(void);
    THPSensor(void);
    //THPSensor(ble_thp_sensing_service_t *service) {Service = service;};
    void task(void);
    void setTemperatureNotifyStatus(uint8_t v) { TemperatureNotifyStatus = v; }
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	78fa      	ldrb	r2, [r7, #3]
 8000644:	739a      	strb	r2, [r3, #14]
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <_ZN9THPSensor23setPressureNotifyStatusEh>:
    void setPressureNotifyStatus(uint8_t v) { PressureNotifyStatus = v; }
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	70fb      	strb	r3, [r7, #3]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	78fa      	ldrb	r2, [r7, #3]
 8000662:	73da      	strb	r2, [r3, #15]
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_ZN9THPSensor23setHumidityNotifyStatusEh>:
    void setHumidityNotifyStatus(uint8_t v) { HumidityNotifyStatus = v; }
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	741a      	strb	r2, [r3, #16]
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_ZN7i2c_bus14transfer_readyEv>:
    static i2c_bus& GetInstance(void);
    void setHandle(I2C_HandleTypeDef *ph);
    void init(uint8_t dev_addr);
    HAL_StatusTypeDef write(uint8_t *buffer, uint8_t len);
    HAL_StatusTypeDef read(uint8_t *buffer, uint8_t len);
    bool transfer_ready(void) {return mXferDone;};
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	795b      	ldrb	r3, [r3, #5]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZL15ReadTemperaturel11CALIBRATION>:
#define SENSOR_POLL_INTERVAL    5000

static int32_t  t_fine;

static int16_t ReadTemperature(int32_t Tread, CALIBRATION Calibr)
{
 80006a8:	b084      	sub	sp, #16
 80006aa:	b480      	push	{r7}
 80006ac:	b087      	sub	sp, #28
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80006b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int32_t     var1, var2;
    var1 = ((((Tread >> 3) - ((int32_t)Calibr.dig_T1 << 1))) * ((int32_t)Calibr.dig_T2)) >> 11;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	10da      	asrs	r2, r3, #3
 80006be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80006c8:	fb02 f303 	mul.w	r3, r2, r3
 80006cc:	12db      	asrs	r3, r3, #11
 80006ce:	617b      	str	r3, [r7, #20]
    var2 = (((((Tread >> 4) - ((int32_t)Calibr.dig_T1)) * ((Tread >> 4) - ((int32_t)Calibr.dig_T1))) >> 12) * ((int32_t)Calibr.dig_T3)) >> 14;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	111b      	asrs	r3, r3, #4
 80006d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006d6:	1a9b      	subs	r3, r3, r2
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	1112      	asrs	r2, r2, #4
 80006dc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80006de:	1a52      	subs	r2, r2, r1
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	131b      	asrs	r3, r3, #12
 80006e6:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80006ea:	fb02 f303 	mul.w	r3, r2, r3
 80006ee:	139b      	asrs	r3, r3, #14
 80006f0:	613b      	str	r3, [r7, #16]
    int32_t t_fine = var1 + var2;
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	4413      	add	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
    int32_t T = (t_fine * 5 + 128) >> 8;
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	3380      	adds	r3, #128	; 0x80
 8000704:	121b      	asrs	r3, r3, #8
 8000706:	60bb      	str	r3, [r7, #8]
    return (int16_t)T;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	b21b      	sxth	r3, r3
}
 800070c:	4618      	mov	r0, r3
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	b004      	add	sp, #16
 8000718:	4770      	bx	lr
	...

0800071c <_ZL12ReadPressurel11CALIBRATION>:

static uint32_t ReadPressure(int32_t Pread, CALIBRATION Calibr)
{
 800071c:	b084      	sub	sp, #16
 800071e:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800072c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int64_t     var1, var2, p;
    int32_t     pr;

    pr = Pread;// >> 4;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
    var1 = ((int64_t)t_fine) - 128000;
 8000734:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <_ZL12ReadPressurel11CALIBRATION+0x1a4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800073e:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8000742:	f142 34ff 	adc.w	r4, r2, #4294967295
 8000746:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var2 = var1 * var1 * (int64_t)Calibr.dig_P6;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	fb02 f203 	mul.w	r2, r2, r3
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	69b9      	ldr	r1, [r7, #24]
 8000756:	fb01 f303 	mul.w	r3, r1, r3
 800075a:	441a      	add	r2, r3
 800075c:	69b9      	ldr	r1, [r7, #24]
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	fba1 3403 	umull	r3, r4, r1, r3
 8000764:	4422      	add	r2, r4
 8000766:	4614      	mov	r4, r2
 8000768:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800076c:	b211      	sxth	r1, r2
 800076e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000772:	fb01 f504 	mul.w	r5, r1, r4
 8000776:	fb03 f002 	mul.w	r0, r3, r2
 800077a:	4428      	add	r0, r5
 800077c:	fba3 3401 	umull	r3, r4, r3, r1
 8000780:	1902      	adds	r2, r0, r4
 8000782:	4614      	mov	r4, r2
 8000784:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000788:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = var2 + ((var1 * (int64_t)Calibr.dig_P5) << 17);
 800078c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000790:	b21b      	sxth	r3, r3
 8000792:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	fb04 f102 	mul.w	r1, r4, r2
 800079c:	69fa      	ldr	r2, [r7, #28]
 800079e:	fb03 f202 	mul.w	r2, r3, r2
 80007a2:	1888      	adds	r0, r1, r2
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	fba2 1203 	umull	r1, r2, r2, r3
 80007aa:	1883      	adds	r3, r0, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	f04f 0500 	mov.w	r5, #0
 80007b2:	f04f 0600 	mov.w	r6, #0
 80007b6:	0456      	lsls	r6, r2, #17
 80007b8:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80007bc:	044d      	lsls	r5, r1, #17
 80007be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007c2:	186b      	adds	r3, r5, r1
 80007c4:	eb46 0402 	adc.w	r4, r6, r2
 80007c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = var2 + (((int64_t)Calibr.dig_P4) << 35);
 80007cc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80007d0:	b219      	sxth	r1, r3
 80007d2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80007d6:	f04f 0500 	mov.w	r5, #0
 80007da:	f04f 0600 	mov.w	r6, #0
 80007de:	00ce      	lsls	r6, r1, #3
 80007e0:	2500      	movs	r5, #0
 80007e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007e6:	186b      	adds	r3, r5, r1
 80007e8:	eb46 0402 	adc.w	r4, r6, r2
 80007ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var1 = ((var1 * var1 * (int64_t)Calibr.dig_P3) >> 8) + ((var1 * (int64_t)Calibr.dig_P2) << 12);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	fb02 f203 	mul.w	r2, r2, r3
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	69b9      	ldr	r1, [r7, #24]
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	441a      	add	r2, r3
 8000802:	69b9      	ldr	r1, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fba1 3403 	umull	r3, r4, r1, r3
 800080a:	4422      	add	r2, r4
 800080c:	4614      	mov	r4, r2
 800080e:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 8000812:	b211      	sxth	r1, r2
 8000814:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000818:	fb01 f504 	mul.w	r5, r1, r4
 800081c:	fb03 f002 	mul.w	r0, r3, r2
 8000820:	4428      	add	r0, r5
 8000822:	fba3 3401 	umull	r3, r4, r3, r1
 8000826:	1902      	adds	r2, r0, r4
 8000828:	4614      	mov	r4, r2
 800082a:	f04f 0100 	mov.w	r1, #0
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	0a19      	lsrs	r1, r3, #8
 8000834:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8000838:	1222      	asrs	r2, r4, #8
 800083a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800083e:	b21b      	sxth	r3, r3
 8000840:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000844:	69b8      	ldr	r0, [r7, #24]
 8000846:	fb04 f500 	mul.w	r5, r4, r0
 800084a:	69f8      	ldr	r0, [r7, #28]
 800084c:	fb03 f000 	mul.w	r0, r3, r0
 8000850:	4428      	add	r0, r5
 8000852:	69bd      	ldr	r5, [r7, #24]
 8000854:	fba5 5603 	umull	r5, r6, r5, r3
 8000858:	1983      	adds	r3, r0, r6
 800085a:	461e      	mov	r6, r3
 800085c:	f04f 0b00 	mov.w	fp, #0
 8000860:	f04f 0c00 	mov.w	ip, #0
 8000864:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8000868:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 800086c:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 8000870:	eb1b 0301 	adds.w	r3, fp, r1
 8000874:	eb4c 0402 	adc.w	r4, ip, r2
 8000878:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)Calibr.dig_P1) >> 33;
 800087c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000880:	1c19      	adds	r1, r3, #0
 8000882:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8000886:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800088a:	b29b      	uxth	r3, r3
 800088c:	f04f 0400 	mov.w	r4, #0
 8000890:	fb03 f502 	mul.w	r5, r3, r2
 8000894:	fb01 f004 	mul.w	r0, r1, r4
 8000898:	4428      	add	r0, r5
 800089a:	fba1 3403 	umull	r3, r4, r1, r3
 800089e:	1902      	adds	r2, r0, r4
 80008a0:	4614      	mov	r4, r2
 80008a2:	f04f 0100 	mov.w	r1, #0
 80008a6:	f04f 0200 	mov.w	r2, #0
 80008aa:	1061      	asrs	r1, r4, #1
 80008ac:	17e2      	asrs	r2, r4, #31
 80008ae:	e9c7 1206 	strd	r1, r2, [r7, #24]
    if (var1 == 0) {
 80008b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80008b6:	4323      	orrs	r3, r4
 80008b8:	d104      	bne.n	80008c4 <_ZL12ReadPressurel11CALIBRATION+0x1a8>
        return 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e100      	b.n	8000ac0 <_ZL12ReadPressurel11CALIBRATION+0x3a4>
 80008be:	bf00      	nop
 80008c0:	20000244 	.word	0x20000244
    }
    p = 1048576 - pr;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80008ca:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80008ce:	e9c7 3402 	strd	r3, r4, [r7, #8]
    p = (((p << 31) - var2) * 3125) / var1;
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	ea4f 0963 	mov.w	r9, r3, asr #1
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80008de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80008e2:	4645      	mov	r5, r8
 80008e4:	464e      	mov	r6, r9
 80008e6:	1aed      	subs	r5, r5, r3
 80008e8:	eb66 0604 	sbc.w	r6, r6, r4
 80008ec:	46a8      	mov	r8, r5
 80008ee:	46b1      	mov	r9, r6
 80008f0:	eb18 0308 	adds.w	r3, r8, r8
 80008f4:	eb49 0409 	adc.w	r4, r9, r9
 80008f8:	4698      	mov	r8, r3
 80008fa:	46a1      	mov	r9, r4
 80008fc:	eb18 0805 	adds.w	r8, r8, r5
 8000900:	eb49 0906 	adc.w	r9, r9, r6
 8000904:	f04f 0100 	mov.w	r1, #0
 8000908:	f04f 0200 	mov.w	r2, #0
 800090c:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8000910:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8000914:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8000918:	eb18 0801 	adds.w	r8, r8, r1
 800091c:	eb49 0902 	adc.w	r9, r9, r2
 8000920:	f04f 0100 	mov.w	r1, #0
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800092c:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000930:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000934:	4688      	mov	r8, r1
 8000936:	4691      	mov	r9, r2
 8000938:	eb18 0805 	adds.w	r8, r8, r5
 800093c:	eb49 0906 	adc.w	r9, r9, r6
 8000940:	f04f 0100 	mov.w	r1, #0
 8000944:	f04f 0200 	mov.w	r2, #0
 8000948:	ea4f 0289 	mov.w	r2, r9, lsl #2
 800094c:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000950:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000954:	4688      	mov	r8, r1
 8000956:	4691      	mov	r9, r2
 8000958:	eb18 0005 	adds.w	r0, r8, r5
 800095c:	eb49 0106 	adc.w	r1, r9, r6
 8000960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000964:	f7ff fc14 	bl	8000190 <__aeabi_ldivmod>
 8000968:	4603      	mov	r3, r0
 800096a:	460c      	mov	r4, r1
 800096c:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var1 = (((int64_t)Calibr.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000970:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8000974:	b219      	sxth	r1, r3
 8000976:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800097a:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	f04f 0400 	mov.w	r4, #0
 8000986:	0b6b      	lsrs	r3, r5, #13
 8000988:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800098c:	1374      	asrs	r4, r6, #13
 800098e:	fb03 f502 	mul.w	r5, r3, r2
 8000992:	fb01 f004 	mul.w	r0, r1, r4
 8000996:	4428      	add	r0, r5
 8000998:	fba1 1203 	umull	r1, r2, r1, r3
 800099c:	1883      	adds	r3, r0, r2
 800099e:	461a      	mov	r2, r3
 80009a0:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	f04f 0400 	mov.w	r4, #0
 80009ac:	0b6b      	lsrs	r3, r5, #13
 80009ae:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80009b2:	1374      	asrs	r4, r6, #13
 80009b4:	fb03 f502 	mul.w	r5, r3, r2
 80009b8:	fb01 f004 	mul.w	r0, r1, r4
 80009bc:	4428      	add	r0, r5
 80009be:	fba1 1203 	umull	r1, r2, r1, r3
 80009c2:	1883      	adds	r3, r0, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	f04f 0300 	mov.w	r3, #0
 80009ca:	f04f 0400 	mov.w	r4, #0
 80009ce:	0e4b      	lsrs	r3, r1, #25
 80009d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80009d4:	1654      	asrs	r4, r2, #25
 80009d6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var2 = (((int64_t)Calibr.dig_P8) * p) >> 19;
 80009da:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80009de:	b21b      	sxth	r3, r3
 80009e0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	fb04 f102 	mul.w	r1, r4, r2
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	fb03 f202 	mul.w	r2, r3, r2
 80009f0:	1888      	adds	r0, r1, r2
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	fba2 1203 	umull	r1, r2, r2, r3
 80009f8:	1883      	adds	r3, r0, r2
 80009fa:	461a      	mov	r2, r3
 80009fc:	f04f 0300 	mov.w	r3, #0
 8000a00:	f04f 0400 	mov.w	r4, #0
 8000a04:	0ccb      	lsrs	r3, r1, #19
 8000a06:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8000a0a:	14d4      	asrs	r4, r2, #19
 8000a0c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    p = ((p + var1 + var2) >> 8) + (((int64_t)Calibr.dig_P7) << 4);
 8000a10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000a14:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000a18:	eb11 0803 	adds.w	r8, r1, r3
 8000a1c:	eb42 0904 	adc.w	r9, r2, r4
 8000a20:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000a24:	eb13 0508 	adds.w	r5, r3, r8
 8000a28:	eb44 0609 	adc.w	r6, r4, r9
 8000a2c:	f04f 0100 	mov.w	r1, #0
 8000a30:	f04f 0200 	mov.w	r2, #0
 8000a34:	0a29      	lsrs	r1, r5, #8
 8000a36:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8000a3a:	1232      	asrs	r2, r6, #8
 8000a3c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000a40:	b21d      	sxth	r5, r3
 8000a42:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000a46:	f04f 0800 	mov.w	r8, #0
 8000a4a:	f04f 0900 	mov.w	r9, #0
 8000a4e:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8000a52:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8000a56:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8000a5a:	eb18 0301 	adds.w	r3, r8, r1
 8000a5e:	eb49 0402 	adc.w	r4, r9, r2
 8000a62:	e9c7 3402 	strd	r3, r4, [r7, #8]

    return (uint32_t)((10 * p)/256);
 8000a66:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000a6a:	46a8      	mov	r8, r5
 8000a6c:	46b1      	mov	r9, r6
 8000a6e:	f04f 0100 	mov.w	r1, #0
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8000a7a:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8000a7e:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8000a82:	4688      	mov	r8, r1
 8000a84:	4691      	mov	r9, r2
 8000a86:	eb18 0805 	adds.w	r8, r8, r5
 8000a8a:	eb49 0906 	adc.w	r9, r9, r6
 8000a8e:	eb18 0308 	adds.w	r3, r8, r8
 8000a92:	eb49 0409 	adc.w	r4, r9, r9
 8000a96:	4698      	mov	r8, r3
 8000a98:	46a1      	mov	r9, r4
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f174 0200 	sbcs.w	r2, r4, #0
 8000aa4:	da02      	bge.n	8000aac <_ZL12ReadPressurel11CALIBRATION+0x390>
 8000aa6:	33ff      	adds	r3, #255	; 0xff
 8000aa8:	f144 0400 	adc.w	r4, r4, #0
 8000aac:	f04f 0100 	mov.w	r1, #0
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	0a19      	lsrs	r1, r3, #8
 8000ab6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8000aba:	1222      	asrs	r2, r4, #8
 8000abc:	460b      	mov	r3, r1
 8000abe:	4614      	mov	r4, r2
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000aca:	b004      	add	sp, #16
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <_ZL12ReadHumidityl11CALIBRATION>:

static uint16_t ReadHumidity(int32_t Hread, CALIBRATION Calibr)
{
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ae0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int64_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 8000ae4:	4b9b      	ldr	r3, [pc, #620]	; (8000d54 <_ZL12ReadHumidityl11CALIBRATION+0x284>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8000aec:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000af0:	e9c7 3402 	strd	r3, r4, [r7, #8]

    v_x1_u32r = (((((Hread << 14) - (((int32_t)Calibr.dig_H4) << 20) - (((int32_t)Calibr.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	039a      	lsls	r2, r3, #14
 8000af8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8000afc:	051b      	lsls	r3, r3, #20
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	4619      	mov	r1, r3
 8000b02:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000b06:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	fb04 f500 	mul.w	r5, r4, r0
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	fb03 f000 	mul.w	r0, r3, r0
 8000b1c:	4428      	add	r0, r5
 8000b1e:	68bd      	ldr	r5, [r7, #8]
 8000b20:	fba5 5603 	umull	r5, r6, r5, r3
 8000b24:	4430      	add	r0, r6
 8000b26:	4606      	mov	r6, r0
 8000b28:	460b      	mov	r3, r1
 8000b2a:	4614      	mov	r4, r2
 8000b2c:	1b5b      	subs	r3, r3, r5
 8000b2e:	eb64 0406 	sbc.w	r4, r4, r6
 8000b32:	f513 4580 	adds.w	r5, r3, #16384	; 0x4000
 8000b36:	f144 0600 	adc.w	r6, r4, #0
 8000b3a:	f04f 0100 	mov.w	r1, #0
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	0be9      	lsrs	r1, r5, #15
 8000b44:	ea41 4146 	orr.w	r1, r1, r6, lsl #17
 8000b48:	13f2      	asrs	r2, r6, #15
                 (((((((v_x1_u32r * ((int32_t)Calibr.dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)Calibr.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8000b4a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f04f 0400 	mov.w	r4, #0
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	fb04 f500 	mul.w	r5, r4, r0
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	fb03 f000 	mul.w	r0, r3, r0
 8000b60:	4428      	add	r0, r5
 8000b62:	68bd      	ldr	r5, [r7, #8]
 8000b64:	fba5 5603 	umull	r5, r6, r5, r3
 8000b68:	1983      	adds	r3, r0, r6
 8000b6a:	461e      	mov	r6, r3
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	f04f 0400 	mov.w	r4, #0
 8000b74:	0aab      	lsrs	r3, r5, #10
 8000b76:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8000b7a:	12b4      	asrs	r4, r6, #10
 8000b7c:	f897 0050 	ldrb.w	r0, [r7, #80]	; 0x50
 8000b80:	b2c5      	uxtb	r5, r0
 8000b82:	f04f 0600 	mov.w	r6, #0
 8000b86:	68b8      	ldr	r0, [r7, #8]
 8000b88:	fb06 fc00 	mul.w	ip, r6, r0
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	fb05 f000 	mul.w	r0, r5, r0
 8000b92:	4484      	add	ip, r0
 8000b94:	68b8      	ldr	r0, [r7, #8]
 8000b96:	fba0 8905 	umull	r8, r9, r0, r5
 8000b9a:	eb0c 0009 	add.w	r0, ip, r9
 8000b9e:	4681      	mov	r9, r0
 8000ba0:	f04f 0b00 	mov.w	fp, #0
 8000ba4:	f04f 0c00 	mov.w	ip, #0
 8000ba8:	ea4f 2bd8 	mov.w	fp, r8, lsr #11
 8000bac:	ea4b 5b49 	orr.w	fp, fp, r9, lsl #21
 8000bb0:	ea4f 2ce9 	mov.w	ip, r9, asr #11
 8000bb4:	f51b 4500 	adds.w	r5, fp, #32768	; 0x8000
 8000bb8:	f14c 0600 	adc.w	r6, ip, #0
 8000bbc:	fb05 fc04 	mul.w	ip, r5, r4
 8000bc0:	fb03 f006 	mul.w	r0, r3, r6
 8000bc4:	4460      	add	r0, ip
 8000bc6:	fba3 5605 	umull	r5, r6, r3, r5
 8000bca:	1983      	adds	r3, r0, r6
 8000bcc:	461e      	mov	r6, r3
 8000bce:	f04f 0300 	mov.w	r3, #0
 8000bd2:	f04f 0400 	mov.w	r4, #0
 8000bd6:	0aab      	lsrs	r3, r5, #10
 8000bd8:	ea43 5386 	orr.w	r3, r3, r6, lsl #22
 8000bdc:	12b4      	asrs	r4, r6, #10
 8000bde:	f513 1500 	adds.w	r5, r3, #2097152	; 0x200000
 8000be2:	f144 0600 	adc.w	r6, r4, #0
                    ((int32_t)2097152)) * ((int32_t)Calibr.dig_H2) + 8192) >> 14));
 8000be6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000bf0:	fb03 fc06 	mul.w	ip, r3, r6
 8000bf4:	fb05 f004 	mul.w	r0, r5, r4
 8000bf8:	4460      	add	r0, ip
 8000bfa:	fba5 3403 	umull	r3, r4, r5, r3
 8000bfe:	4420      	add	r0, r4
 8000c00:	4604      	mov	r4, r0
 8000c02:	f513 5500 	adds.w	r5, r3, #8192	; 0x2000
 8000c06:	f144 0600 	adc.w	r6, r4, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	f04f 0400 	mov.w	r4, #0
 8000c12:	0bab      	lsrs	r3, r5, #14
 8000c14:	ea43 4386 	orr.w	r3, r3, r6, lsl #18
 8000c18:	13b4      	asrs	r4, r6, #14
    v_x1_u32r = (((((Hread << 14) - (((int32_t)Calibr.dig_H4) << 20) - (((int32_t)Calibr.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8000c1a:	fb03 f502 	mul.w	r5, r3, r2
 8000c1e:	fb01 f004 	mul.w	r0, r1, r4
 8000c22:	4428      	add	r0, r5
 8000c24:	fba1 3403 	umull	r3, r4, r1, r3
 8000c28:	1902      	adds	r2, r0, r4
 8000c2a:	4614      	mov	r4, r2
 8000c2c:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000c30:	e9c7 3402 	strd	r3, r4, [r7, #8]

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8000c34:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000c38:	f04f 0100 	mov.w	r1, #0
 8000c3c:	f04f 0200 	mov.w	r2, #0
 8000c40:	0bd9      	lsrs	r1, r3, #15
 8000c42:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8000c46:	13e2      	asrs	r2, r4, #15
 8000c48:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	f04f 0400 	mov.w	r4, #0
 8000c54:	0beb      	lsrs	r3, r5, #15
 8000c56:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8000c5a:	13f4      	asrs	r4, r6, #15
 8000c5c:	fb03 f502 	mul.w	r5, r3, r2
 8000c60:	fb01 f004 	mul.w	r0, r1, r4
 8000c64:	4428      	add	r0, r5
 8000c66:	fba1 1203 	umull	r1, r2, r1, r3
 8000c6a:	1883      	adds	r3, r0, r2
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	f04f 0400 	mov.w	r4, #0
 8000c76:	09cb      	lsrs	r3, r1, #7
 8000c78:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000c7c:	11d4      	asrs	r4, r2, #7
                               ((int32_t)Calibr.dig_H1)) >> 4));
 8000c7e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000c82:	b2d1      	uxtb	r1, r2
 8000c84:	f04f 0200 	mov.w	r2, #0
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8000c88:	fb01 f504 	mul.w	r5, r1, r4
 8000c8c:	fb03 f002 	mul.w	r0, r3, r2
 8000c90:	4428      	add	r0, r5
 8000c92:	fba3 1201 	umull	r1, r2, r3, r1
 8000c96:	1883      	adds	r3, r0, r2
 8000c98:	461a      	mov	r2, r3
                               ((int32_t)Calibr.dig_H1)) >> 4));
 8000c9a:	f04f 0500 	mov.w	r5, #0
 8000c9e:	f04f 0600 	mov.w	r6, #0
 8000ca2:	090d      	lsrs	r5, r1, #4
 8000ca4:	ea45 7502 	orr.w	r5, r5, r2, lsl #28
 8000ca8:	1116      	asrs	r6, r2, #4
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8000caa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	1b5b      	subs	r3, r3, r5
 8000cb4:	eb64 0406 	sbc.w	r4, r4, r6
 8000cb8:	e9c7 3402 	strd	r3, r4, [r7, #8]

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8000cbc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f174 0200 	sbcs.w	r2, r4, #0
 8000cc6:	da03      	bge.n	8000cd0 <_ZL12ReadHumidityl11CALIBRATION+0x200>
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	f04f 0400 	mov.w	r4, #0
 8000cd0:	e9c7 3402 	strd	r3, r4, [r7, #8]
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8000cd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000cd8:	f04f 51c8 	mov.w	r1, #419430400	; 0x19000000
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	41a2      	sbcs	r2, r4
 8000ce4:	da03      	bge.n	8000cee <_ZL12ReadHumidityl11CALIBRATION+0x21e>
 8000ce6:	f04f 53c8 	mov.w	r3, #419430400	; 0x19000000
 8000cea:	f04f 0400 	mov.w	r4, #0
 8000cee:	e9c7 3402 	strd	r3, r4, [r7, #8]

    return(uint16_t)((100 * v_x1_u32r) >> 22);
 8000cf2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000cf6:	46a8      	mov	r8, r5
 8000cf8:	46b1      	mov	r9, r6
 8000cfa:	eb18 0308 	adds.w	r3, r8, r8
 8000cfe:	eb49 0409 	adc.w	r4, r9, r9
 8000d02:	4698      	mov	r8, r3
 8000d04:	46a1      	mov	r9, r4
 8000d06:	eb18 0805 	adds.w	r8, r8, r5
 8000d0a:	eb49 0906 	adc.w	r9, r9, r6
 8000d0e:	f04f 0100 	mov.w	r1, #0
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	ea4f 1249 	mov.w	r2, r9, lsl #5
 8000d1a:	ea42 62d8 	orr.w	r2, r2, r8, lsr #27
 8000d1e:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8000d22:	eb18 0801 	adds.w	r8, r8, r1
 8000d26:	eb49 0902 	adc.w	r9, r9, r2
 8000d2a:	eb18 0105 	adds.w	r1, r8, r5
 8000d2e:	eb49 0206 	adc.w	r2, r9, r6
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	f04f 0400 	mov.w	r4, #0
 8000d3a:	0d8b      	lsrs	r3, r1, #22
 8000d3c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8000d40:	1594      	asrs	r4, r2, #22
 8000d42:	b29b      	uxth	r3, r3
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
 8000d4e:	b004      	add	sp, #16
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000244 	.word	0x20000244

08000d58 <_ZN9THPSensorC1Ev>:


THPSensor::THPSensor(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fc50 	bl	8000608 <_ZN6sensorC1Ev>
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <_ZN9THPSensorC1Ev+0x54>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	601a      	str	r2, [r3, #0]
    i2c_bus::GetInstance().init(SENSOR_I2C_ADDRESS);
 8000d6e:	f001 fbbd 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2176      	movs	r1, #118	; 0x76
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 fbe0 	bl	800253c <_ZN7i2c_bus4initEh>
    state = STATE_INIT;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	711a      	strb	r2, [r3, #4]
    sub_state = 0;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	715a      	strb	r2, [r3, #5]

    setTemperatureNotifyStatus(0);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fc52 	bl	8000634 <_ZN9THPSensor26setTemperatureNotifyStatusEh>
    setPressureNotifyStatus(0);
 8000d90:	2100      	movs	r1, #0
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fc5d 	bl	8000652 <_ZN9THPSensor23setPressureNotifyStatusEh>
    setHumidityNotifyStatus(0);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fc68 	bl	8000670 <_ZN9THPSensor23setHumidityNotifyStatusEh>
}
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	0800dc80 	.word	0x0800dc80

08000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>:

void THPSensor::checkAnswerTimeout(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    if (Timer::GetInstance().IsTimerElapsed(SENSOR_TIMER, I2C_TIMEOUT)) {
 8000db8:	f003 f8ae 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f8e4 	bl	8003f90 <_ZN5Timer14IsTimerElapsedEmm>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <_ZN9THPSensor18checkAnswerTimeoutEv+0x2a>
        state = STATE_ERROR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	711a      	strb	r2, [r3, #4]
        sub_state = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	715a      	strb	r2, [r3, #5]
    }
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <_ZN9THPSensor4initEv>:

void THPSensor::init(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    static uint8_t  	cmd[2];
    HAL_StatusTypeDef 	status;

    switch (sub_state) {
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d01c      	beq.n	8000e2e <_ZN9THPSensor4initEv+0x4a>
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d03c      	beq.n	8000e72 <_ZN9THPSensor4initEv+0x8e>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d000      	beq.n	8000dfe <_ZN9THPSensor4initEv+0x1a>
        } else {
            checkAnswerTimeout();
        }
        break;
    }
    return;
 8000dfc:	e055      	b.n	8000eaa <_ZN9THPSensor4initEv+0xc6>
        cmd[0] = READ_ID;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <_ZN9THPSensor4initEv+0xcc>)
 8000e00:	22d0      	movs	r2, #208	; 0xd0
 8000e02:	701a      	strb	r2, [r3, #0]
        status = i2c_bus::GetInstance().write(cmd, 1);
 8000e04:	f001 fb72 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4928      	ldr	r1, [pc, #160]	; (8000eb0 <_ZN9THPSensor4initEv+0xcc>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fba5 	bl	800255e <_ZN7i2c_bus5writeEPhh>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
        sub_state = 1;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	715a      	strb	r2, [r3, #5]
        Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8000e1e:	f003 f87b 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 f89f 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 8000e2c:	e03c      	b.n	8000ea8 <_ZN9THPSensor4initEv+0xc4>
        if (i2c_bus::GetInstance().transfer_ready()) {
 8000e2e:	f001 fb5d 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc2a 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d014      	beq.n	8000e6a <_ZN9THPSensor4initEv+0x86>
        	status = i2c_bus::GetInstance().read(cmd, 1);
 8000e40:	f001 fb54 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2201      	movs	r2, #1
 8000e48:	4919      	ldr	r1, [pc, #100]	; (8000eb0 <_ZN9THPSensor4initEv+0xcc>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fba2 	bl	8002594 <_ZN7i2c_bus4readEPhh>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
            sub_state = 2;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8000e5a:	f003 f85d 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 f881 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 8000e68:	e01e      	b.n	8000ea8 <_ZN9THPSensor4initEv+0xc4>
            checkAnswerTimeout();
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa0 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8000e70:	e01a      	b.n	8000ea8 <_ZN9THPSensor4initEv+0xc4>
        if (i2c_bus::GetInstance().transfer_ready()) {
 8000e72:	f001 fb3b 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc08 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00d      	beq.n	8000ea0 <_ZN9THPSensor4initEv+0xbc>
            state = STATE_READ_CALIBR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	711a      	strb	r2, [r3, #4]
            sub_state = 0;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8000e90:	f003 f842 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 f866 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 8000e9e:	e002      	b.n	8000ea6 <_ZN9THPSensor4initEv+0xc2>
            checkAnswerTimeout();
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff85 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8000ea6:	bf00      	nop
    return;
 8000ea8:	bf00      	nop
}
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000248 	.word	0x20000248

08000eb4 <_ZN9THPSensor9calibrateEv>:

void THPSensor::calibrate(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    static uint8_t  cmd[2];
    static uint8_t  buffer[32];

    switch (sub_state) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	795b      	ldrb	r3, [r3, #5]
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	f200 817f 	bhi.w	80011c4 <_ZN9THPSensor9calibrateEv+0x310>
 8000ec6:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <_ZN9THPSensor9calibrateEv+0x18>)
 8000ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000f0d 	.word	0x08000f0d
 8000ed4:	08000f4d 	.word	0x08000f4d
 8000ed8:	080010d3 	.word	0x080010d3
 8000edc:	0800111d 	.word	0x0800111d
    case 0:
        //NRF_LOG_INFO("Calibrate: %d", sub_state);
        cmd[0] = READ_CALIBRATION_1;
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <_ZN9THPSensor9calibrateEv+0x260>)
 8000ee2:	2288      	movs	r2, #136	; 0x88
 8000ee4:	701a      	strb	r2, [r3, #0]
        i2c_bus::GetInstance().write(cmd, 1);
 8000ee6:	f001 fb01 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2201      	movs	r2, #1
 8000eee:	4989      	ldr	r1, [pc, #548]	; (8001114 <_ZN9THPSensor9calibrateEv+0x260>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fb34 	bl	800255e <_ZN7i2c_bus5writeEPhh>
        sub_state = 1;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	715a      	strb	r2, [r3, #5]
        Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8000efc:	f003 f80c 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 f830 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 8000f0a:	e15a      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
    case 1:
        if (i2c_bus::GetInstance().transfer_ready()) {
 8000f0c:	f001 faee 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fbbb 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d012      	beq.n	8000f44 <_ZN9THPSensor9calibrateEv+0x90>
            //NRF_LOG_INFO("Calibrate: %d", sub_state);
            i2c_bus::GetInstance().read(buffer, 26);
 8000f1e:	f001 fae5 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000f22:	4603      	mov	r3, r0
 8000f24:	221a      	movs	r2, #26
 8000f26:	497c      	ldr	r1, [pc, #496]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fb33 	bl	8002594 <_ZN7i2c_bus4readEPhh>
            sub_state = 2;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8000f34:	f002 fff0 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f814 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 8000f42:	e13e      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
            checkAnswerTimeout();
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff33 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8000f4a:	e13a      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
    case 2:
        if (i2c_bus::GetInstance().transfer_ready()) {
 8000f4c:	f001 face 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fb9b 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80b5 	beq.w	80010ca <_ZN9THPSensor9calibrateEv+0x216>
            Calibr.dig_T1 = (uint16_t)((buffer[1] << 8) + buffer[0]);
 8000f60:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	825a      	strh	r2, [r3, #18]
            Calibr.dig_T2 = (int16_t)((buffer[3] << 8) + buffer[2]);
 8000f78:	4b67      	ldr	r3, [pc, #412]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b65      	ldr	r3, [pc, #404]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	829a      	strh	r2, [r3, #20]
            Calibr.dig_T3 = (int16_t)((buffer[5] << 8) + buffer[4]);
 8000f92:	4b61      	ldr	r3, [pc, #388]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f94:	795b      	ldrb	r3, [r3, #5]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	82da      	strh	r2, [r3, #22]
            Calibr.dig_P1 = (uint16_t)((buffer[7] << 8) + buffer[6]);
 8000fac:	4b5a      	ldr	r3, [pc, #360]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fae:	79db      	ldrb	r3, [r3, #7]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fb8:	799b      	ldrb	r3, [r3, #6]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	831a      	strh	r2, [r3, #24]
            Calibr.dig_P2 = (int16_t)((buffer[9] << 8) + buffer[8]);
 8000fc4:	4b54      	ldr	r3, [pc, #336]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fc6:	7a5b      	ldrb	r3, [r3, #9]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b52      	ldr	r3, [pc, #328]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fd0:	7a1b      	ldrb	r3, [r3, #8]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	835a      	strh	r2, [r3, #26]
            Calibr.dig_P3 = (int16_t)((buffer[11] << 8) + buffer[10]);
 8000fde:	4b4e      	ldr	r3, [pc, #312]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fe0:	7adb      	ldrb	r3, [r3, #11]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4413      	add	r3, r2
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	839a      	strh	r2, [r3, #28]
            Calibr.dig_P4 = (int16_t)((buffer[13] << 8) + buffer[12]);
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8000ffa:	7b5b      	ldrb	r3, [r3, #13]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001004:	7b1b      	ldrb	r3, [r3, #12]
 8001006:	b29b      	uxth	r3, r3
 8001008:	4413      	add	r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	b21a      	sxth	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	83da      	strh	r2, [r3, #30]
            Calibr.dig_P5 = (int16_t)((buffer[15] << 8) + buffer[14]);
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001014:	7bdb      	ldrb	r3, [r3, #15]
 8001016:	b29b      	uxth	r3, r3
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 800101e:	7b9b      	ldrb	r3, [r3, #14]
 8001020:	b29b      	uxth	r3, r3
 8001022:	4413      	add	r3, r2
 8001024:	b29b      	uxth	r3, r3
 8001026:	b21a      	sxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	841a      	strh	r2, [r3, #32]
            Calibr.dig_P6 = (int16_t)((buffer[17] << 8) + buffer[16]);
 800102c:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 800102e:	7c5b      	ldrb	r3, [r3, #17]
 8001030:	b29b      	uxth	r3, r3
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001038:	7c1b      	ldrb	r3, [r3, #16]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	845a      	strh	r2, [r3, #34]	; 0x22
            Calibr.dig_P7 = (int16_t)((buffer[19] << 8) + buffer[18]);
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001048:	7cdb      	ldrb	r3, [r3, #19]
 800104a:	b29b      	uxth	r3, r3
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001052:	7c9b      	ldrb	r3, [r3, #18]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	849a      	strh	r2, [r3, #36]	; 0x24
            Calibr.dig_P8 = (int16_t)((buffer[21] << 8) + buffer[20]);
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001062:	7d5b      	ldrb	r3, [r3, #21]
 8001064:	b29b      	uxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 800106c:	7d1b      	ldrb	r3, [r3, #20]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	84da      	strh	r2, [r3, #38]	; 0x26
            Calibr.dig_P9 = (int16_t)((buffer[23] << 8) + buffer[22]);
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 800107c:	7ddb      	ldrb	r3, [r3, #23]
 800107e:	b29b      	uxth	r3, r3
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001086:	7d9b      	ldrb	r3, [r3, #22]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	851a      	strh	r2, [r3, #40]	; 0x28
            Calibr.dig_H1 = buffer[25];
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 8001096:	7e5a      	ldrb	r2, [r3, #25]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
            NRF_LOG_INFO("dig_P6: 0x%04x", Calibr.dig_P6);
            NRF_LOG_INFO("dig_P7: 0x%04x", Calibr.dig_P7);
            NRF_LOG_INFO("dig_P8: 0x%04x", Calibr.dig_P8);
            NRF_LOG_INFO("dig_P9: 0x%04x", Calibr.dig_P9);
            NRF_LOG_INFO("dig_H1: 0x%02x", Calibr.dig_H1);*/
            cmd[0] = READ_CALIBRATION_2;
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <_ZN9THPSensor9calibrateEv+0x260>)
 80010a0:	22e1      	movs	r2, #225	; 0xe1
 80010a2:	701a      	strb	r2, [r3, #0]
            i2c_bus::GetInstance().write(cmd, 1);
 80010a4:	f001 fa22 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2201      	movs	r2, #1
 80010ac:	4919      	ldr	r1, [pc, #100]	; (8001114 <_ZN9THPSensor9calibrateEv+0x260>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fa55 	bl	800255e <_ZN7i2c_bus5writeEPhh>
            sub_state = 3;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80010ba:	f002 ff2d 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80010be:	4603      	mov	r3, r0
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ff51 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 80010c8:	e07b      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
            checkAnswerTimeout();
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe70 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 80010d0:	e077      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
    case 3:
        if (i2c_bus::GetInstance().transfer_ready()) {
 80010d2:	f001 fa0b 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fad8 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d012      	beq.n	800110a <_ZN9THPSensor9calibrateEv+0x256>
            //NRF_LOG_INFO("Calibr state: 2.");
            i2c_bus::GetInstance().read(buffer, 7);
 80010e4:	f001 fa02 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2207      	movs	r2, #7
 80010ec:	490a      	ldr	r1, [pc, #40]	; (8001118 <_ZN9THPSensor9calibrateEv+0x264>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fa50 	bl	8002594 <_ZN7i2c_bus4readEPhh>
            sub_state = 4;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80010fa:	f002 ff0d 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80010fe:	4603      	mov	r3, r0
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f002 ff31 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 8001108:	e05b      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
            checkAnswerTimeout();
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fe50 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8001110:	e057      	b.n	80011c2 <_ZN9THPSensor9calibrateEv+0x30e>
 8001112:	bf00      	nop
 8001114:	2000024c 	.word	0x2000024c
 8001118:	20000250 	.word	0x20000250
    case 4:
        if (i2c_bus::GetInstance().transfer_ready()) {
 800111c:	f001 f9e6 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fab3 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d045      	beq.n	80011ba <_ZN9THPSensor9calibrateEv+0x306>
            Calibr.dig_H2 = (int16_t)((buffer[1] << 8) + buffer[0]);
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	b29b      	uxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	859a      	strh	r2, [r3, #44]	; 0x2c
            Calibr.dig_H3 = buffer[2];
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 800114a:	789a      	ldrb	r2, [r3, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            Calibr.dig_H4 = (int16_t)((buffer[3] << 4) + (buffer[4] & 0x07));
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 8001154:	78db      	ldrb	r3, [r3, #3]
 8001156:	b29b      	uxth	r3, r3
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	b29b      	uxth	r3, r3
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	b29b      	uxth	r3, r3
 8001168:	4413      	add	r3, r2
 800116a:	b29b      	uxth	r3, r3
 800116c:	b21a      	sxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	861a      	strh	r2, [r3, #48]	; 0x30
            Calibr.dig_H5 = (int16_t)((buffer[5] << 4) + ((buffer[4] >> 4) & 0x07));
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 8001174:	795b      	ldrb	r3, [r3, #5]
 8001176:	b29b      	uxth	r3, r3
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 800117e:	791b      	ldrb	r3, [r3, #4]
 8001180:	111b      	asrs	r3, r3, #4
 8001182:	b29b      	uxth	r3, r3
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	b29b      	uxth	r3, r3
 800118a:	4413      	add	r3, r2
 800118c:	b29b      	uxth	r3, r3
 800118e:	b21a      	sxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	865a      	strh	r2, [r3, #50]	; 0x32
            Calibr.dig_H6 = buffer[6];
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <_ZN9THPSensor9calibrateEv+0x318>)
 8001196:	799a      	ldrb	r2, [r3, #6]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /*NRF_LOG_INFO("dig_H2: 0x%04x", Calibr.dig_H2);
            NRF_LOG_INFO("dig_H3: 0x%02x", Calibr.dig_H3);
            NRF_LOG_INFO("dig_H4: 0x%04x", Calibr.dig_H4);
            NRF_LOG_INFO("dig_H5: 0x%04x", Calibr.dig_H5);
            NRF_LOG_INFO("dig_H6: 0x%02x", Calibr.dig_H6);*/
            state = STATE_CONFIGURE;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	711a      	strb	r2, [r3, #4]
            sub_state = 0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80011aa:	f002 feb5 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fed9 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 80011b8:	e002      	b.n	80011c0 <_ZN9THPSensor9calibrateEv+0x30c>
            checkAnswerTimeout();
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fdf8 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 80011c0:	bf00      	nop
    }
    return;
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
}
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000250 	.word	0x20000250

080011d0 <_ZN9THPSensor9configureEv>:

void THPSensor::configure(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    static uint8_t  cmd[2];

    switch (sub_state) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	795b      	ldrb	r3, [r3, #5]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	f200 80b4 	bhi.w	800134a <_ZN9THPSensor9configureEv+0x17a>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <_ZN9THPSensor9configureEv+0x18>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	080011fd 	.word	0x080011fd
 80011ec:	0800122f 	.word	0x0800122f
 80011f0:	0800127b 	.word	0x0800127b
 80011f4:	080012c7 	.word	0x080012c7
 80011f8:	08001313 	.word	0x08001313
    case 0:
        cmd[0] = RESET_REG;
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 80011fe:	22e0      	movs	r2, #224	; 0xe0
 8001200:	701a      	strb	r2, [r3, #0]
        cmd[1] = 0xB6;
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001204:	22b6      	movs	r2, #182	; 0xb6
 8001206:	705a      	strb	r2, [r3, #1]
        i2c_bus::GetInstance().write(cmd, 2);
 8001208:	f001 f970 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 800120c:	4603      	mov	r3, r0
 800120e:	2202      	movs	r2, #2
 8001210:	4950      	ldr	r1, [pc, #320]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001212:	4618      	mov	r0, r3
 8001214:	f001 f9a3 	bl	800255e <_ZN7i2c_bus5writeEPhh>
        sub_state = 1;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	715a      	strb	r2, [r3, #5]
        Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 800121e:	f002 fe7b 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8001222:	4603      	mov	r3, r0
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f002 fe9f 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 800122c:	e08c      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
    case 1:
        if (i2c_bus::GetInstance().transfer_ready()) {
 800122e:	f001 f95d 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8001232:	4603      	mov	r3, r0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fa2a 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d018      	beq.n	8001272 <_ZN9THPSensor9configureEv+0xa2>
            cmd[0] = CTRL_HUM;
 8001240:	4b44      	ldr	r3, [pc, #272]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001242:	22f2      	movs	r2, #242	; 0xf2
 8001244:	701a      	strb	r2, [r3, #0]
            cmd[1] = 0x01; // h oversampling x1
 8001246:	4b43      	ldr	r3, [pc, #268]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001248:	2201      	movs	r2, #1
 800124a:	705a      	strb	r2, [r3, #1]
            i2c_bus::GetInstance().write(cmd, 2);
 800124c:	f001 f94e 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8001250:	4603      	mov	r3, r0
 8001252:	2202      	movs	r2, #2
 8001254:	493f      	ldr	r1, [pc, #252]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001256:	4618      	mov	r0, r3
 8001258:	f001 f981 	bl	800255e <_ZN7i2c_bus5writeEPhh>
            sub_state = 2;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2202      	movs	r2, #2
 8001260:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8001262:	f002 fe59 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8001266:	4603      	mov	r3, r0
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fe7d 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 8001270:	e06a      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
            checkAnswerTimeout();
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fd9c 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8001278:	e066      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
    case 2:
        if (i2c_bus::GetInstance().transfer_ready()) {
 800127a:	f001 f937 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fa04 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d018      	beq.n	80012be <_ZN9THPSensor9configureEv+0xee>
            cmd[0] = CTRL_MEASUREMENT;
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 800128e:	22f4      	movs	r2, #244	; 0xf4
 8001290:	701a      	strb	r2, [r3, #0]
            cmd[1] = 0xAB; // p oversampling x16, t oversampling x2, normal mode
 8001292:	4b30      	ldr	r3, [pc, #192]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 8001294:	22ab      	movs	r2, #171	; 0xab
 8001296:	705a      	strb	r2, [r3, #1]
            i2c_bus::GetInstance().write(cmd, 2);
 8001298:	f001 f928 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 800129c:	4603      	mov	r3, r0
 800129e:	2202      	movs	r2, #2
 80012a0:	492c      	ldr	r1, [pc, #176]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 f95b 	bl	800255e <_ZN7i2c_bus5writeEPhh>
            sub_state = 3;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2203      	movs	r2, #3
 80012ac:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80012ae:	f002 fe33 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fe57 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 80012bc:	e044      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
            checkAnswerTimeout();
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd76 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 80012c4:	e040      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
    case 3:
        if (i2c_bus::GetInstance().transfer_ready()) {
 80012c6:	f001 f911 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f9de 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d018      	beq.n	800130a <_ZN9THPSensor9configureEv+0x13a>
            cmd[0] = REG_CONFIG;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 80012da:	22f5      	movs	r2, #245	; 0xf5
 80012dc:	701a      	strb	r2, [r3, #0]
            cmd[1] = 0x30; // p oversampling x16, t oversampling x2, normal mode
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 80012e0:	2230      	movs	r2, #48	; 0x30
 80012e2:	705a      	strb	r2, [r3, #1]
            i2c_bus::GetInstance().write(cmd, 2);
 80012e4:	f001 f902 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2202      	movs	r2, #2
 80012ec:	4919      	ldr	r1, [pc, #100]	; (8001354 <_ZN9THPSensor9configureEv+0x184>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f935 	bl	800255e <_ZN7i2c_bus5writeEPhh>
            sub_state = 4;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2204      	movs	r2, #4
 80012f8:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80012fa:	f002 fe0d 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80012fe:	4603      	mov	r3, r0
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fe31 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        } else {
            checkAnswerTimeout();
        }
        break;
 8001308:	e01e      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
            checkAnswerTimeout();
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd50 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8001310:	e01a      	b.n	8001348 <_ZN9THPSensor9configureEv+0x178>
    case 4:
        if (i2c_bus::GetInstance().transfer_ready()) {
 8001312:	f001 f8eb 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f9b8 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00d      	beq.n	8001340 <_ZN9THPSensor9configureEv+0x170>
            state = STATE_IDLE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	711a      	strb	r2, [r3, #4]
            sub_state = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8001330:	f002 fdf2 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8001334:	4603      	mov	r3, r0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fe16 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
            //NRF_LOG_INFO("Configured");
        } else {
            checkAnswerTimeout();
        }
        break;
 800133e:	e002      	b.n	8001346 <_ZN9THPSensor9configureEv+0x176>
            checkAnswerTimeout();
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fd35 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 8001346:	bf00      	nop
    }
    return;
 8001348:	bf00      	nop
 800134a:	bf00      	nop
}
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000270 	.word	0x20000270

08001358 <_ZN9THPSensor7measureEv>:

//extern THPSensingService   *pTHPService;

void THPSensor::measure(void) {
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	b08d      	sub	sp, #52	; 0x34
 800135c:	af06      	add	r7, sp, #24
 800135e:	6078      	str	r0, [r7, #4]
    static uint8_t  buffer[32];
    int32_t         Tread;
    int32_t         Pread;
    int32_t         Hread;

    uint32_t        err=0;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

    switch (sub_state) {
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	795b      	ldrb	r3, [r3, #5]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d027      	beq.n	80013bc <_ZN9THPSensor7measureEv+0x64>
 800136c:	2b02      	cmp	r3, #2
 800136e:	d045      	beq.n	80013fc <_ZN9THPSensor7measureEv+0xa4>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d000      	beq.n	8001376 <_ZN9THPSensor7measureEv+0x1e>
        } else {
            checkAnswerTimeout();
        }
        break;
    }
    return;
 8001374:	e0fc      	b.n	8001570 <_ZN9THPSensor7measureEv+0x218>
        if (Timer::GetInstance().IsTimerElapsed(SENSOR_TIMER, SENSOR_POLL_INTERVAL)) {
 8001376:	f002 fdcf 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 800137a:	4603      	mov	r3, r0
 800137c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fe04 	bl	8003f90 <_ZN5Timer14IsTimerElapsedEmm>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80ee 	beq.w	800156c <_ZN9THPSensor7measureEv+0x214>
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8001390:	f002 fdc2 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8001394:	4603      	mov	r3, r0
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fde6 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
            cmd[0] = READ_VALUES;
 800139e:	4b76      	ldr	r3, [pc, #472]	; (8001578 <_ZN9THPSensor7measureEv+0x220>)
 80013a0:	22f7      	movs	r2, #247	; 0xf7
 80013a2:	701a      	strb	r2, [r3, #0]
            i2c_bus::GetInstance().write(cmd, 1);
 80013a4:	f001 f8a2 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2201      	movs	r2, #1
 80013ac:	4972      	ldr	r1, [pc, #456]	; (8001578 <_ZN9THPSensor7measureEv+0x220>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f8d5 	bl	800255e <_ZN7i2c_bus5writeEPhh>
            sub_state = 1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	715a      	strb	r2, [r3, #5]
        break;
 80013ba:	e0d7      	b.n	800156c <_ZN9THPSensor7measureEv+0x214>
        if (i2c_bus::GetInstance().transfer_ready()) {
 80013bc:	f001 f896 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f963 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d012      	beq.n	80013f4 <_ZN9THPSensor7measureEv+0x9c>
            i2c_bus::GetInstance().read(buffer, 8);
 80013ce:	f001 f88d 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2208      	movs	r2, #8
 80013d6:	4969      	ldr	r1, [pc, #420]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f8db 	bl	8002594 <_ZN7i2c_bus4readEPhh>
            sub_state = 2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2202      	movs	r2, #2
 80013e2:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 80013e4:	f002 fd98 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fdbc 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 80013f2:	e0bc      	b.n	800156e <_ZN9THPSensor7measureEv+0x216>
            checkAnswerTimeout();
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fcdb 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 80013fa:	e0b8      	b.n	800156e <_ZN9THPSensor7measureEv+0x216>
        if (i2c_bus::GetInstance().transfer_ready()) {
 80013fc:	f001 f876 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8001400:	4603      	mov	r3, r0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f943 	bl	800068e <_ZN7i2c_bus14transfer_readyEv>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80aa 	beq.w	8001564 <_ZN9THPSensor7measureEv+0x20c>
            Tread = ((uint32_t)buffer[5] & 0x0f) + ((uint32_t)buffer[4] << 4) + ((uint32_t)buffer[3] << 12);
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 8001412:	795b      	ldrb	r3, [r3, #5]
 8001414:	f003 020f 	and.w	r2, r3, #15
 8001418:	4b58      	ldr	r3, [pc, #352]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	011b      	lsls	r3, r3, #4
 800141e:	441a      	add	r2, r3
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 8001422:	78db      	ldrb	r3, [r3, #3]
 8001424:	031b      	lsls	r3, r3, #12
 8001426:	4413      	add	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
            Pread = ((uint32_t)buffer[2] & 0x0f) + ((uint32_t)buffer[1] << 4) + ((uint32_t)buffer[0] << 12);
 800142a:	4b54      	ldr	r3, [pc, #336]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 800142c:	789b      	ldrb	r3, [r3, #2]
 800142e:	f003 020f 	and.w	r2, r3, #15
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 8001434:	785b      	ldrb	r3, [r3, #1]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	441a      	add	r2, r3
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	031b      	lsls	r3, r3, #12
 8001440:	4413      	add	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
            Hread = (uint32_t)buffer[7] + ((uint32_t)buffer[6] << 8);
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 8001446:	79db      	ldrb	r3, [r3, #7]
 8001448:	461a      	mov	r2, r3
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <_ZN9THPSensor7measureEv+0x224>)
 800144c:	799b      	ldrb	r3, [r3, #6]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	4413      	add	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
            Temperature = ReadTemperature(Tread, Calibr);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 2012 	ldr.w	r2, [r3, #18]
 800145a:	f04f 0e00 	mov.w	lr, #0
 800145e:	4696      	mov	lr, r2
 8001460:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8001464:	f04f 0c00 	mov.w	ip, #0
 8001468:	4694      	mov	ip, r2
 800146a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800146e:	2600      	movs	r6, #0
 8001470:	4616      	mov	r6, r2
 8001472:	466c      	mov	r4, sp
 8001474:	f103 051e 	add.w	r5, r3, #30
 8001478:	6828      	ldr	r0, [r5, #0]
 800147a:	6869      	ldr	r1, [r5, #4]
 800147c:	68aa      	ldr	r2, [r5, #8]
 800147e:	68eb      	ldr	r3, [r5, #12]
 8001480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001482:	6928      	ldr	r0, [r5, #16]
 8001484:	6969      	ldr	r1, [r5, #20]
 8001486:	c403      	stmia	r4!, {r0, r1}
 8001488:	4671      	mov	r1, lr
 800148a:	4662      	mov	r2, ip
 800148c:	4633      	mov	r3, r6
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f7ff f90a 	bl	80006a8 <_ZL15ReadTemperaturel11CALIBRATION>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	80da      	strh	r2, [r3, #6]
            Pressure = ReadPressure(Pread, Calibr);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80014a2:	f04f 0e00 	mov.w	lr, #0
 80014a6:	4696      	mov	lr, r2
 80014a8:	f8d3 2016 	ldr.w	r2, [r3, #22]
 80014ac:	f04f 0c00 	mov.w	ip, #0
 80014b0:	4694      	mov	ip, r2
 80014b2:	f8d3 201a 	ldr.w	r2, [r3, #26]
 80014b6:	2600      	movs	r6, #0
 80014b8:	4616      	mov	r6, r2
 80014ba:	466c      	mov	r4, sp
 80014bc:	f103 051e 	add.w	r5, r3, #30
 80014c0:	6828      	ldr	r0, [r5, #0]
 80014c2:	6869      	ldr	r1, [r5, #4]
 80014c4:	68aa      	ldr	r2, [r5, #8]
 80014c6:	68eb      	ldr	r3, [r5, #12]
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	6928      	ldr	r0, [r5, #16]
 80014cc:	6969      	ldr	r1, [r5, #20]
 80014ce:	c403      	stmia	r4!, {r0, r1}
 80014d0:	4671      	mov	r1, lr
 80014d2:	4662      	mov	r2, ip
 80014d4:	4633      	mov	r3, r6
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f7ff f920 	bl	800071c <_ZL12ReadPressurel11CALIBRATION>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
            Humidity = ReadHumidity(Hread, Calibr);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f8d3 2012 	ldr.w	r2, [r3, #18]
 80014e8:	f04f 0e00 	mov.w	lr, #0
 80014ec:	4696      	mov	lr, r2
 80014ee:	f8d3 2016 	ldr.w	r2, [r3, #22]
 80014f2:	f04f 0c00 	mov.w	ip, #0
 80014f6:	4694      	mov	ip, r2
 80014f8:	f8d3 201a 	ldr.w	r2, [r3, #26]
 80014fc:	2600      	movs	r6, #0
 80014fe:	4616      	mov	r6, r2
 8001500:	466c      	mov	r4, sp
 8001502:	f103 051e 	add.w	r5, r3, #30
 8001506:	6828      	ldr	r0, [r5, #0]
 8001508:	6869      	ldr	r1, [r5, #4]
 800150a:	68aa      	ldr	r2, [r5, #8]
 800150c:	68eb      	ldr	r3, [r5, #12]
 800150e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001510:	6928      	ldr	r0, [r5, #16]
 8001512:	6969      	ldr	r1, [r5, #20]
 8001514:	c403      	stmia	r4!, {r0, r1}
 8001516:	4671      	mov	r1, lr
 8001518:	4662      	mov	r2, ip
 800151a:	4633      	mov	r3, r6
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f7ff fad7 	bl	8000ad0 <_ZL12ReadHumidityl11CALIBRATION>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	819a      	strh	r2, [r3, #12]
            BLEDevice_STM_App_Update_Char(0x0000, (uint8_t*)&Humidity);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	330c      	adds	r3, #12
 800152e:	4619      	mov	r1, r3
 8001530:	2000      	movs	r0, #0
 8001532:	f002 fc91 	bl	8003e58 <BLEDevice_STM_App_Update_Char>
            BLEDevice_STM_App_Update_Char(0x0001, (uint8_t*)&Pressure);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3308      	adds	r3, #8
 800153a:	4619      	mov	r1, r3
 800153c:	2001      	movs	r0, #1
 800153e:	f002 fc8b 	bl	8003e58 <BLEDevice_STM_App_Update_Char>
            BLEDevice_STM_App_Update_Char(0x0002, (uint8_t*)&Temperature);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3306      	adds	r3, #6
 8001546:	4619      	mov	r1, r3
 8001548:	2002      	movs	r0, #2
 800154a:	f002 fc85 	bl	8003e58 <BLEDevice_STM_App_Update_Char>
            sub_state = 0;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	715a      	strb	r2, [r3, #5]
            Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 8001554:	f002 fce0 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8001558:	4603      	mov	r3, r0
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fd04 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
        break;
 8001562:	e004      	b.n	800156e <_ZN9THPSensor7measureEv+0x216>
            checkAnswerTimeout();
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fc23 	bl	8000db0 <_ZN9THPSensor18checkAnswerTimeoutEv>
        break;
 800156a:	e000      	b.n	800156e <_ZN9THPSensor7measureEv+0x216>
        break;
 800156c:	bf00      	nop
    return;
 800156e:	bf00      	nop
}
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001576:	bf00      	nop
 8001578:	20000274 	.word	0x20000274
 800157c:	20000278 	.word	0x20000278

08001580 <_ZN9THPSensor4taskEv>:

void THPSensor::task(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    //static uint8_t  cmd[2];
    //static uint8_t  buffer[32];

    switch (state) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d822      	bhi.n	80015d6 <_ZN9THPSensor4taskEv+0x56>
 8001590:	a201      	add	r2, pc, #4	; (adr r2, 8001598 <_ZN9THPSensor4taskEv+0x18>)
 8001592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001596:	bf00      	nop
 8001598:	080015ad 	.word	0x080015ad
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015c1 	.word	0x080015c1
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015d7 	.word	0x080015d7
    case STATE_INIT:
        // detect sensor by reading ID
        init();
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fc19 	bl	8000de4 <_ZN9THPSensor4initEv>
        break;
 80015b2:	e011      	b.n	80015d8 <_ZN9THPSensor4taskEv+0x58>
    case STATE_READ_CALIBR:
        calibrate();
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	4798      	blx	r3
        break;
 80015be:	e00b      	b.n	80015d8 <_ZN9THPSensor4taskEv+0x58>
    case STATE_CONFIGURE:
        configure();
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe05 	bl	80011d0 <_ZN9THPSensor9configureEv>
        break;
 80015c6:	e007      	b.n	80015d8 <_ZN9THPSensor4taskEv+0x58>
    case STATE_IDLE:
        measure();
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3304      	adds	r3, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
        /*switch (sub_state) {
        case 0:
            break;
        }*/
        break;
 80015d4:	e000      	b.n	80015d8 <_ZN9THPSensor4taskEv+0x58>
    case STATE_ERROR:
        //NRF_LOG_INFO("Error");
        break;
    default:
        break;
 80015d6:	bf00      	nop
    }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	608b      	str	r3, [r1, #8]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800160c:	f000 f80a 	bl	8001624 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001610:	4903      	ldr	r1, [pc, #12]	; (8001620 <APPE_Init+0x18>)
 8001612:	2000      	movs	r0, #0
 8001614:	f000 fcbe 	bl	8001f94 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001618:	f000 f80e 	bl	8001638 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800161c:	bf00      	nop
}
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000560 	.word	0x20000560

08001624 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001628:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800162c:	f7ff ffd8 	bl	80015e0 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001630:	f001 fbf0 	bl	8002e14 <UTIL_LPM_Init>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001634:	bf00      	nop
}
 8001636:	bd80      	pop	{r7, pc}

08001638 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800163e:	f00b f813 	bl	800c668 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <appe_Tl_Init+0x50>)
 8001644:	2100      	movs	r1, #0
 8001646:	2020      	movs	r0, #32
 8001648:	f001 fd00 	bl	800304c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <appe_Tl_Init+0x54>)
 800164e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <appe_Tl_Init+0x58>)
 8001652:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	480e      	ldr	r0, [pc, #56]	; (8001694 <appe_Tl_Init+0x5c>)
 800165a:	f00a fecb 	bl	800c3f4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <appe_Tl_Init+0x60>)
 8001660:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <appe_Tl_Init+0x64>)
 8001664:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <appe_Tl_Init+0x68>)
 8001668:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800166a:	f240 533c 	movw	r3, #1340	; 0x53c
 800166e:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4618      	mov	r0, r3
 8001676:	f00b f905 	bl	800c884 <TL_MM_Init>

  TL_Enable();
 800167a:	f00a ffef 	bl	800c65c <TL_Enable>

  return;
 800167e:	bf00      	nop
}
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	0800c42d 	.word	0x0800c42d
 800168c:	20030700 	.word	0x20030700
 8001690:	080016a5 	.word	0x080016a5
 8001694:	080016bb 	.word	0x080016bb
 8001698:	20030918 	.word	0x20030918
 800169c:	2003080c 	.word	0x2003080c
 80016a0:	200301c4 	.word	0x200301c4

080016a4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80016ae:	bf00      	nop
}
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80016c2:	f00b f94f 	bl	800c964 <TL_TRACES_Init>

  APP_BLE_Init( );
 80016c6:	f00b fa83 	bl	800cbd0 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 fbb3 	bl	8002e38 <UTIL_LPM_SetOffMode>
  return;
 80016d2:	bf00      	nop
}
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80016de:	bf00      	nop
}
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80016f2:	f04f 30ff 	mov.w	r0, #4294967295
 80016f6:	f001 fbcd 	bl	8002e94 <UTIL_SEQ_Run>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800170a:	2100      	movs	r1, #0
 800170c:	2020      	movs	r0, #32
 800170e:	f001 fcbd 	bl	800308c <UTIL_SEQ_SetTask>
  return;
 8001712:	bf00      	nop
}
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001722:	2002      	movs	r0, #2
 8001724:	f001 fd18 	bl	8003158 <UTIL_SEQ_SetEvt>
  return;
 8001728:	bf00      	nop
}
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001738:	2002      	movs	r0, #2
 800173a:	f001 fd2b 	bl	8003194 <UTIL_SEQ_WaitEvt>
  return;
 800173e:	bf00      	nop
}
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <LL_EXTI_EnableIT_0_31+0x24>)
 8001752:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001756:	4905      	ldr	r1, [pc, #20]	; (800176c <LL_EXTI_EnableIT_0_31+0x24>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	58000800 	.word	0x58000800

08001770 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4904      	ldr	r1, [pc, #16]	; (8001790 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]

}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	58000800 	.word	0x58000800

08001794 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800179a:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <ReadRtcSsrValue+0x3c>)
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	b29b      	uxth	r3, r3
 80017a0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <ReadRtcSsrValue+0x3c>)
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80017aa:	e005      	b.n	80017b8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <ReadRtcSsrValue+0x3c>)
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d1f5      	bne.n	80017ac <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80017c0:	683b      	ldr	r3, [r7, #0]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40002800 	.word	0x40002800

080017d4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	460a      	mov	r2, r1
 80017de:	71fb      	strb	r3, [r7, #7]
 80017e0:	4613      	mov	r3, r2
 80017e2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	491d      	ldr	r1, [pc, #116]	; (800185c <LinkTimerAfter+0x88>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3315      	adds	r3, #21
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d009      	beq.n	8001812 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	4916      	ldr	r1, [pc, #88]	; (800185c <LinkTimerAfter+0x88>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3314      	adds	r3, #20
 800180e:	79fa      	ldrb	r2, [r7, #7]
 8001810:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001812:	79fa      	ldrb	r2, [r7, #7]
 8001814:	4911      	ldr	r1, [pc, #68]	; (800185c <LinkTimerAfter+0x88>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	3315      	adds	r3, #21
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <LinkTimerAfter+0x88>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3314      	adds	r3, #20
 8001836:	79ba      	ldrb	r2, [r7, #6]
 8001838:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800183a:	79ba      	ldrb	r2, [r7, #6]
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <LinkTimerAfter+0x88>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3315      	adds	r3, #21
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	701a      	strb	r2, [r3, #0]

  return;
 800184e:	bf00      	nop
}
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000090 	.word	0x20000090

08001860 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <LinkTimerBefore+0xb8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	79ba      	ldrb	r2, [r7, #6]
 8001878:	429a      	cmp	r2, r3
 800187a:	d032      	beq.n	80018e2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800187c:	79ba      	ldrb	r2, [r7, #6]
 800187e:	4927      	ldr	r1, [pc, #156]	; (800191c <LinkTimerBefore+0xbc>)
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3314      	adds	r3, #20
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	4922      	ldr	r1, [pc, #136]	; (800191c <LinkTimerBefore+0xbc>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3315      	adds	r3, #21
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	491d      	ldr	r1, [pc, #116]	; (800191c <LinkTimerBefore+0xbc>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3315      	adds	r3, #21
 80018b4:	79ba      	ldrb	r2, [r7, #6]
 80018b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	4918      	ldr	r1, [pc, #96]	; (800191c <LinkTimerBefore+0xbc>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3314      	adds	r3, #20
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018cc:	79ba      	ldrb	r2, [r7, #6]
 80018ce:	4913      	ldr	r1, [pc, #76]	; (800191c <LinkTimerBefore+0xbc>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	3314      	adds	r3, #20
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80018e0:	e014      	b.n	800190c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	490d      	ldr	r1, [pc, #52]	; (800191c <LinkTimerBefore+0xbc>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3315      	adds	r3, #21
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018f6:	79ba      	ldrb	r2, [r7, #6]
 80018f8:	4908      	ldr	r1, [pc, #32]	; (800191c <LinkTimerBefore+0xbc>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	3314      	adds	r3, #20
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	701a      	strb	r2, [r3, #0]
  return;
 800190a:	bf00      	nop
}
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000120 	.word	0x20000120
 800191c:	20000090 	.word	0x20000090

08001920 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800192a:	4b4e      	ldr	r3, [pc, #312]	; (8001a64 <linkTimer+0x144>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b06      	cmp	r3, #6
 8001932:	d118      	bne.n	8001966 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <linkTimer+0x144>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <linkTimer+0x148>)
 800193c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <linkTimer+0x144>)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	4949      	ldr	r1, [pc, #292]	; (8001a6c <linkTimer+0x14c>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	440b      	add	r3, r1
 8001952:	3315      	adds	r3, #21
 8001954:	2206      	movs	r2, #6
 8001956:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001958:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <linkTimer+0x150>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	81fb      	strh	r3, [r7, #14]
 8001964:	e078      	b.n	8001a58 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001966:	f000 f909 	bl	8001b7c <ReturnTimeElapsed>
 800196a:	4603      	mov	r3, r0
 800196c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	493e      	ldr	r1, [pc, #248]	; (8001a6c <linkTimer+0x14c>)
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	3308      	adds	r3, #8
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	4419      	add	r1, r3
 8001986:	4839      	ldr	r0, [pc, #228]	; (8001a6c <linkTimer+0x14c>)
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4403      	add	r3, r0
 8001992:	3308      	adds	r3, #8
 8001994:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	4934      	ldr	r1, [pc, #208]	; (8001a6c <linkTimer+0x14c>)
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	440b      	add	r3, r1
 80019a4:	3308      	adds	r3, #8
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <linkTimer+0x144>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4619      	mov	r1, r3
 80019b2:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <linkTimer+0x14c>)
 80019b4:	460b      	mov	r3, r1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	440b      	add	r3, r1
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	3308      	adds	r3, #8
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68ba      	ldr	r2, [r7, #8]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d337      	bcc.n	8001a38 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80019c8:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <linkTimer+0x144>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80019ce:	7b7a      	ldrb	r2, [r7, #13]
 80019d0:	4926      	ldr	r1, [pc, #152]	; (8001a6c <linkTimer+0x14c>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3315      	adds	r3, #21
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019e2:	e013      	b.n	8001a0c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80019e4:	7b7a      	ldrb	r2, [r7, #13]
 80019e6:	4921      	ldr	r1, [pc, #132]	; (8001a6c <linkTimer+0x14c>)
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	440b      	add	r3, r1
 80019f2:	3315      	adds	r3, #21
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80019f8:	7b7a      	ldrb	r2, [r7, #13]
 80019fa:	491c      	ldr	r1, [pc, #112]	; (8001a6c <linkTimer+0x14c>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	3315      	adds	r3, #21
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a0c:	7b3b      	ldrb	r3, [r7, #12]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d00b      	beq.n	8001a2a <linkTimer+0x10a>
 8001a12:	7b3a      	ldrb	r2, [r7, #12]
 8001a14:	4915      	ldr	r1, [pc, #84]	; (8001a6c <linkTimer+0x14c>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3308      	adds	r3, #8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d2dc      	bcs.n	80019e4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a2a:	7b7a      	ldrb	r2, [r7, #13]
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fecf 	bl	80017d4 <LinkTimerAfter>
 8001a36:	e00f      	b.n	8001a58 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <linkTimer+0x144>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff0c 	bl	8001860 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <linkTimer+0x144>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <linkTimer+0x148>)
 8001a50:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <linkTimer+0x144>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001a58:	89fb      	ldrh	r3, [r7, #14]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000120 	.word	0x20000120
 8001a68:	20000121 	.word	0x20000121
 8001a6c:	20000090 	.word	0x20000090
 8001a70:	20000124 	.word	0x20000124

08001a74 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <UnlinkTimer+0xf8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	79fa      	ldrb	r2, [r7, #7]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d111      	bne.n	8001ab4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <UnlinkTimer+0xf8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <UnlinkTimer+0xfc>)
 8001a98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001a9a:	79fa      	ldrb	r2, [r7, #7]
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <UnlinkTimer+0x100>)
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3315      	adds	r3, #21
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <UnlinkTimer+0xf8>)
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e03e      	b.n	8001b32 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	492f      	ldr	r1, [pc, #188]	; (8001b74 <UnlinkTimer+0x100>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	492a      	ldr	r1, [pc, #168]	; (8001b74 <UnlinkTimer+0x100>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3315      	adds	r3, #21
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001adc:	79f9      	ldrb	r1, [r7, #7]
 8001ade:	7bfa      	ldrb	r2, [r7, #15]
 8001ae0:	4824      	ldr	r0, [pc, #144]	; (8001b74 <UnlinkTimer+0x100>)
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	440b      	add	r3, r1
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4403      	add	r3, r0
 8001aec:	3315      	adds	r3, #21
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2d8      	uxtb	r0, r3
 8001af2:	4920      	ldr	r1, [pc, #128]	; (8001b74 <UnlinkTimer+0x100>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	440b      	add	r3, r1
 8001afe:	3315      	adds	r3, #21
 8001b00:	4602      	mov	r2, r0
 8001b02:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d013      	beq.n	8001b32 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b0a:	79f9      	ldrb	r1, [r7, #7]
 8001b0c:	7bba      	ldrb	r2, [r7, #14]
 8001b0e:	4819      	ldr	r0, [pc, #100]	; (8001b74 <UnlinkTimer+0x100>)
 8001b10:	460b      	mov	r3, r1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	440b      	add	r3, r1
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4403      	add	r3, r0
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2d8      	uxtb	r0, r3
 8001b20:	4914      	ldr	r1, [pc, #80]	; (8001b74 <UnlinkTimer+0x100>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3314      	adds	r3, #20
 8001b2e:	4602      	mov	r2, r0
 8001b30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	490f      	ldr	r1, [pc, #60]	; (8001b74 <UnlinkTimer+0x100>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	330c      	adds	r3, #12
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <UnlinkTimer+0xf8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d107      	bne.n	8001b60 <UnlinkTimer+0xec>
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <UnlinkTimer+0x104>)
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
}
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20000120 	.word	0x20000120
 8001b70:	20000121 	.word	0x20000121
 8001b74:	20000090 	.word	0x20000090
 8001b78:	20000124 	.word	0x20000124

08001b7c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <ReturnTimeElapsed+0x70>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d026      	beq.n	8001bda <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001b8c:	f7ff fe02 	bl	8001794 <ReadRtcSsrValue>
 8001b90:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <ReturnTimeElapsed+0x70>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d805      	bhi.n	8001ba8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <ReturnTimeElapsed+0x70>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	e00a      	b.n	8001bbe <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <ReturnTimeElapsed+0x74>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <ReturnTimeElapsed+0x70>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <ReturnTimeElapsed+0x78>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <ReturnTimeElapsed+0x7c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	40d3      	lsrs	r3, r2
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	e001      	b.n	8001bde <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	b29b      	uxth	r3, r3
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000124 	.word	0x20000124
 8001bf0:	2000029e 	.word	0x2000029e
 8001bf4:	2000029d 	.word	0x2000029d
 8001bf8:	2000029c 	.word	0x2000029c

08001bfc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d108      	bne.n	8001c1e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c0c:	f7ff fdc2 	bl	8001794 <ReadRtcSsrValue>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <RestartWakeupCounter+0xa8>)
 8001c14:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c16:	2003      	movs	r0, #3
 8001c18:	f002 fc75 	bl	8004506 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c1c:	e03e      	b.n	8001c9c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d803      	bhi.n	8001c2c <RestartWakeupCounter+0x30>
 8001c24:	4b20      	ldr	r3, [pc, #128]	; (8001ca8 <RestartWakeupCounter+0xac>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001c32:	bf00      	nop
 8001c34:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <RestartWakeupCounter+0xb0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f7      	beq.n	8001c34 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <RestartWakeupCounter+0xb0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <RestartWakeupCounter+0xb0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <RestartWakeupCounter+0xb4>)
 8001c5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c60:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c62:	2003      	movs	r0, #3
 8001c64:	f002 fc5d 	bl	8004522 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <RestartWakeupCounter+0xb8>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <RestartWakeupCounter+0xb8>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c78:	f7ff fd8c 	bl	8001794 <ReadRtcSsrValue>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <RestartWakeupCounter+0xa8>)
 8001c80:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <RestartWakeupCounter+0xb0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <RestartWakeupCounter+0xb0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c94:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001c96:	f3af 8000 	nop.w
  return ;
 8001c9a:	bf00      	nop
}
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000124 	.word	0x20000124
 8001ca8:	2000029c 	.word	0x2000029c
 8001cac:	20000298 	.word	0x20000298
 8001cb0:	58000800 	.word	0x58000800
 8001cb4:	40002800 	.word	0x40002800

08001cb8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <RescheduleTimerList+0x124>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d108      	bne.n	8001cde <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001ccc:	bf00      	nop
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <RescheduleTimerList+0x128>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f7      	bne.n	8001cce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001cde:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <RescheduleTimerList+0x128>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <RescheduleTimerList+0x128>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf0:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <RescheduleTimerList+0x12c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	493b      	ldr	r1, [pc, #236]	; (8001de8 <RescheduleTimerList+0x130>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	3308      	adds	r3, #8
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d0c:	f7ff ff36 	bl	8001b7c <ReturnTimeElapsed>
 8001d10:	4603      	mov	r3, r0
 8001d12:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d205      	bcs.n	8001d28 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <RescheduleTimerList+0x134>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e04d      	b.n	8001dc4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <RescheduleTimerList+0x138>)
 8001d2c:	8812      	ldrh	r2, [r2, #0]
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	4413      	add	r3, r2
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d906      	bls.n	8001d48 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <RescheduleTimerList+0x138>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <RescheduleTimerList+0x134>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e03d      	b.n	8001dc4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <RescheduleTimerList+0x134>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d58:	e034      	b.n	8001dc4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	4922      	ldr	r1, [pc, #136]	; (8001de8 <RescheduleTimerList+0x130>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3308      	adds	r3, #8
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d20a      	bcs.n	8001d88 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	491c      	ldr	r1, [pc, #112]	; (8001de8 <RescheduleTimerList+0x130>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3308      	adds	r3, #8
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e013      	b.n	8001db0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	4917      	ldr	r1, [pc, #92]	; (8001de8 <RescheduleTimerList+0x130>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3308      	adds	r3, #8
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	1ac9      	subs	r1, r1, r3
 8001da0:	4811      	ldr	r0, [pc, #68]	; (8001de8 <RescheduleTimerList+0x130>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4403      	add	r3, r0
 8001dac:	3308      	adds	r3, #8
 8001dae:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <RescheduleTimerList+0x130>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3315      	adds	r3, #21
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d1c7      	bne.n	8001d5a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001dca:	89bb      	ldrh	r3, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff15 	bl	8001bfc <RestartWakeupCounter>

  return ;
 8001dd2:	bf00      	nop
}
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40002800 	.word	0x40002800
 8001de0:	20000298 	.word	0x20000298
 8001de4:	20000120 	.word	0x20000120
 8001de8:	20000090 	.word	0x20000090
 8001dec:	20000128 	.word	0x20000128
 8001df0:	200002a0 	.word	0x200002a0

08001df4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8001e00:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001e06:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	22ca      	movs	r2, #202	; 0xca
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e10:	4b5b      	ldr	r3, [pc, #364]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2253      	movs	r2, #83	; 0x53
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001e1a:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	4b57      	ldr	r3, [pc, #348]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e2c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e2e:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HW_TS_RTC_Wakeup_Handler+0x190>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e3a:	4953      	ldr	r1, [pc, #332]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	330c      	adds	r3, #12
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d170      	bne.n	8001f32 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e54:	494c      	ldr	r1, [pc, #304]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e68:	4947      	ldr	r1, [pc, #284]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	3310      	adds	r3, #16
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HW_TS_RTC_Wakeup_Handler+0x198>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d04e      	beq.n	8001f22 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001e84:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e88:	493f      	ldr	r1, [pc, #252]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	330d      	adds	r3, #13
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d125      	bne.n	8001eea <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fde5 	bl	8001a74 <UnlinkTimer>
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001eb4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eb8:	4933      	ldr	r1, [pc, #204]	; (8001f88 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fa40 	bl	8002354 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	22ca      	movs	r2, #202	; 0xca
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2253      	movs	r2, #83	; 0x53
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee8:	e013      	b.n	8001f12 <HW_TS_RTC_Wakeup_Handler+0x11e>
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f9a1 	bl	8002240 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	22ca      	movs	r2, #202	; 0xca
 8001f06:	625a      	str	r2, [r3, #36]	; 0x24
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2253      	movs	r2, #83	; 0x53
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	69b8      	ldr	r0, [r7, #24]
 8001f1c:	f000 faa0 	bl	8002460 <HW_TS_RTC_Int_AppNot>
 8001f20:	e024      	b.n	8001f6c <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001f22:	f7ff fec9 	bl	8001cb8 <RescheduleTimerList>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f383 8810 	msr	PRIMASK, r3
 8001f30:	e01c      	b.n	8001f6c <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001f32:	bf00      	nop
 8001f34:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f7      	beq.n	8001f34 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f44:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f58:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001f5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	22ff      	movs	r2, #255	; 0xff
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001f76:	bf00      	nop
}
 8001f78:	3728      	adds	r7, #40	; 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000298 	.word	0x20000298
 8001f84:	20000120 	.word	0x20000120
 8001f88:	20000090 	.word	0x20000090
 8001f8c:	20000128 	.word	0x20000128
 8001f90:	58000800 	.word	0x58000800

08001f94 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001fa0:	4a61      	ldr	r2, [pc, #388]	; (8002128 <HW_TS_Init+0x194>)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HW_TS_Init+0x194>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ca      	movs	r2, #202	; 0xca
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
 8001fb0:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HW_TS_Init+0x194>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2253      	movs	r2, #83	; 0x53
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HW_TS_Init+0x198>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HW_TS_Init+0x198>)
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001fc6:	4b59      	ldr	r3, [pc, #356]	; (800212c <HW_TS_Init+0x198>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f1c3 0304 	rsb	r3, r3, #4
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	4b55      	ldr	r3, [pc, #340]	; (8002130 <HW_TS_Init+0x19c>)
 8001fda:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HW_TS_Init+0x198>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fe4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001fe8:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	40d3      	lsrs	r3, r2
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HW_TS_Init+0x1a0>)
 8002004:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <HW_TS_Init+0x198>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	b29b      	uxth	r3, r3
 800200c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002010:	b29b      	uxth	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HW_TS_Init+0x1a4>)
 8002018:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HW_TS_Init+0x1a4>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	3b01      	subs	r3, #1
 8002020:	4a44      	ldr	r2, [pc, #272]	; (8002134 <HW_TS_Init+0x1a0>)
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800202c:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HW_TS_Init+0x19c>)
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	40d3      	lsrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800203a:	4293      	cmp	r3, r2
 800203c:	d904      	bls.n	8002048 <HW_TS_Init+0xb4>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800203e:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HW_TS_Init+0x1a8>)
 8002040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	e003      	b.n	8002050 <HW_TS_Init+0xbc>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b3b      	ldr	r3, [pc, #236]	; (800213c <HW_TS_Init+0x1a8>)
 800204e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002050:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002054:	f7ff fb8c 	bl	8001770 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002058:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800205c:	f7ff fb74 	bl	8001748 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d143      	bne.n	80020ee <HW_TS_Init+0x15a>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002066:	4b36      	ldr	r3, [pc, #216]	; (8002140 <HW_TS_Init+0x1ac>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HW_TS_Init+0x1b0>)
 800206e:	f04f 32ff 	mov.w	r2, #4294967295
 8002072:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]
 8002078:	e00c      	b.n	8002094 <HW_TS_Init+0x100>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800207a:	7dfa      	ldrb	r2, [r7, #23]
 800207c:	4932      	ldr	r1, [pc, #200]	; (8002148 <HW_TS_Init+0x1b4>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	330c      	adds	r3, #12
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	3301      	adds	r3, #1
 8002092:	75fb      	strb	r3, [r7, #23]
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d9ef      	bls.n	800207a <HW_TS_Init+0xe6>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HW_TS_Init+0x1b8>)
 800209c:	2206      	movs	r2, #6
 800209e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HW_TS_Init+0x194>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HW_TS_Init+0x194>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HW_TS_Init+0x194>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HW_TS_Init+0x194>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020c8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HW_TS_Init+0x1bc>)
 80020cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020d0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80020d2:	2003      	movs	r0, #3
 80020d4:	f002 fa25 	bl	8004522 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HW_TS_Init+0x194>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HW_TS_Init+0x194>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	e00a      	b.n	8002104 <HW_TS_Init+0x170>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80020ee:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HW_TS_Init+0x194>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HW_TS_Init+0x170>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80020fe:	2003      	movs	r0, #3
 8002100:	f002 fa01 	bl	8004506 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <HW_TS_Init+0x194>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800210e:	2200      	movs	r2, #0
 8002110:	2103      	movs	r1, #3
 8002112:	2003      	movs	r0, #3
 8002114:	f002 f9b5 	bl	8004482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002118:	2003      	movs	r0, #3
 800211a:	f002 f9cc 	bl	80044b6 <HAL_NVIC_EnableIRQ>

  return;
 800211e:	bf00      	nop
}
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000298 	.word	0x20000298
 800212c:	40002800 	.word	0x40002800
 8002130:	2000029c 	.word	0x2000029c
 8002134:	2000029d 	.word	0x2000029d
 8002138:	2000029e 	.word	0x2000029e
 800213c:	200002a0 	.word	0x200002a0
 8002140:	20000128 	.word	0x20000128
 8002144:	20000124 	.word	0x20000124
 8002148:	20000090 	.word	0x20000090
 800214c:	20000120 	.word	0x20000120
 8002150:	58000800 	.word	0x58000800

08002154 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002154:	b480      	push	{r7}
 8002156:	b08b      	sub	sp, #44	; 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216a:	f3ef 8310 	mrs	r3, PRIMASK
 800216e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002170:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002172:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002174:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002176:	e004      	b.n	8002182 <HW_TS_Create+0x2e>
  {
    loop++;
 8002178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800217c:	3301      	adds	r3, #1
 800217e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002186:	2b05      	cmp	r3, #5
 8002188:	d80c      	bhi.n	80021a4 <HW_TS_Create+0x50>
 800218a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800218e:	492b      	ldr	r1, [pc, #172]	; (800223c <HW_TS_Create+0xe8>)
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	330c      	adds	r3, #12
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e9      	bne.n	8002178 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d037      	beq.n	800221c <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80021ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021b0:	4922      	ldr	r1, [pc, #136]	; (800223c <HW_TS_Create+0xe8>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	330c      	adds	r3, #12
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80021cc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021d0:	491a      	ldr	r1, [pc, #104]	; (800223c <HW_TS_Create+0xe8>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3310      	adds	r3, #16
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80021e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021e6:	4915      	ldr	r1, [pc, #84]	; (800223c <HW_TS_Create+0xe8>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	330d      	adds	r3, #13
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80021f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021fc:	490f      	ldr	r1, [pc, #60]	; (800223c <HW_TS_Create+0xe8>)
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002212:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800221a:	e007      	b.n	800222c <HW_TS_Create+0xd8>
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800222c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002230:	4618      	mov	r0, r3
 8002232:	372c      	adds	r7, #44	; 0x2c
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	20000090 	.word	0x20000090

08002240 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002250:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002256:	2003      	movs	r0, #3
 8002258:	f002 f93b 	bl	80044d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800225c:	4b37      	ldr	r3, [pc, #220]	; (800233c <HW_TS_Stop+0xfc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	22ca      	movs	r2, #202	; 0xca
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <HW_TS_Stop+0xfc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2253      	movs	r2, #83	; 0x53
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	4933      	ldr	r1, [pc, #204]	; (8002340 <HW_TS_Stop+0x100>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	330c      	adds	r3, #12
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d148      	bne.n	800231a <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fbf1 	bl	8001a74 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HW_TS_Stop+0x104>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d135      	bne.n	800230a <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HW_TS_Stop+0x108>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022aa:	d108      	bne.n	80022be <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80022ac:	bf00      	nop
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HW_TS_Stop+0xfc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f7      	bne.n	80022ae <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HW_TS_Stop+0xfc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HW_TS_Stop+0xfc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80022d2:	bf00      	nop
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HW_TS_Stop+0xfc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f7      	beq.n	80022d4 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <HW_TS_Stop+0xfc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HW_TS_Stop+0xfc>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80022f8:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <HW_TS_Stop+0x10c>)
 80022fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002300:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002302:	2003      	movs	r0, #3
 8002304:	f002 f90d 	bl	8004522 <HAL_NVIC_ClearPendingIRQ>
 8002308:	e007      	b.n	800231a <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HW_TS_Stop+0x110>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	7cfa      	ldrb	r2, [r7, #19]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8002316:	f7ff fccf 	bl	8001cb8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HW_TS_Stop+0xfc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002324:	2003      	movs	r0, #3
 8002326:	f002 f8c6 	bl	80044b6 <HAL_NVIC_EnableIRQ>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002334:	bf00      	nop
}
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000298 	.word	0x20000298
 8002340:	20000090 	.word	0x20000090
 8002344:	20000120 	.word	0x20000120
 8002348:	40002800 	.word	0x40002800
 800234c:	58000800 	.word	0x58000800
 8002350:	20000121 	.word	0x20000121

08002354 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	493b      	ldr	r1, [pc, #236]	; (8002450 <HW_TS_Start+0xfc>)
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	330c      	adds	r3, #12
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d103      	bne.n	8002380 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff60 	bl	8002240 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002380:	f3ef 8310 	mrs	r3, PRIMASK
 8002384:	60fb      	str	r3, [r7, #12]
  return(result);
 8002386:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002388:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800238a:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800238c:	2003      	movs	r0, #3
 800238e:	f002 f8a0 	bl	80044d2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8002392:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HW_TS_Start+0x100>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	22ca      	movs	r2, #202	; 0xca
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HW_TS_Start+0x100>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2253      	movs	r2, #83	; 0x53
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	4929      	ldr	r1, [pc, #164]	; (8002450 <HW_TS_Start+0xfc>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	330c      	adds	r3, #12
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023ba:	79fa      	ldrb	r2, [r7, #7]
 80023bc:	4924      	ldr	r1, [pc, #144]	; (8002450 <HW_TS_Start+0xfc>)
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	3308      	adds	r3, #8
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023ce:	79fa      	ldrb	r2, [r7, #7]
 80023d0:	491f      	ldr	r1, [pc, #124]	; (8002450 <HW_TS_Start+0xfc>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	3304      	adds	r3, #4
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fa9b 	bl	8001920 <linkTimer>
 80023ea:	4603      	mov	r3, r0
 80023ec:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HW_TS_Start+0x104>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HW_TS_Start+0x108>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	7c7a      	ldrb	r2, [r7, #17]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d002      	beq.n	8002406 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 8002400:	f7ff fc5a 	bl	8001cb8 <RescheduleTimerList>
 8002404:	e013      	b.n	800242e <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	4911      	ldr	r1, [pc, #68]	; (8002450 <HW_TS_Start+0xfc>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	440b      	add	r3, r1
 8002414:	3308      	adds	r3, #8
 8002416:	6819      	ldr	r1, [r3, #0]
 8002418:	8a7b      	ldrh	r3, [r7, #18]
 800241a:	79fa      	ldrb	r2, [r7, #7]
 800241c:	1ac9      	subs	r1, r1, r3
 800241e:	480c      	ldr	r0, [pc, #48]	; (8002450 <HW_TS_Start+0xfc>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4403      	add	r3, r0
 800242a:	3308      	adds	r3, #8
 800242c:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HW_TS_Start+0x100>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	22ff      	movs	r2, #255	; 0xff
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002438:	2003      	movs	r0, #3
 800243a:	f002 f83c 	bl	80044b6 <HAL_NVIC_EnableIRQ>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002448:	bf00      	nop
}
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000090 	.word	0x20000090
 8002454:	20000298 	.word	0x20000298
 8002458:	20000120 	.word	0x20000120
 800245c:	20000121 	.word	0x20000121

08002460 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	460b      	mov	r3, r1
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4798      	blx	r3

  return;
 8002472:	bf00      	nop
}
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZN7i2c_bus17complete_transferEv>:
    void complete_transfer(void) {mXferDone = true;};
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	715a      	strb	r2, [r3, #5]
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_ZN7i2c_bus8setErrorEm>:
    void setError(uint32_t err) { mErrorCode = err; };
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_ZN7i2c_busC1Ev>:
        default:
            break;
    }
}*/

i2c_bus::i2c_bus(void)
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
    err_code = nrf_drv_twi_init(&m_twi, &twi_bus_config, twi_handler, NULL);
    APP_ERROR_CHECK(err_code);

    m_xfer_done = false;
    nrf_drv_twi_enable(&m_twi);*/
}
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_ZN7i2c_busD1Ev>:

i2c_bus::~i2c_bus(void)
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
{
    //printf("Called i2c_bus destructor.");
}
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <__tcf_0>:

i2c_bus& i2c_bus::GetInstance(void)
{
    static i2c_bus  instance;
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <__tcf_0+0xc>)
 80024e2:	f7ff fff0 	bl	80024c6 <_ZN7i2c_busD1Ev>
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200002a4 	.word	0x200002a4

080024ec <_ZN7i2c_bus11GetInstanceEv>:
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
    static i2c_bus  instance;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <_ZN7i2c_bus11GetInstanceEv+0x28>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <_ZN7i2c_bus11GetInstanceEv+0x22>
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <_ZN7i2c_bus11GetInstanceEv+0x2c>)
 80024fe:	f7ff ffd7 	bl	80024b0 <_ZN7i2c_busC1Ev>
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <_ZN7i2c_bus11GetInstanceEv+0x28>)
 8002504:	2201      	movs	r2, #1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4804      	ldr	r0, [pc, #16]	; (800251c <_ZN7i2c_bus11GetInstanceEv+0x30>)
 800250a:	f00b f9f4 	bl	800d8f6 <atexit>
    return instance;
 800250e:	4b02      	ldr	r3, [pc, #8]	; (8002518 <_ZN7i2c_bus11GetInstanceEv+0x2c>)
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200002b0 	.word	0x200002b0
 8002518:	200002a4 	.word	0x200002a4
 800251c:	080024dd 	.word	0x080024dd

08002520 <_ZN7i2c_bus9setHandleEP19__I2C_HandleTypeDef>:

void i2c_bus::setHandle(I2C_HandleTypeDef *ph)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	pHandle = ph;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	601a      	str	r2, [r3, #0]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_ZN7i2c_bus4initEh>:

void i2c_bus::init(uint8_t dev_addr)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
    mDevAddr = dev_addr << 1;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	711a      	strb	r2, [r3, #4]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <_ZN7i2c_bus5writeEPhh>:

HAL_StatusTypeDef i2c_bus::write(uint8_t *buffer, uint8_t len)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	4613      	mov	r3, r2
 800256a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef      err_code;
	mXferDone = false;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	715a      	strb	r2, [r3, #5]
    err_code = HAL_I2C_Master_Transmit_IT(pHandle, mDevAddr, buffer, len);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	b299      	uxth	r1, r3
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	b29b      	uxth	r3, r3
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	f002 fcc7 	bl	8004f14 <HAL_I2C_Master_Transmit_IT>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
    return err_code;
 800258a:	7dfb      	ldrb	r3, [r7, #23]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZN7i2c_bus4readEPhh>:

HAL_StatusTypeDef i2c_bus::read(uint8_t *buffer, uint8_t len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef      err_code;
	mXferDone = false;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	715a      	strb	r2, [r3, #5]
    err_code = HAL_I2C_Master_Receive_IT(pHandle, mDevAddr, buffer, len);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	791b      	ldrb	r3, [r3, #4]
 80025b0:	b299      	uxth	r1, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f002 fd1c 	bl	8004ff4 <HAL_I2C_Master_Receive_IT>
 80025bc:	4603      	mov	r3, r0
 80025be:	75fb      	strb	r3, [r7, #23]
    return err_code;
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
	i2c_bus::GetInstance().complete_transfer();
 80025d2:	f7ff ff8b 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff4e 	bl	800247a <_ZN7i2c_bus17complete_transferEv>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	i2c_bus::GetInstance().complete_transfer();
 80025ee:	f7ff ff7d 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff40 	bl	800247a <_ZN7i2c_bus17complete_transferEv>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
	i2c_bus::GetInstance().setError(hi2c->ErrorCode);
 800260a:	f7ff ff6f 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f7ff ff3c 	bl	8002494 <_ZN7i2c_bus8setErrorEm>
	i2c_bus::GetInstance().complete_transfer();
 800261c:	f7ff ff66 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8002620:	4603      	mov	r3, r0
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ff29 	bl	800247a <_ZN7i2c_bus17complete_transferEv>
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <Tick>:

static THPSensor* 	thp_sensor;
static ServoMotor*	motor;

void Tick(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	Timer::GetInstance().Tick();
 8002634:	f001 fc70 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	f001 fc86 	bl	8003f4c <_ZN5Timer4TickEv>
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}

08002644 <InitSensorTask>:

void InitSensorTask(I2C_HandleTypeDef *handle)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	thp_sensor = new THPSensor();
 800264c:	2038      	movs	r0, #56	; 0x38
 800264e:	f00b f874 	bl	800d73a <_Znwj>
 8002652:	4603      	mov	r3, r0
 8002654:	461c      	mov	r4, r3
 8002656:	4620      	mov	r0, r4
 8002658:	f7fe fb7e 	bl	8000d58 <_ZN9THPSensorC1Ev>
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <InitSensorTask+0x40>)
 800265e:	601c      	str	r4, [r3, #0]
	i2c_bus::GetInstance().setHandle(handle);
 8002660:	f7ff ff44 	bl	80024ec <_ZN7i2c_bus11GetInstanceEv>
 8002664:	4603      	mov	r3, r0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff59 	bl	8002520 <_ZN7i2c_bus9setHandleEP19__I2C_HandleTypeDef>
	Timer::GetInstance().ArmTimer(SENSOR_TIMER);
 800266e:	f001 fc53 	bl	8003f18 <_ZN5Timer11GetInstanceEv>
 8002672:	4603      	mov	r3, r0
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f001 fc77 	bl	8003f6a <_ZN5Timer8ArmTimerEm>
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	200002b4 	.word	0x200002b4

08002688 <RunSensorTask>:

void RunSensorTask(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	thp_sensor->task();
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <RunSensorTask+0x1c>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <RunSensorTask+0x1c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3308      	adds	r3, #8
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4610      	mov	r0, r2
 800269c:	4798      	blx	r3
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200002b4 	.word	0x200002b4

080026a8 <InitServoMotor>:
{
	thp_sensor->setHumidityNotifyStatus(status);
}

void InitServoMotor(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af04      	add	r7, sp, #16
	motor = new ServoMotor(0, 0xffff, 0x7fff, 430, 2560, 1492);
 80026ae:	200e      	movs	r0, #14
 80026b0:	f00b f843 	bl	800d73a <_Znwj>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461c      	mov	r4, r3
 80026b8:	f240 53d4 	movw	r3, #1492	; 0x5d4
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80026ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d2:	2100      	movs	r1, #0
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fd ff2b 	bl	8000530 <_ZN10ServoMotorC1Etttttt>
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <InitServoMotor+0x40>)
 80026dc:	601c      	str	r4, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	3704      	adds	r7, #4
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200002b8 	.word	0x200002b8

080026ec <SetServoMotorPosition>:

void SetServoMotorPosition(uint16_t pos)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
	motor->SetCurrValue(pos);
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <SetServoMotorPosition+0x20>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff40 	bl	8000584 <_ZN10ServoMotor12SetCurrValueEt>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200002b8 	.word	0x200002b8

08002710 <LL_RCC_LSE_SetDriveCapability>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f023 0218 	bic.w	r2, r3, #24
 8002724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800274a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4313      	orrs	r3, r2
 8002784:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <SVCCTL_SvcInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SVCCTL_SvcInit(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  BLS_Init();
 80027a4:	f009 fb99 	bl	800beda <BLS_Init>

  CRS_STM_Init();
 80027a8:	f009 fb9e 	bl	800bee8 <CRS_STM_Init>

  DIS_Init();
 80027ac:	f009 fba3 	bl	800bef6 <DIS_Init>

  EDS_STM_Init();
 80027b0:	f009 fba8 	bl	800bf04 <EDS_STM_Init>

  HIDS_Init();
 80027b4:	f009 fbad 	bl	800bf12 <HIDS_Init>

  HRS_Init();
 80027b8:	f009 fbb2 	bl	800bf20 <HRS_Init>

  HTS_Init();
 80027bc:	f009 fbb7 	bl	800bf2e <HTS_Init>

  IAS_Init();
 80027c0:	f009 fbbc 	bl	800bf3c <IAS_Init>

  LLS_Init();
 80027c4:	f009 fbc1 	bl	800bf4a <LLS_Init>

  TPS_Init();
 80027c8:	f009 fbc6 	bl	800bf58 <TPS_Init>

  MOTENV_STM_Init();
 80027cc:	f009 fbcb 	bl	800bf66 <MOTENV_STM_Init>

  //P2PS_STM_Init();

  OTAS_STM_Init();
 80027d0:	f009 fbd0 	bl	800bf74 <OTAS_STM_Init>

  BVOPUS_STM_Init();
 80027d4:	f009 fbdc 	bl	800bf90 <BVOPUS_STM_Init>

  MESH_Init();
 80027d8:	f009 fbd3 	bl	800bf82 <MESH_Init>

  SVCCTL_BLEDeviceInitCustomSvc();
 80027dc:	f001 f948 	bl	8003a70 <SVCCTL_BLEDeviceInitCustomSvc>

  return;
 80027e0:	bf00      	nop
}
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027e8:	f001 fc6c 	bl	80040c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ec:	f000 f832 	bl	8002854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f0:	f000 fa9a 	bl	8002d28 <MX_GPIO_Init>
  MX_DMA_Init();
 80027f4:	f000 fa7e 	bl	8002cf4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80027f8:	f000 fa08 	bl	8002c0c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80027fc:	f000 fa52 	bl	8002ca4 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 8002800:	f000 f8d6 	bl	80029b0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002804:	f000 f93a 	bl	8002a7c <MX_TIM2_Init>
  MX_RF_Init();
 8002808:	f000 f912 	bl	8002a30 <MX_RF_Init>
  MX_RTC_Init();
 800280c:	f000 f918 	bl	8002a40 <MX_RTC_Init>
  MX_TIM16_Init();
 8002810:	f000 f982 	bl	8002b18 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  InitSensorTask(&hi2c1);
 8002814:	480b      	ldr	r0, [pc, #44]	; (8002844 <main+0x60>)
 8002816:	f7ff ff15 	bl	8002644 <InitSensorTask>
  Period = 1492 << 16;
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <main+0x64>)
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <main+0x68>)
 800281e:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_DMA(&htim16, TIM_CHANNEL_1, (uint32_t*)&Period, 2);
 8002820:	2302      	movs	r3, #2
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <main+0x64>)
 8002824:	2100      	movs	r1, #0
 8002826:	480a      	ldr	r0, [pc, #40]	; (8002850 <main+0x6c>)
 8002828:	f005 fe7c 	bl	8008524 <HAL_TIM_PWM_Start_DMA>
  InitServoMotor();
 800282c:	f7ff ff3c 	bl	80026a8 <InitServoMotor>
  //UTIL_SEQ_RegTask(1 << CFG_TASK_SENSOR_POLL, 0UL, RunSensorTask);
  //UTIL_SEQ_SetTask(1 << CFG_TASK_SENSOR_POLL, 0);
  /* USER CODE END 2 */
 
  /* Init code for STM32_WPAN */  
  APPE_Init();
 8002830:	f7fe feea 	bl	8001608 <APPE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  RunSensorTask();
 8002834:	f7ff ff28 	bl	8002688 <RunSensorTask>
	  UTIL_SEQ_Run(~0);
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f000 fb2a 	bl	8002e94 <UTIL_SEQ_Run>
	  RunSensorTask();
 8002840:	e7f8      	b.n	8002834 <main+0x50>
 8002842:	bf00      	nop
 8002844:	20000488 	.word	0x20000488
 8002848:	200005e4 	.word	0x200005e4
 800284c:	05d40000 	.word	0x05d40000
 8002850:	2000089c 	.word	0x2000089c

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b0ae      	sub	sp, #184	; 0xb8
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800285e:	2248      	movs	r2, #72	; 0x48
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f00b f88b 	bl	800d97e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
 8002878:	615a      	str	r2, [r3, #20]
 800287a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2250      	movs	r2, #80	; 0x50
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f00b f87b 	bl	800d97e <memset>

  /** Macro to configure the PLL multiplication factor 
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002896:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability 
  */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff ff2f 	bl	8002710 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b2:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <SystemClock_Config+0x158>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ba:	4a3c      	ldr	r2, [pc, #240]	; (80029ac <SystemClock_Config+0x158>)
 80028bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <SystemClock_Config+0x158>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80028ce:	2327      	movs	r3, #39	; 0x27
 80028d0:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028d8:	2301      	movs	r3, #1
 80028da:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e8:	2340      	movs	r3, #64	; 0x40
 80028ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80028f4:	2360      	movs	r3, #96	; 0x60
 80028f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002900:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fa8b 	bl	8006e20 <HAL_RCC_OscConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002910:	f000 fa78 	bl	8002e04 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002914:	236f      	movs	r3, #111	; 0x6f
 8002916:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002918:	2302      	movs	r3, #2
 800291a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800291c:	2300      	movs	r3, #0
 800291e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002920:	2300      	movs	r3, #0
 8002922:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fdd0 	bl	80074dc <HAL_RCC_ClockConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002942:	f000 fa5f 	bl	8002e04 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002946:	f643 1305 	movw	r3, #14597	; 0x3905
 800294a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800294c:	2318      	movs	r3, #24
 800294e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800295a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800295c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002960:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002962:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002966:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002968:	2300      	movs	r3, #0
 800296a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800296c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002972:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800297e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002984:	2302      	movs	r3, #2
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002988:	2300      	movs	r3, #0
 800298a:	653b      	str	r3, [r7, #80]	; 0x50

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4618      	mov	r0, r3
 8002990:	f005 f9ee 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800299a:	f000 fa33 	bl	8002e04 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800299e:	f005 fb5c 	bl	800805a <HAL_RCCEx_EnableMSIPLLMode>
}
 80029a2:	bf00      	nop
 80029a4:	37b8      	adds	r7, #184	; 0xb8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	58000400 	.word	0x58000400

080029b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <MX_I2C1_Init+0x78>)
 80029b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029bc:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <MX_I2C1_Init+0x7c>)
 80029be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029cc:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ea:	480e      	ldr	r0, [pc, #56]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029ec:	f002 fa02 	bl	8004df4 <HAL_I2C_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029f6:	f000 fa05 	bl	8002e04 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029fa:	2100      	movs	r1, #0
 80029fc:	4809      	ldr	r0, [pc, #36]	; (8002a24 <MX_I2C1_Init+0x74>)
 80029fe:	f003 fce0 	bl	80063c2 <HAL_I2CEx_ConfigAnalogFilter>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a08:	f000 f9fc 	bl	8002e04 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_I2C1_Init+0x74>)
 8002a10:	f003 fd22 	bl	8006458 <HAL_I2CEx_ConfigDigitalFilter>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a1a:	f000 f9f3 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000488 	.word	0x20000488
 8002a28:	40005400 	.word	0x40005400
 8002a2c:	00707cbb 	.word	0x00707cbb

08002a30 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_RTC_Init+0x34>)
 8002a46:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <MX_RTC_Init+0x38>)
 8002a48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <MX_RTC_Init+0x34>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_RTC_Init+0x34>)
 8002a52:	220f      	movs	r2, #15
 8002a54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <MX_RTC_Init+0x34>)
 8002a58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a5c:	60da      	str	r2, [r3, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_RTC_Init+0x34>)
 8002a60:	f005 fc12 	bl	8008288 <HAL_RTC_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8002a6a:	f000 f9cb 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000560 	.word	0x20000560
 8002a78:	40002800 	.word	0x40002800

08002a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a9a:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aa4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ab2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ab6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ac6:	f005 fccd 	bl	8008464 <HAL_TIM_Base_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002ad0:	f000 f998 	bl	8002e04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ada:	f107 0310 	add.w	r3, r7, #16
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002ae2:	f006 f875 	bl	8008bd0 <HAL_TIM_ConfigClockSource>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002aec:	f000 f98a 	bl	8002e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	4619      	mov	r1, r3
 8002afc:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_TIM2_Init+0x98>)
 8002afe:	f006 fd8d 	bl	800961c <HAL_TIMEx_MasterConfigSynchronization>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002b08:	f000 f97c 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	3720      	adds	r7, #32
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200005e8 	.word	0x200005e8

08002b18 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b092      	sub	sp, #72	; 0x48
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b32:	463b      	mov	r3, r7
 8002b34:	222c      	movs	r2, #44	; 0x2c
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f00a ff20 	bl	800d97e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b40:	4a31      	ldr	r2, [pc, #196]	; (8002c08 <MX_TIM16_Init+0xf0>)
 8002b42:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8002b44:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b46:	221f      	movs	r2, #31
 8002b48:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 20000;
 8002b50:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b52:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002b56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b58:	4b2a      	ldr	r3, [pc, #168]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b5e:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b6a:	4826      	ldr	r0, [pc, #152]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b6c:	f005 fc7a 	bl	8008464 <HAL_TIM_Base_Init>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002b76:	f000 f945 	bl	8002e04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002b7a:	4822      	ldr	r0, [pc, #136]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002b7c:	f005 fc9d 	bl	80084ba <HAL_TIM_PWM_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002b86:	f000 f93d 	bl	8002e04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b8a:	2360      	movs	r3, #96	; 0x60
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1492;
 8002b8e:	f240 53d4 	movw	r3, #1492	; 0x5d4
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bac:	2200      	movs	r2, #0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4814      	ldr	r0, [pc, #80]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002bb2:	f005 fef5 	bl	80089a0 <HAL_TIM_PWM_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8002bbc:	f000 f922 	bl	8002e04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002be2:	463b      	mov	r3, r7
 8002be4:	4619      	mov	r1, r3
 8002be6:	4807      	ldr	r0, [pc, #28]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002be8:	f006 fd78 	bl	80096dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002bf2:	f000 f907 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <MX_TIM16_Init+0xec>)
 8002bf8:	f000 fcb6 	bl	8003568 <HAL_TIM_MspPostInit>

}
 8002bfc:	bf00      	nop
 8002bfe:	3748      	adds	r7, #72	; 0x48
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000089c 	.word	0x2000089c
 8002c08:	40014400 	.word	0x40014400

08002c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c12:	4a23      	ldr	r2, [pc, #140]	; (8002ca0 <MX_USART1_UART_Init+0x94>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b1f      	ldr	r3, [pc, #124]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c54:	4811      	ldr	r0, [pc, #68]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c56:	f006 fdf7 	bl	8009848 <HAL_UART_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c60:	f000 f8d0 	bl	8002e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c64:	2100      	movs	r1, #0
 8002c66:	480d      	ldr	r0, [pc, #52]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c68:	f008 f845 	bl	800acf6 <HAL_UARTEx_SetTxFifoThreshold>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c72:	f000 f8c7 	bl	8002e04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c76:	2100      	movs	r1, #0
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c7a:	f008 f87a 	bl	800ad72 <HAL_UARTEx_SetRxFifoThreshold>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c84:	f000 f8be 	bl	8002e04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c88:	4804      	ldr	r0, [pc, #16]	; (8002c9c <MX_USART1_UART_Init+0x90>)
 8002c8a:	f007 fffb 	bl	800ac84 <HAL_UARTEx_DisableFifoMode>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c94:	f000 f8b6 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	200004d4 	.word	0x200004d4
 8002ca0:	40013800 	.word	0x40013800

08002ca4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002ca8:	4b10      	ldr	r3, [pc, #64]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <MX_USB_PCD_Init+0x4c>)
 8002cac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002cae:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <MX_USB_PCD_Init+0x48>)
 8002cda:	f003 fc09 	bl	80064f0 <HAL_PCD_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ce4:	f000 f88e 	bl	8002e04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000628 	.word	0x20000628
 8002cf0:	40006800 	.word	0x40006800

08002cf4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002cf8:	2004      	movs	r0, #4
 8002cfa:	f7ff fd1f 	bl	800273c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cfe:	2001      	movs	r0, #1
 8002d00:	f7ff fd1c 	bl	800273c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	200b      	movs	r0, #11
 8002d0a:	f001 fbba 	bl	8004482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002d0e:	200b      	movs	r0, #11
 8002d10:	f001 fbd1 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	203e      	movs	r0, #62	; 0x3e
 8002d1a:	f001 fbb2 	bl	8004482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8002d1e:	203e      	movs	r0, #62	; 0x3e
 8002d20:	f001 fbc9 	bl	80044b6 <HAL_NVIC_EnableIRQ>

}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	f7ff fd16 	bl	800276e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2002      	movs	r0, #2
 8002d44:	f7ff fd13 	bl	800276e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7ff fd10 	bl	800276e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d4e:	2008      	movs	r0, #8
 8002d50:	f7ff fd0d 	bl	800276e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2101      	movs	r1, #1
 8002d58:	4827      	ldr	r0, [pc, #156]	; (8002df8 <MX_GPIO_Init+0xd0>)
 8002d5a:	f002 f833 	bl	8004dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY1_Pin|RELAY2_Pin|RELAY3_Pin|RELAY4_Pin, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	210f      	movs	r1, #15
 8002d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d66:	f002 f82d 	bl	8004dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2123      	movs	r1, #35	; 0x23
 8002d6e:	4823      	ldr	r0, [pc, #140]	; (8002dfc <MX_GPIO_Init+0xd4>)
 8002d70:	f002 f828 	bl	8004dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d74:	2301      	movs	r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d80:	2302      	movs	r3, #2
 8002d82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	481b      	ldr	r0, [pc, #108]	; (8002df8 <MX_GPIO_Init+0xd0>)
 8002d8a:	f001 feab 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY1_Pin RELAY2_Pin RELAY3_Pin RELAY4_Pin */
  GPIO_InitStruct.Pin = RELAY1_Pin|RELAY2_Pin|RELAY3_Pin|RELAY4_Pin;
 8002d8e:	230f      	movs	r3, #15
 8002d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d92:	2301      	movs	r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002da6:	f001 fe9d 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002daa:	2310      	movs	r3, #16
 8002dac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	480f      	ldr	r0, [pc, #60]	; (8002df8 <MX_GPIO_Init+0xd0>)
 8002dbc:	f001 fe92 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002dc0:	2323      	movs	r3, #35	; 0x23
 8002dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4809      	ldr	r0, [pc, #36]	; (8002dfc <MX_GPIO_Init+0xd4>)
 8002dd6:	f001 fe85 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MX_GPIO_Init+0xd8>)
 8002dec:	f001 fe7a 	bl	8004ae4 <HAL_GPIO_Init>

}
 8002df0:	bf00      	nop
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	48000800 	.word	0x48000800
 8002dfc:	48000400 	.word	0x48000400
 8002e00:	48000c00 	.word	0x48000c00

08002e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <UTIL_LPM_Init>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init( void )
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <UTIL_LPM_Init+0x1c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <UTIL_LPM_Init+0x20>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	200002bc 	.word	0x200002bc
 8002e34:	200002c0 	.word	0x200002c0

08002e38 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e44:	f3ef 8310 	mrs	r3, PRIMASK
 8002e48:	613b      	str	r3, [r7, #16]
  return(result);
 8002e4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8002e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e4e:	b672      	cpsid	i
  
  switch(state)
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <UTIL_LPM_SetOffMode+0x32>
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d000      	beq.n	8002e5c <UTIL_LPM_SetOffMode+0x24>
    {
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
    default:
      break;
 8002e5a:	e00e      	b.n	8002e7a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <UTIL_LPM_SetOffMode+0x58>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <UTIL_LPM_SetOffMode+0x58>)
 8002e66:	6013      	str	r3, [r2, #0]
      break;
 8002e68:	e007      	b.n	8002e7a <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <UTIL_LPM_SetOffMode+0x58>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4013      	ands	r3, r2
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <UTIL_LPM_SetOffMode+0x58>)
 8002e76:	6013      	str	r3, [r2, #0]
      break;
 8002e78:	bf00      	nop
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f383 8810 	msr	PRIMASK, r3
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	200002c0 	.word	0x200002c0

08002e94 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t mask_bm )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08c      	sub	sp, #48	; 0x30
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8002e9c:	4b63      	ldr	r3, [pc, #396]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= mask_bm;
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	4a60      	ldr	r2, [pc, #384]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002eac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8002eae:	e082      	b.n	8002fb6 <UTIL_SEQ_Run+0x122>
  {
    counter = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002eb4:	e002      	b.n	8002ebc <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	3301      	adds	r3, #1
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    while(!(TaskPrio[counter].priority & TaskMask & SuperMask))
 8002ebc:	4a5c      	ldr	r2, [pc, #368]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ec4:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <UTIL_SEQ_Run+0x1a0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	401a      	ands	r2, r3
 8002eca:	4b58      	ldr	r3, [pc, #352]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8002ed4:	4a56      	ldr	r2, [pc, #344]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002edc:	4b55      	ldr	r3, [pc, #340]	; (8003034 <UTIL_SEQ_Run+0x1a0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if (!(TaskPrio[counter].round_robin & current_task_set))
 8002eea:	4a51      	ldr	r2, [pc, #324]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8002efc:	4a4c      	ldr	r2, [pc, #304]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = bit_position(current_task_set & TaskPrio[counter].round_robin);
 8002f0a:	4a49      	ldr	r2, [pc, #292]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	4013      	ands	r3, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f97d 	bl	8003218 <bit_position>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	4b45      	ldr	r3, [pc, #276]	; (8003038 <UTIL_SEQ_Run+0x1a4>)
 8002f22:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1 << (CurrentTaskIdx));
 8002f24:	4a42      	ldr	r2, [pc, #264]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a42      	ldr	r2, [pc, #264]	; (8003038 <UTIL_SEQ_Run+0x1a4>)
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	43d2      	mvns	r2, r2
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	493c      	ldr	r1, [pc, #240]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	440b      	add	r3, r1
 8002f44:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f46:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f4c:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002f4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f50:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1 << (CurrentTaskIdx));
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <UTIL_SEQ_Run+0x1a4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <UTIL_SEQ_Run+0x1a8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4013      	ands	r3, r2
 8002f66:	4a35      	ldr	r2, [pc, #212]	; (800303c <UTIL_SEQ_Run+0x1a8>)
 8002f68:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6e:	e014      	b.n	8002f9a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1].priority &= ~(1 << (CurrentTaskIdx));
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	3b01      	subs	r3, #1
 8002f74:	4a2e      	ldr	r2, [pc, #184]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002f76:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002f7a:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <UTIL_SEQ_Run+0x1a4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	4928      	ldr	r1, [pc, #160]	; (8003030 <UTIL_SEQ_Run+0x19c>)
 8002f90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter; counter--)
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	3b01      	subs	r3, #1
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e7      	bne.n	8002f70 <UTIL_SEQ_Run+0xdc>
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <UTIL_SEQ_Run+0x1a4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a24      	ldr	r2, [pc, #144]	; (8003040 <UTIL_SEQ_Run+0x1ac>)
 8002fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb4:	4798      	blx	r3
  while( (TaskSet & TaskMask & SuperMask) && (!(EvtSet & EvtWaited)) )
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <UTIL_SEQ_Run+0x1a8>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <UTIL_SEQ_Run+0x1a0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <UTIL_SEQ_Run+0x146>
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <UTIL_SEQ_Run+0x1b0>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <UTIL_SEQ_Run+0x1b4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f43f af6b 	beq.w	8002eb0 <UTIL_SEQ_Run+0x1c>
  }

  UTIL_SEQ_PreIdle( );
 8002fda:	f000 f90f 	bl	80031fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fde:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fe4:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8002fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe8:	b672      	cpsid	i
  if (!((TaskSet & TaskMask & SuperMask) || (EvtSet & EvtWaited)))
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <UTIL_SEQ_Run+0x1a8>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <UTIL_SEQ_Run+0x1a0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <UTIL_SEQ_Run+0x198>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d108      	bne.n	8003010 <UTIL_SEQ_Run+0x17c>
 8002ffe:	4b11      	ldr	r3, [pc, #68]	; (8003044 <UTIL_SEQ_Run+0x1b0>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <UTIL_SEQ_Run+0x1b4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <UTIL_SEQ_Run+0x17c>
  {
    UTIL_SEQ_Idle( );
 800300c:	f7fe fb65 	bl	80016da <UTIL_SEQ_Idle>
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  
  UTIL_SEQ_PostIdle( );
 800301a:	f000 f8f6 	bl	800320a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <UTIL_SEQ_Run+0x198>)
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	6013      	str	r3, [r2, #0]

  return;
 8003024:	bf00      	nop
}
 8003026:	3730      	adds	r7, #48	; 0x30
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000008 	.word	0x20000008
 8003030:	20000354 	.word	0x20000354
 8003034:	20000004 	.word	0x20000004
 8003038:	200002d0 	.word	0x200002d0
 800303c:	200002c4 	.word	0x200002c4
 8003040:	200002d4 	.word	0x200002d4
 8003044:	200002c8 	.word	0x200002c8
 8003048:	200002cc 	.word	0x200002cc

0800304c <UTIL_SEQ_RegTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_RegTask( UTIL_SEQ_bm_t task_id_bm , uint32_t flags, void (*task)( void ) )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003058:	f3ef 8310 	mrs	r3, PRIMASK
 800305c:	617b      	str	r3, [r7, #20]
  return(result);
 800305e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8003060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003062:	b672      	cpsid	i

  TaskCb[bit_position(task_id_bm)] = task;
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f8d7 	bl	8003218 <bit_position>
 800306a:	4601      	mov	r1, r0
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <UTIL_SEQ_RegTask+0x3c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800307e:	bf00      	nop
}
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200002d4 	.word	0x200002d4

0800308c <UTIL_SEQ_SetTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t task_id_bm , uint32_t task_prio )
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003096:	f3ef 8310 	mrs	r3, PRIMASK
 800309a:	60fb      	str	r3, [r7, #12]
  return(result);
 800309c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800309e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80030a0:	b672      	cpsid	i

  TaskSet |= task_id_bm;
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <UTIL_SEQ_SetTask+0x4c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	4a0b      	ldr	r2, [pc, #44]	; (80030d8 <UTIL_SEQ_SetTask+0x4c>)
 80030ac:	6013      	str	r3, [r2, #0]
  TaskPrio[task_prio].priority |= task_id_bm;
 80030ae:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <UTIL_SEQ_SetTask+0x50>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	4908      	ldr	r1, [pc, #32]	; (80030dc <UTIL_SEQ_SetTask+0x50>)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80030cc:	bf00      	nop
}
 80030ce:	371c      	adds	r7, #28
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	200002c4 	.word	0x200002c4
 80030dc:	20000354 	.word	0x20000354

080030e0 <UTIL_SEQ_PauseTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t task_id_bm )
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80030ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80030f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80030f2:	b672      	cpsid	i

  TaskMask &= (~task_id_bm);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <UTIL_SEQ_PauseTask+0x38>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4013      	ands	r3, r2
 80030fe:	4a06      	ldr	r2, [pc, #24]	; (8003118 <UTIL_SEQ_PauseTask+0x38>)
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800310c:	bf00      	nop
}
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000004 	.word	0x20000004

0800311c <UTIL_SEQ_ResumeTask>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t task_id_bm )
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003124:	f3ef 8310 	mrs	r3, PRIMASK
 8003128:	60fb      	str	r3, [r7, #12]
  return(result);
 800312a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800312c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800312e:	b672      	cpsid	i

  TaskMask |= task_id_bm;
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <UTIL_SEQ_ResumeTask+0x38>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4313      	orrs	r3, r2
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <UTIL_SEQ_ResumeTask+0x38>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8003146:	bf00      	nop
}
 8003148:	371c      	adds	r7, #28
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000004 	.word	0x20000004

08003158 <UTIL_SEQ_SetEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	60fb      	str	r3, [r7, #12]
  return(result);
 8003166:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8003168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800316a:	b672      	cpsid	i

  EvtSet |= evt_id_bm;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <UTIL_SEQ_SetEvt+0x38>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4313      	orrs	r3, r2
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <UTIL_SEQ_SetEvt+0x38>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8003182:	bf00      	nop
}
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	200002c8 	.word	0x200002c8

08003194 <UTIL_SEQ_WaitEvt>:

/**
 *  this function can be nested
 */
void UTIL_SEQ_WaitEvt( UTIL_SEQ_bm_t evt_id_bm )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_id_bm;

  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_id_bm = (1 << CurrentTaskIdx);
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <UTIL_SEQ_WaitEvt+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2201      	movs	r2, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	60fb      	str	r3, [r7, #12]

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
  EvtWaited = evt_id_bm;
 80031ae:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again fro the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while((EvtSet & EvtWaited) == 0)
 80031b4:	e005      	b.n	80031c2 <UTIL_SEQ_WaitEvt+0x2e>
  {
    UTIL_SEQ_EvtIdle(current_task_id_bm, EvtWaited);
 80031b6:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7fe fa93 	bl	80016e8 <UTIL_SEQ_EvtIdle>
  while((EvtSet & EvtWaited) == 0)
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <UTIL_SEQ_WaitEvt+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f2      	beq.n	80031b6 <UTIL_SEQ_WaitEvt+0x22>
  }
  EvtSet &= (~EvtWaited);
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <UTIL_SEQ_WaitEvt+0x64>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4013      	ands	r3, r2
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <UTIL_SEQ_WaitEvt+0x64>)
 80031de:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <UTIL_SEQ_WaitEvt+0x60>)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6013      	str	r3, [r2, #0]

  return;
 80031e6:	bf00      	nop
}
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200002d0 	.word	0x200002d0
 80031f4:	200002cc 	.word	0x200002cc
 80031f8:	200002c8 	.word	0x200002c8

080031fc <UTIL_SEQ_PreIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8003200:	bf00      	nop
}
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800320e:	bf00      	nop
}
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <bit_position>:

#if( __CORTEX_M == 0)
static const uint8_t clz_table_4bit[16] = { 4, 3, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 };	
static uint32_t bit_position(uint32_t value)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  uint32_t n = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]

  if ((value & 0xFFFF0000) == 0)  { n  = 16; value <<= 16;  }
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0c1b      	lsrs	r3, r3, #16
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <bit_position+0x20>
 800322e:	2310      	movs	r3, #16
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	607b      	str	r3, [r7, #4]
  if ((value & 0xFF000000) == 0)  { n +=  8; value <<=  8;  }
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <bit_position+0x36>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3308      	adds	r3, #8
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	607b      	str	r3, [r7, #4]
  if ((value & 0xF0000000) == 0)  { n +=  4; value <<=  4;  }
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <bit_position+0x4c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3304      	adds	r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	607b      	str	r3, [r7, #4]

  n += (uint32_t)clz_table_4bit[value >> (32-4)];
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0f1b      	lsrs	r3, r3, #28
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <bit_position+0x70>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  return (31-n);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f1c3 031f 	rsb	r3, r3, #31
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	0800dca0 	.word	0x0800dca0

0800328c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800329a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	cafecafe 	.word	0xcafecafe

080032c8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_AHB2_GRP1_EnableClock>:
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4313      	orrs	r3, r2
 8003300:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4013      	ands	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800332a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4313      	orrs	r3, r2
 8003332:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800334e:	b480      	push	{r7}
 8003350:	b085      	sub	sp, #20
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800335c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4313      	orrs	r3, r2
 8003364:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4013      	ands	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003372:	68fb      	ldr	r3, [r7, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800338e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033a4:	68fb      	ldr	r3, [r7, #12]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <LL_SYSCFG_EnableFastModePlus>:
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C1
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C3
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4904      	ldr	r1, [pc, #16]	; (80033d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40010000 	.word	0x40010000

080033d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
	OTP_ID0_t	*p_otp;

	/**
	 * Read HSE_Tuning from OTP
	 */
	p_otp = (OTP_ID0_t*) OTP_Read(0);
 80033de:	2000      	movs	r0, #0
 80033e0:	f009 faf6 	bl	800c9d0 <OTP_Read>
 80033e4:	6078      	str	r0, [r7, #4]
	if(p_otp)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_MspInit+0x1e>
	{
		LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	799b      	ldrb	r3, [r3, #6]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff4b 	bl	800328c <LL_RCC_HSE_SetCapacitorTuning>
	}

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80033f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80033fa:	f7ff ff8f 	bl	800331c <LL_AHB3_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_I2C_MspInit+0x8c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d12f      	bne.n	800348a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	2002      	movs	r0, #2
 800342c:	f7ff ff5d 	bl	80032ea <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003430:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003436:	2312      	movs	r3, #18
 8003438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800343a:	2301      	movs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343e:	2302      	movs	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003442:	2304      	movs	r3, #4
 8003444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4619      	mov	r1, r3
 800344c:	4812      	ldr	r0, [pc, #72]	; (8003498 <HAL_I2C_MspInit+0x90>)
 800344e:	f001 fb49 	bl	8004ae4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8003452:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003456:	f7ff ffad 	bl	80033b4 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800345a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800345e:	f7ff ffa9 	bl	80033b4 <LL_SYSCFG_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003462:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003466:	f7ff ff72 	bl	800334e <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	201e      	movs	r0, #30
 8003470:	f001 f807 	bl	8004482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003474:	201e      	movs	r0, #30
 8003476:	f001 f81e 	bl	80044b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	2100      	movs	r1, #0
 800347e:	201f      	movs	r0, #31
 8003480:	f000 ffff 	bl	8004482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003484:	201f      	movs	r0, #31
 8003486:	f001 f816 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800348a:	bf00      	nop
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40005400 	.word	0x40005400
 8003498:	48000400 	.word	0x48000400

0800349c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_RTC_MspInit+0x20>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_RTC_MspInit+0x16>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034ae:	f7ff ff0b 	bl	80032c8 <LL_RCC_EnableRTC>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40002800 	.word	0x40002800

080034c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d10b      	bne.n	80034ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034d2:	2001      	movs	r0, #1
 80034d4:	f7ff ff3b 	bl	800334e <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	201c      	movs	r0, #28
 80034de:	f000 ffd0 	bl	8004482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034e2:	201c      	movs	r0, #28
 80034e4:	f000 ffe7 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80034e8:	e033      	b.n	8003552 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <HAL_TIM_Base_MspInit+0x9c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12e      	bne.n	8003552 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80034f8:	f7ff ff42 	bl	8003380 <LL_APB2_GRP1_EnableClock>
    hdma_tim16_ch1.Instance = DMA1_Channel1;
 80034fc:	4b18      	ldr	r3, [pc, #96]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 80034fe:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_TIM_Base_MspInit+0xa4>)
 8003500:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1.Init.Request = DMA_REQUEST_TIM16_CH1;
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003504:	2221      	movs	r2, #33	; 0x21
 8003506:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800350a:	2210      	movs	r2, #16
 800350c:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800350e:	4b14      	ldr	r3, [pc, #80]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003510:	2200      	movs	r2, #0
 8003512:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003514:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800351c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003520:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003528:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1.Init.Mode = DMA_NORMAL;
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800352c:	2200      	movs	r2, #0
 800352e:	61da      	str	r2, [r3, #28]
    hdma_tim16_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim16_ch1) != HAL_OK)
 8003536:	480a      	ldr	r0, [pc, #40]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 8003538:	f001 f802 	bl	8004540 <HAL_DMA_Init>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_TIM_Base_MspInit+0x86>
      Error_Handler();
 8003542:	f7ff fc5f 	bl	8002e04 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a05      	ldr	r2, [pc, #20]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_TIM_Base_MspInit+0xa0>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40014400 	.word	0x40014400
 8003560:	20000584 	.word	0x20000584
 8003564:	40020008 	.word	0x40020008

08003568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_TIM_MspPostInit+0x54>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d113      	bne.n	80035b2 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358a:	2001      	movs	r0, #1
 800358c:	f7ff fead 	bl	80032ea <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration    
    PA6     ------> TIM16_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80035a0:	230e      	movs	r3, #14
 80035a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	4619      	mov	r1, r3
 80035aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ae:	f001 fa99 	bl	8004ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80035b2:	bf00      	nop
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40014400 	.word	0x40014400

080035c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_UART_MspInit+0x58>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d116      	bne.n	8003610 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035e6:	f7ff fecb 	bl	8003380 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ea:	2002      	movs	r0, #2
 80035ec:	f7ff fe7d 	bl	80032ea <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80035f0:	23c0      	movs	r3, #192	; 0xc0
 80035f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003600:	2307      	movs	r3, #7
 8003602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	4619      	mov	r1, r3
 800360a:	4804      	ldr	r0, [pc, #16]	; (800361c <HAL_UART_MspInit+0x5c>)
 800360c:	f001 fa6a 	bl	8004ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013800 	.word	0x40013800
 800361c:	48000400 	.word	0x48000400

08003620 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	60da      	str	r2, [r3, #12]
 8003636:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_PCD_MspInit+0x5c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d118      	bne.n	8003674 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2001      	movs	r0, #1
 8003644:	f7ff fe51 	bl	80032ea <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003648:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800364c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800365a:	230a      	movs	r3, #10
 800365c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	4619      	mov	r1, r3
 8003664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003668:	f001 fa3c 	bl	8004ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800366c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003670:	f7ff fe6d 	bl	800334e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003674:	bf00      	nop
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40006800 	.word	0x40006800

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003692:	e7fe      	b.n	8003692 <HardFault_Handler+0x4>

08003694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003698:	e7fe      	b.n	8003698 <MemManage_Handler+0x4>

0800369a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369e:	e7fe      	b.n	800369e <BusFault_Handler+0x4>

080036a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <UsageFault_Handler+0x4>

080036a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d4:	f000 fd50 	bl	8004178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Tick();
 80036d8:	f7fe ffaa 	bl	8002630 <Tick>
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
  /* USER CODE END SysTick_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <DMA1_Channel1_IRQHandler+0x10>)
 80036e6:	f001 f8ad 	bl	8004844 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000584 	.word	0x20000584

080036f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <TIM2_IRQHandler+0x10>)
 80036fa:	f005 f831 	bl	8008760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200005e8 	.word	0x200005e8

08003708 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <I2C1_EV_IRQHandler+0x10>)
 800370e:	f001 fce1 	bl	80050d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000488 	.word	0x20000488

0800371c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <I2C1_ER_IRQHandler+0x10>)
 8003722:	f001 fcf1 	bl	8005108 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000488 	.word	0x20000488

08003730 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <RTC_WKUP_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RTC wake-up interrupt through RXTI line 19.
 */
void RTC_WKUP_IRQHandler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8003742:	f7fe fb57 	bl	8001df4 <HW_TS_RTC_Wakeup_Handler>
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}

0800374a <IPCC_C1_RX_IRQHandler>:

/**
 * @brief This function handles IPCC RX occupied interupt
 */
void IPCC_C1_RX_IRQHandler()
{
 800374a:	b580      	push	{r7, lr}
 800374c:	af00      	add	r7, sp, #0
	HW_IPCC_Rx_Handler();
 800374e:	f009 fea1 	bl	800d494 <HW_IPCC_Rx_Handler>
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}

08003756 <IPCC_C1_TX_IRQHandler>:

/**
 * @brief This function handles IPCC RX occupied interupt
 */
void IPCC_C1_TX_IRQHandler()
{
 8003756:	b580      	push	{r7, lr}
 8003758:	af00      	add	r7, sp, #0
	HW_IPCC_Tx_Handler();
 800375a:	f009 fed3 	bl	800d504 <HW_IPCC_Tx_Handler>
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}

08003762 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
	return 1;
 8003766:	2301      	movs	r3, #1
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <_kill>:

int _kill(int pid, int sig)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800377c:	f00a f8c2 	bl	800d904 <__errno>
 8003780:	4602      	mov	r2, r0
 8003782:	2316      	movs	r3, #22
 8003784:	6013      	str	r3, [r2, #0]
	return -1;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <_exit>:

void _exit (int status)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800379a:	f04f 31ff 	mov.w	r1, #4294967295
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ffe7 	bl	8003772 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037a4:	e7fe      	b.n	80037a4 <_exit+0x12>
	...

080037a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x50>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <_sbrk+0x16>
		heap_end = &end;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <_sbrk+0x50>)
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <_sbrk+0x54>)
 80037bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <_sbrk+0x50>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <_sbrk+0x50>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	466a      	mov	r2, sp
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d907      	bls.n	80037e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80037d2:	f00a f897 	bl	800d904 <__errno>
 80037d6:	4602      	mov	r2, r0
 80037d8:	230c      	movs	r3, #12
 80037da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295
 80037e0:	e006      	b.n	80037f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <_sbrk+0x50>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <_sbrk+0x50>)
 80037ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000364 	.word	0x20000364
 80037fc:	200008e8 	.word	0x200008e8

08003800 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003804:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <SystemInit+0xa0>)
 8003806:	2200      	movs	r2, #0
 8003808:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <SystemInit+0xa0>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <SystemInit+0xa0>)
 8003812:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003816:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800382a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003832:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <SystemInit+0xa4>)
 8003840:	4013      	ands	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003850:	f023 0305 	bic.w	r3, r3, #5
 8003854:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	4a0d      	ldr	r2, [pc, #52]	; (80038a8 <SystemInit+0xa8>)
 8003872:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003878:	4a0b      	ldr	r2, [pc, #44]	; (80038a8 <SystemInit+0xa8>)
 800387a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800387c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00
 80038a4:	faf6fefb 	.word	0xfaf6fefb
 80038a8:	22041000 	.word	0x22041000

080038ac <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	4a47      	ldr	r2, [pc, #284]	; (80039dc <SystemCoreClockUpdate+0x130>)
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d867      	bhi.n	80039a4 <SystemCoreClockUpdate+0xf8>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <SystemCoreClockUpdate+0x30>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003911 	.word	0x08003911
 80038e0:	080039a5 	.word	0x080039a5
 80038e4:	080039a5 	.word	0x080039a5
 80038e8:	080039a5 	.word	0x080039a5
 80038ec:	08003919 	.word	0x08003919
 80038f0:	080039a5 	.word	0x080039a5
 80038f4:	080039a5 	.word	0x080039a5
 80038f8:	080039a5 	.word	0x080039a5
 80038fc:	08003921 	.word	0x08003921
 8003900:	080039a5 	.word	0x080039a5
 8003904:	080039a5 	.word	0x080039a5
 8003908:	080039a5 	.word	0x080039a5
 800390c:	08003929 	.word	0x08003929
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8003910:	4a33      	ldr	r2, [pc, #204]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]
      break;
 8003916:	e049      	b.n	80039ac <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 800391a:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <SystemCoreClockUpdate+0x138>)
 800391c:	601a      	str	r2, [r3, #0]
      break;
 800391e:	e045      	b.n	80039ac <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003920:	4b2f      	ldr	r3, [pc, #188]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 8003922:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <SystemCoreClockUpdate+0x13c>)
 8003924:	601a      	str	r2, [r3, #0]
      break;
 8003926:	e041      	b.n	80039ac <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8003934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	091b      	lsrs	r3, r3, #4
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	3301      	adds	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d105      	bne.n	8003956 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800394a:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <SystemCoreClockUpdate+0x138>)
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e00d      	b.n	8003972 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d105      	bne.n	8003968 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <SystemCoreClockUpdate+0x13c>)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	fbb2 f3f3 	udiv	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e004      	b.n	8003972 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	fb02 f303 	mul.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0f5b      	lsrs	r3, r3, #29
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	3301      	adds	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 80039a0:	6013      	str	r3, [r2, #0]
      break;
 80039a2:	e003      	b.n	80039ac <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	6013      	str	r3, [r2, #0]
      break;
 80039aa:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <SystemCoreClockUpdate+0x140>)
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <SystemCoreClockUpdate+0x134>)
 80039cc:	6013      	str	r3, [r2, #0]

}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	0800dd10 	.word	0x0800dd10
 80039e0:	2000000c 	.word	0x2000000c
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	01e84800 	.word	0x01e84800
 80039ec:	0800dcb0 	.word	0x0800dcb0

080039f0 <BLEDevice_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t BLEDevice_Event_Handler(void *Event)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	hci_event_pckt 							*event_pckt;
	evt_blue_aci 							*blue_evt;
	aci_gatt_attribute_modified_event_rp0	*attribute_modified;
	TEMPLATE_STM_App_Notification_evt_t 	Notification;

	return_value = SVCCTL_EvtNotAck;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3301      	adds	r3, #1
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28

	switch(event_pckt->evt)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2bff      	cmp	r3, #255	; 0xff
 8003a0a:	d000      	beq.n	8003a0e <BLEDevice_Event_Handler+0x1e>
		}
	}
	break; /* HCI_EVT_VENDOR_SPECIFIC */

	default:
		break;
 8003a0c:	e027      	b.n	8003a5e <BLEDevice_Event_Handler+0x6e>
		blue_evt = (evt_blue_aci*)event_pckt->data;
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	3302      	adds	r3, #2
 8003a12:	627b      	str	r3, [r7, #36]	; 0x24
		switch(blue_evt->ecode)
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f640 4301 	movw	r3, #3073	; 0xc01
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d000      	beq.n	8003a26 <BLEDevice_Event_Handler+0x36>
			break;
 8003a24:	e01a      	b.n	8003a5c <BLEDevice_Event_Handler+0x6c>
			attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	3302      	adds	r3, #2
 8003a2a:	623b      	str	r3, [r7, #32]
			if(attribute_modified->Attr_Handle == (aBLEDeviceContext.ServoSvcHdle + 2))
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	885b      	ldrh	r3, [r3, #2]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <BLEDevice_Event_Handler+0x7c>)
 8003a36:	8a1b      	ldrh	r3, [r3, #16]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10d      	bne.n	8003a5a <BLEDevice_Event_Handler+0x6a>
				return_value = SVCCTL_EvtAckFlowEnable;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				value = (uint16_t)attribute_modified->Attr_Data[0] + 256 * (uint16_t)attribute_modified->Attr_Data[0];
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	7a1b      	ldrb	r3, [r3, #8]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	0212      	lsls	r2, r2, #8
 8003a4e:	4413      	add	r3, r2
 8003a50:	83fb      	strh	r3, [r7, #30]
				SetServoMotorPosition(value);
 8003a52:	8bfb      	ldrh	r3, [r7, #30]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fe49 	bl	80026ec <SetServoMotorPosition>
		break;
 8003a5a:	bf00      	nop
	break; /* HCI_EVT_VENDOR_SPECIFIC */
 8003a5c:	bf00      	nop
	}

	return(return_value);
 8003a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end SVCCTL_EvtAckStatus_t */
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000012c 	.word	0x2000012c

08003a70 <SVCCTL_BLEDeviceInitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_BLEDeviceInitCustomSvc(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af06      	add	r7, sp, #24
	Char_UUID_t  uuid16;

	/**
	 *	Register the event handler to the BLE controller
	 */
	SVCCTL_RegisterSvcHandler(BLEDevice_Event_Handler);
 8003a76:	48e2      	ldr	r0, [pc, #904]	; (8003e00 <SVCCTL_BLEDeviceInitCustomSvc+0x390>)
 8003a78:	f008 faa2 	bl	800bfc0 <SVCCTL_RegisterSvcHandler>
	 *                                1 for client char configuration descriptor +
	 *
	 */

	// THP Sensing service
	COPY_THPSENSOR_SERVICE_UUID(uuid16.Char_UUID_128);
 8003a7c:	238c      	movs	r3, #140	; 0x8c
 8003a7e:	703b      	strb	r3, [r7, #0]
 8003a80:	2399      	movs	r3, #153	; 0x99
 8003a82:	707b      	strb	r3, [r7, #1]
 8003a84:	230e      	movs	r3, #14
 8003a86:	70bb      	strb	r3, [r7, #2]
 8003a88:	23cc      	movs	r3, #204	; 0xcc
 8003a8a:	70fb      	strb	r3, [r7, #3]
 8003a8c:	2350      	movs	r3, #80	; 0x50
 8003a8e:	713b      	strb	r3, [r7, #4]
 8003a90:	2365      	movs	r3, #101	; 0x65
 8003a92:	717b      	strb	r3, [r7, #5]
 8003a94:	234a      	movs	r3, #74	; 0x4a
 8003a96:	71bb      	strb	r3, [r7, #6]
 8003a98:	23b3      	movs	r3, #179	; 0xb3
 8003a9a:	71fb      	strb	r3, [r7, #7]
 8003a9c:	23b2      	movs	r3, #178	; 0xb2
 8003a9e:	723b      	strb	r3, [r7, #8]
 8003aa0:	234c      	movs	r3, #76	; 0x4c
 8003aa2:	727b      	strb	r3, [r7, #9]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	72bb      	strb	r3, [r7, #10]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	72fb      	strb	r3, [r7, #11]
 8003aac:	2300      	movs	r3, #0
 8003aae:	733b      	strb	r3, [r7, #12]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	737b      	strb	r3, [r7, #13]
 8003ab4:	23b7      	movs	r3, #183	; 0xb7
 8003ab6:	73bb      	strb	r3, [r7, #14]
 8003ab8:	23b2      	movs	r3, #178	; 0xb2
 8003aba:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128,
 8003abc:	4639      	mov	r1, r7
 8003abe:	4bd1      	ldr	r3, [pc, #836]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f007 fda2 	bl	800b610 <aci_gatt_add_service>
			PRIMARY_SERVICE,
			10, /*Max_Attribute_Records*/
			&(aBLEDeviceContext.THPSensorSvcHdle));

	//  Add Characteristics
	COPY_HUMIDITY_CHAR_UUID(uuid16.Char_UUID_128);
 8003acc:	23fb      	movs	r3, #251	; 0xfb
 8003ace:	703b      	strb	r3, [r7, #0]
 8003ad0:	2334      	movs	r3, #52	; 0x34
 8003ad2:	707b      	strb	r3, [r7, #1]
 8003ad4:	239b      	movs	r3, #155	; 0x9b
 8003ad6:	70bb      	strb	r3, [r7, #2]
 8003ad8:	235f      	movs	r3, #95	; 0x5f
 8003ada:	70fb      	strb	r3, [r7, #3]
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	713b      	strb	r3, [r7, #4]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	717b      	strb	r3, [r7, #5]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	71bb      	strb	r3, [r7, #6]
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	2300      	movs	r3, #0
 8003aee:	723b      	strb	r3, [r7, #8]
 8003af0:	2310      	movs	r3, #16
 8003af2:	727b      	strb	r3, [r7, #9]
 8003af4:	2300      	movs	r3, #0
 8003af6:	72bb      	strb	r3, [r7, #10]
 8003af8:	2300      	movs	r3, #0
 8003afa:	72fb      	strb	r3, [r7, #11]
 8003afc:	236f      	movs	r3, #111	; 0x6f
 8003afe:	733b      	strb	r3, [r7, #12]
 8003b00:	232a      	movs	r3, #42	; 0x2a
 8003b02:	737b      	strb	r3, [r7, #13]
 8003b04:	2300      	movs	r3, #0
 8003b06:	73bb      	strb	r3, [r7, #14]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.THPSensorSvcHdle,
 8003b0c:	4bbd      	ldr	r3, [pc, #756]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003b0e:	8818      	ldrh	r0, [r3, #0]
 8003b10:	463a      	mov	r2, r7
 8003b12:	4bbd      	ldr	r3, [pc, #756]	; (8003e08 <SVCCTL_BLEDeviceInitCustomSvc+0x398>)
 8003b14:	9305      	str	r3, [sp, #20]
 8003b16:	2301      	movs	r3, #1
 8003b18:	9304      	str	r3, [sp, #16]
 8003b1a:	230a      	movs	r3, #10
 8003b1c:	9303      	str	r3, [sp, #12]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2312      	movs	r3, #18
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	f007 fe1e 	bl	800b76e <aci_gatt_add_char>
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.HumidityCharHdle));
	COPY_PRESSURE_CHAR_UUID(uuid16.Char_UUID_128);
 8003b32:	23fb      	movs	r3, #251	; 0xfb
 8003b34:	703b      	strb	r3, [r7, #0]
 8003b36:	2334      	movs	r3, #52	; 0x34
 8003b38:	707b      	strb	r3, [r7, #1]
 8003b3a:	239b      	movs	r3, #155	; 0x9b
 8003b3c:	70bb      	strb	r3, [r7, #2]
 8003b3e:	235f      	movs	r3, #95	; 0x5f
 8003b40:	70fb      	strb	r3, [r7, #3]
 8003b42:	2380      	movs	r3, #128	; 0x80
 8003b44:	713b      	strb	r3, [r7, #4]
 8003b46:	2300      	movs	r3, #0
 8003b48:	717b      	strb	r3, [r7, #5]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	71bb      	strb	r3, [r7, #6]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	71fb      	strb	r3, [r7, #7]
 8003b52:	2300      	movs	r3, #0
 8003b54:	723b      	strb	r3, [r7, #8]
 8003b56:	2310      	movs	r3, #16
 8003b58:	727b      	strb	r3, [r7, #9]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	72bb      	strb	r3, [r7, #10]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	72fb      	strb	r3, [r7, #11]
 8003b62:	236d      	movs	r3, #109	; 0x6d
 8003b64:	733b      	strb	r3, [r7, #12]
 8003b66:	232a      	movs	r3, #42	; 0x2a
 8003b68:	737b      	strb	r3, [r7, #13]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73bb      	strb	r3, [r7, #14]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.THPSensorSvcHdle,
 8003b72:	4ba4      	ldr	r3, [pc, #656]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003b74:	8818      	ldrh	r0, [r3, #0]
 8003b76:	463a      	mov	r2, r7
 8003b78:	4ba4      	ldr	r3, [pc, #656]	; (8003e0c <SVCCTL_BLEDeviceInitCustomSvc+0x39c>)
 8003b7a:	9305      	str	r3, [sp, #20]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	9304      	str	r3, [sp, #16]
 8003b80:	230a      	movs	r3, #10
 8003b82:	9303      	str	r3, [sp, #12]
 8003b84:	2301      	movs	r3, #1
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2312      	movs	r3, #18
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2304      	movs	r3, #4
 8003b92:	2102      	movs	r1, #2
 8003b94:	f007 fdeb 	bl	800b76e <aci_gatt_add_char>
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.PressureCharHdle));
	COPY_TEMPERATURE_CHAR_UUID(uuid16.Char_UUID_128);
 8003b98:	23fb      	movs	r3, #251	; 0xfb
 8003b9a:	703b      	strb	r3, [r7, #0]
 8003b9c:	2334      	movs	r3, #52	; 0x34
 8003b9e:	707b      	strb	r3, [r7, #1]
 8003ba0:	239b      	movs	r3, #155	; 0x9b
 8003ba2:	70bb      	strb	r3, [r7, #2]
 8003ba4:	235f      	movs	r3, #95	; 0x5f
 8003ba6:	70fb      	strb	r3, [r7, #3]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	713b      	strb	r3, [r7, #4]
 8003bac:	2300      	movs	r3, #0
 8003bae:	717b      	strb	r3, [r7, #5]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	71bb      	strb	r3, [r7, #6]
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	71fb      	strb	r3, [r7, #7]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	723b      	strb	r3, [r7, #8]
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	727b      	strb	r3, [r7, #9]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	72bb      	strb	r3, [r7, #10]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	72fb      	strb	r3, [r7, #11]
 8003bc8:	236e      	movs	r3, #110	; 0x6e
 8003bca:	733b      	strb	r3, [r7, #12]
 8003bcc:	232a      	movs	r3, #42	; 0x2a
 8003bce:	737b      	strb	r3, [r7, #13]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73bb      	strb	r3, [r7, #14]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.THPSensorSvcHdle,
 8003bd8:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003bda:	8818      	ldrh	r0, [r3, #0]
 8003bdc:	463a      	mov	r2, r7
 8003bde:	4b8c      	ldr	r3, [pc, #560]	; (8003e10 <SVCCTL_BLEDeviceInitCustomSvc+0x3a0>)
 8003be0:	9305      	str	r3, [sp, #20]
 8003be2:	2301      	movs	r3, #1
 8003be4:	9304      	str	r3, [sp, #16]
 8003be6:	230a      	movs	r3, #10
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	2301      	movs	r3, #1
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2312      	movs	r3, #18
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	f007 fdb8 	bl	800b76e <aci_gatt_add_char>
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.TemperatureCharHdle));

	// LED service
	COPY_LED_SERVICE_UUID(uuid16.Char_UUID_128);
 8003bfe:	238c      	movs	r3, #140	; 0x8c
 8003c00:	703b      	strb	r3, [r7, #0]
 8003c02:	2399      	movs	r3, #153	; 0x99
 8003c04:	707b      	strb	r3, [r7, #1]
 8003c06:	230e      	movs	r3, #14
 8003c08:	70bb      	strb	r3, [r7, #2]
 8003c0a:	23cc      	movs	r3, #204	; 0xcc
 8003c0c:	70fb      	strb	r3, [r7, #3]
 8003c0e:	2350      	movs	r3, #80	; 0x50
 8003c10:	713b      	strb	r3, [r7, #4]
 8003c12:	2365      	movs	r3, #101	; 0x65
 8003c14:	717b      	strb	r3, [r7, #5]
 8003c16:	234a      	movs	r3, #74	; 0x4a
 8003c18:	71bb      	strb	r3, [r7, #6]
 8003c1a:	23b3      	movs	r3, #179	; 0xb3
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	23b2      	movs	r3, #178	; 0xb2
 8003c20:	723b      	strb	r3, [r7, #8]
 8003c22:	234c      	movs	r3, #76	; 0x4c
 8003c24:	727b      	strb	r3, [r7, #9]
 8003c26:	2302      	movs	r3, #2
 8003c28:	72bb      	strb	r3, [r7, #10]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	72fb      	strb	r3, [r7, #11]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	733b      	strb	r3, [r7, #12]
 8003c32:	2300      	movs	r3, #0
 8003c34:	737b      	strb	r3, [r7, #13]
 8003c36:	23b7      	movs	r3, #183	; 0xb7
 8003c38:	73bb      	strb	r3, [r7, #14]
 8003c3a:	23b2      	movs	r3, #178	; 0xb2
 8003c3c:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128,
 8003c3e:	4639      	mov	r1, r7
 8003c40:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <SVCCTL_BLEDeviceInitCustomSvc+0x3a4>)
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	230a      	movs	r3, #10
 8003c46:	2201      	movs	r2, #1
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f007 fce1 	bl	800b610 <aci_gatt_add_service>
			PRIMARY_SERVICE,
			10, /*Max_Attribute_Records*/
			&(aBLEDeviceContext.LedSvcHdle));

	//  Add Characteristics
	COPY_DIGITAL_CHAR_UUID(uuid16.Char_UUID_128);
 8003c4e:	23fb      	movs	r3, #251	; 0xfb
 8003c50:	703b      	strb	r3, [r7, #0]
 8003c52:	2334      	movs	r3, #52	; 0x34
 8003c54:	707b      	strb	r3, [r7, #1]
 8003c56:	239b      	movs	r3, #155	; 0x9b
 8003c58:	70bb      	strb	r3, [r7, #2]
 8003c5a:	235f      	movs	r3, #95	; 0x5f
 8003c5c:	70fb      	strb	r3, [r7, #3]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	713b      	strb	r3, [r7, #4]
 8003c62:	2300      	movs	r3, #0
 8003c64:	717b      	strb	r3, [r7, #5]
 8003c66:	2300      	movs	r3, #0
 8003c68:	71bb      	strb	r3, [r7, #6]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	723b      	strb	r3, [r7, #8]
 8003c72:	2310      	movs	r3, #16
 8003c74:	727b      	strb	r3, [r7, #9]
 8003c76:	2300      	movs	r3, #0
 8003c78:	72bb      	strb	r3, [r7, #10]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	72fb      	strb	r3, [r7, #11]
 8003c7e:	2356      	movs	r3, #86	; 0x56
 8003c80:	733b      	strb	r3, [r7, #12]
 8003c82:	232a      	movs	r3, #42	; 0x2a
 8003c84:	737b      	strb	r3, [r7, #13]
 8003c86:	2300      	movs	r3, #0
 8003c88:	73bb      	strb	r3, [r7, #14]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.LedSvcHdle,
 8003c8e:	4b5d      	ldr	r3, [pc, #372]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003c90:	8918      	ldrh	r0, [r3, #8]
 8003c92:	463a      	mov	r2, r7
 8003c94:	4b60      	ldr	r3, [pc, #384]	; (8003e18 <SVCCTL_BLEDeviceInitCustomSvc+0x3a8>)
 8003c96:	9305      	str	r3, [sp, #20]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	9304      	str	r3, [sp, #16]
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	9303      	str	r3, [sp, #12]
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	9302      	str	r3, [sp, #8]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	230a      	movs	r3, #10
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2304      	movs	r3, #4
 8003cae:	2102      	movs	r1, #2
 8003cb0:	f007 fd5d 	bl	800b76e <aci_gatt_add_char>
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.LedDigitalCharHdle));

	// Relays service
	COPY_RELAY_SERVICE_UUID(uuid16.Char_UUID_128);
 8003cb4:	238c      	movs	r3, #140	; 0x8c
 8003cb6:	703b      	strb	r3, [r7, #0]
 8003cb8:	2399      	movs	r3, #153	; 0x99
 8003cba:	707b      	strb	r3, [r7, #1]
 8003cbc:	230e      	movs	r3, #14
 8003cbe:	70bb      	strb	r3, [r7, #2]
 8003cc0:	23cc      	movs	r3, #204	; 0xcc
 8003cc2:	70fb      	strb	r3, [r7, #3]
 8003cc4:	2350      	movs	r3, #80	; 0x50
 8003cc6:	713b      	strb	r3, [r7, #4]
 8003cc8:	2365      	movs	r3, #101	; 0x65
 8003cca:	717b      	strb	r3, [r7, #5]
 8003ccc:	234a      	movs	r3, #74	; 0x4a
 8003cce:	71bb      	strb	r3, [r7, #6]
 8003cd0:	23b3      	movs	r3, #179	; 0xb3
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	23b2      	movs	r3, #178	; 0xb2
 8003cd6:	723b      	strb	r3, [r7, #8]
 8003cd8:	234c      	movs	r3, #76	; 0x4c
 8003cda:	727b      	strb	r3, [r7, #9]
 8003cdc:	2303      	movs	r3, #3
 8003cde:	72bb      	strb	r3, [r7, #10]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	72fb      	strb	r3, [r7, #11]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	733b      	strb	r3, [r7, #12]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	737b      	strb	r3, [r7, #13]
 8003cec:	23b7      	movs	r3, #183	; 0xb7
 8003cee:	73bb      	strb	r3, [r7, #14]
 8003cf0:	23b2      	movs	r3, #178	; 0xb2
 8003cf2:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128,
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <SVCCTL_BLEDeviceInitCustomSvc+0x3ac>)
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	230a      	movs	r3, #10
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2002      	movs	r0, #2
 8003d00:	f007 fc86 	bl	800b610 <aci_gatt_add_service>
			PRIMARY_SERVICE,
			10, /*Max_Attribute_Records*/
			&(aBLEDeviceContext.RelaySvcHdle));

	//  Add Characteristics
	COPY_DIGITAL_CHAR_UUID(uuid16.Char_UUID_128);
 8003d04:	23fb      	movs	r3, #251	; 0xfb
 8003d06:	703b      	strb	r3, [r7, #0]
 8003d08:	2334      	movs	r3, #52	; 0x34
 8003d0a:	707b      	strb	r3, [r7, #1]
 8003d0c:	239b      	movs	r3, #155	; 0x9b
 8003d0e:	70bb      	strb	r3, [r7, #2]
 8003d10:	235f      	movs	r3, #95	; 0x5f
 8003d12:	70fb      	strb	r3, [r7, #3]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	713b      	strb	r3, [r7, #4]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	717b      	strb	r3, [r7, #5]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	71bb      	strb	r3, [r7, #6]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	71fb      	strb	r3, [r7, #7]
 8003d24:	2300      	movs	r3, #0
 8003d26:	723b      	strb	r3, [r7, #8]
 8003d28:	2310      	movs	r3, #16
 8003d2a:	727b      	strb	r3, [r7, #9]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	72bb      	strb	r3, [r7, #10]
 8003d30:	2300      	movs	r3, #0
 8003d32:	72fb      	strb	r3, [r7, #11]
 8003d34:	2356      	movs	r3, #86	; 0x56
 8003d36:	733b      	strb	r3, [r7, #12]
 8003d38:	232a      	movs	r3, #42	; 0x2a
 8003d3a:	737b      	strb	r3, [r7, #13]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73bb      	strb	r3, [r7, #14]
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.RelaySvcHdle,
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003d46:	8998      	ldrh	r0, [r3, #12]
 8003d48:	463a      	mov	r2, r7
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <SVCCTL_BLEDeviceInitCustomSvc+0x3b0>)
 8003d4c:	9305      	str	r3, [sp, #20]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	9304      	str	r3, [sp, #16]
 8003d52:	230a      	movs	r3, #10
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	2301      	movs	r3, #1
 8003d58:	9302      	str	r3, [sp, #8]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	230a      	movs	r3, #10
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2302      	movs	r3, #2
 8003d64:	2102      	movs	r1, #2
 8003d66:	f007 fd02 	bl	800b76e <aci_gatt_add_char>
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.RelayDigitalCharHdle));

	// ServoMotor service
	COPY_SERVO_SERVICE_UUID(uuid16.Char_UUID_128);
 8003d6a:	238c      	movs	r3, #140	; 0x8c
 8003d6c:	703b      	strb	r3, [r7, #0]
 8003d6e:	2399      	movs	r3, #153	; 0x99
 8003d70:	707b      	strb	r3, [r7, #1]
 8003d72:	230e      	movs	r3, #14
 8003d74:	70bb      	strb	r3, [r7, #2]
 8003d76:	23cc      	movs	r3, #204	; 0xcc
 8003d78:	70fb      	strb	r3, [r7, #3]
 8003d7a:	2350      	movs	r3, #80	; 0x50
 8003d7c:	713b      	strb	r3, [r7, #4]
 8003d7e:	2365      	movs	r3, #101	; 0x65
 8003d80:	717b      	strb	r3, [r7, #5]
 8003d82:	234a      	movs	r3, #74	; 0x4a
 8003d84:	71bb      	strb	r3, [r7, #6]
 8003d86:	23b3      	movs	r3, #179	; 0xb3
 8003d88:	71fb      	strb	r3, [r7, #7]
 8003d8a:	23b2      	movs	r3, #178	; 0xb2
 8003d8c:	723b      	strb	r3, [r7, #8]
 8003d8e:	234c      	movs	r3, #76	; 0x4c
 8003d90:	727b      	strb	r3, [r7, #9]
 8003d92:	2304      	movs	r3, #4
 8003d94:	72bb      	strb	r3, [r7, #10]
 8003d96:	2300      	movs	r3, #0
 8003d98:	72fb      	strb	r3, [r7, #11]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	733b      	strb	r3, [r7, #12]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	737b      	strb	r3, [r7, #13]
 8003da2:	23b7      	movs	r3, #183	; 0xb7
 8003da4:	73bb      	strb	r3, [r7, #14]
 8003da6:	23b2      	movs	r3, #178	; 0xb2
 8003da8:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128,
 8003daa:	4639      	mov	r1, r7
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <SVCCTL_BLEDeviceInitCustomSvc+0x3b4>)
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	230a      	movs	r3, #10
 8003db2:	2201      	movs	r2, #1
 8003db4:	2002      	movs	r0, #2
 8003db6:	f007 fc2b 	bl	800b610 <aci_gatt_add_service>
			PRIMARY_SERVICE,
			10, /*Max_Attribute_Records*/
			&(aBLEDeviceContext.ServoSvcHdle));

	//  Add Characteristics
	COPY_ANALOG_CHAR_UUID(uuid16.Char_UUID_128);
 8003dba:	23fb      	movs	r3, #251	; 0xfb
 8003dbc:	703b      	strb	r3, [r7, #0]
 8003dbe:	2334      	movs	r3, #52	; 0x34
 8003dc0:	707b      	strb	r3, [r7, #1]
 8003dc2:	239b      	movs	r3, #155	; 0x9b
 8003dc4:	70bb      	strb	r3, [r7, #2]
 8003dc6:	235f      	movs	r3, #95	; 0x5f
 8003dc8:	70fb      	strb	r3, [r7, #3]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	713b      	strb	r3, [r7, #4]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	717b      	strb	r3, [r7, #5]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	71bb      	strb	r3, [r7, #6]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	71fb      	strb	r3, [r7, #7]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	723b      	strb	r3, [r7, #8]
 8003dde:	2310      	movs	r3, #16
 8003de0:	727b      	strb	r3, [r7, #9]
 8003de2:	2300      	movs	r3, #0
 8003de4:	72bb      	strb	r3, [r7, #10]
 8003de6:	2300      	movs	r3, #0
 8003de8:	72fb      	strb	r3, [r7, #11]
 8003dea:	2358      	movs	r3, #88	; 0x58
 8003dec:	733b      	strb	r3, [r7, #12]
 8003dee:	232a      	movs	r3, #42	; 0x2a
 8003df0:	737b      	strb	r3, [r7, #13]
 8003df2:	2300      	movs	r3, #0
 8003df4:	73bb      	strb	r3, [r7, #14]
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aBLEDeviceContext.ServoSvcHdle,
 8003dfa:	4b02      	ldr	r3, [pc, #8]	; (8003e04 <SVCCTL_BLEDeviceInitCustomSvc+0x394>)
 8003dfc:	8a18      	ldrh	r0, [r3, #16]
 8003dfe:	e013      	b.n	8003e28 <SVCCTL_BLEDeviceInitCustomSvc+0x3b8>
 8003e00:	080039f1 	.word	0x080039f1
 8003e04:	2000012c 	.word	0x2000012c
 8003e08:	2000012e 	.word	0x2000012e
 8003e0c:	20000130 	.word	0x20000130
 8003e10:	20000132 	.word	0x20000132
 8003e14:	20000134 	.word	0x20000134
 8003e18:	20000136 	.word	0x20000136
 8003e1c:	20000138 	.word	0x20000138
 8003e20:	2000013a 	.word	0x2000013a
 8003e24:	2000013c 	.word	0x2000013c
 8003e28:	463a      	mov	r2, r7
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <SVCCTL_BLEDeviceInitCustomSvc+0x3e4>)
 8003e2c:	9305      	str	r3, [sp, #20]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	9304      	str	r3, [sp, #16]
 8003e32:	230a      	movs	r3, #10
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	2301      	movs	r3, #1
 8003e38:	9302      	str	r3, [sp, #8]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	230a      	movs	r3, #10
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2302      	movs	r3, #2
 8003e44:	2102      	movs	r1, #2
 8003e46:	f007 fc92 	bl	800b76e <aci_gatt_add_char>
			ATTR_PERMISSION_NONE,
			GATT_NOTIFY_ATTRIBUTE_WRITE, /* gattEvtMask */
			10, /* encryKeySize */
			1, /* isVariable */
			&(aBLEDeviceContext.ServoAnalogCharHdle));
	return;
 8003e4a:	bf00      	nop
}
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	2000013e 	.word	0x2000013e

08003e58 <BLEDevice_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus BLEDevice_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	80fb      	strh	r3, [r7, #6]
	tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8003e64:	2342      	movs	r3, #66	; 0x42
 8003e66:	73fb      	strb	r3, [r7, #15]
	switch(UUID)
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d011      	beq.n	8003e92 <BLEDevice_STM_App_Update_Char+0x3a>
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d01c      	beq.n	8003eac <BLEDevice_STM_App_Update_Char+0x54>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d000      	beq.n	8003e78 <BLEDevice_STM_App_Update_Char+0x20>
				2, /* charValueLen */
				(uint8_t *)  pPayload);
		break;

	default:
		break;
 8003e76:	e026      	b.n	8003ec6 <BLEDevice_STM_App_Update_Char+0x6e>
		result = aci_gatt_update_char_value(aBLEDeviceContext.THPSensorSvcHdle,
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003e7a:	8818      	ldrh	r0, [r3, #0]
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003e7e:	8859      	ldrh	r1, [r3, #2]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	f007 fd5b 	bl	800b942 <aci_gatt_update_char_value>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
		break;
 8003e90:	e019      	b.n	8003ec6 <BLEDevice_STM_App_Update_Char+0x6e>
		result = aci_gatt_update_char_value(aBLEDeviceContext.THPSensorSvcHdle,
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003e94:	8818      	ldrh	r0, [r3, #0]
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003e98:	8899      	ldrh	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f007 fd4e 	bl	800b942 <aci_gatt_update_char_value>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	73fb      	strb	r3, [r7, #15]
		break;
 8003eaa:	e00c      	b.n	8003ec6 <BLEDevice_STM_App_Update_Char+0x6e>
		result = aci_gatt_update_char_value(aBLEDeviceContext.THPSensorSvcHdle,
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003eae:	8818      	ldrh	r0, [r3, #0]
 8003eb0:	4b07      	ldr	r3, [pc, #28]	; (8003ed0 <BLEDevice_STM_App_Update_Char+0x78>)
 8003eb2:	88d9      	ldrh	r1, [r3, #6]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2302      	movs	r3, #2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f007 fd41 	bl	800b942 <aci_gatt_update_char_value>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]
		break;
 8003ec4:	bf00      	nop
	}

	return result;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}/* end TEMPLATE_STM_Init() */
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	2000012c 	.word	0x2000012c

08003ed4 <_ZN5TimerC1Ev>:

class Timer {
private:
    uint32_t                    mSysTimer;
    array<uint32_t, MAX_TIMERS> TimersTable;
    Timer(void) {mSysTimer = 0;};
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <_ZN5TimerD1Ev>:
    Timer(const Timer&);
    ~Timer(void){};
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <__tcf_0>:
#include "timer.h"

Timer& Timer::GetInstance(void)
{
    static Timer  instance;
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__tcf_0+0xc>)
 8003f0e:	f7ff ffef 	bl	8003ef0 <_ZN5TimerD1Ev>
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000368 	.word	0x20000368

08003f18 <_ZN5Timer11GetInstanceEv>:
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
    static Timer  instance;
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <_ZN5Timer11GetInstanceEv+0x28>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <_ZN5Timer11GetInstanceEv+0x22>
 8003f28:	4806      	ldr	r0, [pc, #24]	; (8003f44 <_ZN5Timer11GetInstanceEv+0x2c>)
 8003f2a:	f7ff ffd3 	bl	8003ed4 <_ZN5TimerC1Ev>
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <_ZN5Timer11GetInstanceEv+0x28>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	4804      	ldr	r0, [pc, #16]	; (8003f48 <_ZN5Timer11GetInstanceEv+0x30>)
 8003f36:	f009 fcde 	bl	800d8f6 <atexit>
    return instance;
 8003f3a:	4b02      	ldr	r3, [pc, #8]	; (8003f44 <_ZN5Timer11GetInstanceEv+0x2c>)
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000370 	.word	0x20000370
 8003f44:	20000368 	.word	0x20000368
 8003f48:	08003f09 	.word	0x08003f09

08003f4c <_ZN5Timer4TickEv>:

void Timer::Tick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    mSysTimer++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	601a      	str	r2, [r3, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <_ZN5Timer8ArmTimerEm>:

void Timer::ArmTimer(uint32_t numTimer)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
    TimersTable.at(numTimer) = mSysTimer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f840 	bl	8004000 <_ZNSt5arrayImLj1EE2atEj>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_ZN5Timer14IsTimerElapsedEmm>:

bool Timer::IsTimerElapsed(uint32_t numTimer, uint32_t valTimer)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
    uint32_t      ExpectedValue, AuxValue;

    ExpectedValue = (AuxValue = TimersTable.at(numTimer)) + valTimer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f82c 	bl	8004000 <_ZNSt5arrayImLj1EE2atEj>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
    if (ExpectedValue > AuxValue) {
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d90d      	bls.n	8003fda <_ZN5Timer14IsTimerElapsedEmm+0x4a>
       return((mSysTimer < AuxValue) || (mSysTimer > ExpectedValue));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d804      	bhi.n	8003fd2 <_ZN5Timer14IsTimerElapsedEmm+0x42>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d201      	bcs.n	8003fd6 <_ZN5Timer14IsTimerElapsedEmm+0x46>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00f      	b.n	8003ff6 <_ZN5Timer14IsTimerElapsedEmm+0x66>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e00d      	b.n	8003ff6 <_ZN5Timer14IsTimerElapsedEmm+0x66>
    } else {
       return((mSysTimer < AuxValue) && (mSysTimer >= ExpectedValue));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d906      	bls.n	8003ff2 <_ZN5Timer14IsTimerElapsedEmm+0x62>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d801      	bhi.n	8003ff2 <_ZN5Timer14IsTimerElapsedEmm+0x62>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <_ZN5Timer14IsTimerElapsedEmm+0x64>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	bf00      	nop
    }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <_ZNSt5arrayImLj1EE2atEj>:
      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      _GLIBCXX17_CONSTEXPR reference
      at(size_type __n)
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
      {
	if (__n >= _Nm)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <_ZNSt5arrayImLj1EE2atEj+0x1a>
	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 8004010:	2201      	movs	r2, #1
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	4806      	ldr	r0, [pc, #24]	; (8004030 <_ZNSt5arrayImLj1EE2atEj+0x30>)
 8004016:	f009 fbbd 	bl	800d794 <_ZSt24__throw_out_of_range_fmtPKcz>
					    ">= _Nm (which is %zu)"),
					__n, _Nm);
	return _AT_Type::_S_ref(_M_elems, __n);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f808 	bl	8004034 <_ZNSt14__array_traitsImLj1EE6_S_refERA1_Kmj>
 8004024:	4603      	mov	r3, r0
      }
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	0800dbd0 	.word	0x0800dbd0

08004034 <_ZNSt14__array_traitsImLj1EE6_S_refERA1_Kmj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004056:	3304      	adds	r3, #4

08004058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405a:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800405c:	d3f9      	bcc.n	8004052 <CopyDataInit>
  bx lr
 800405e:	4770      	bx	lr

08004060 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004060:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004062:	3004      	adds	r0, #4

08004064 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004064:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004066:	d3fb      	bcc.n	8004060 <FillZerobss>
  bx lr
 8004068:	4770      	bx	lr
	...

0800406c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800406c:	480c      	ldr	r0, [pc, #48]	; (80040a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800406e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <LoopForever+0x8>)
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <LoopForever+0xc>)
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <LoopForever+0x10>)
 8004076:	2300      	movs	r3, #0
 8004078:	f7ff ffee 	bl	8004058 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800407c:	480c      	ldr	r0, [pc, #48]	; (80040b0 <LoopForever+0x14>)
 800407e:	490d      	ldr	r1, [pc, #52]	; (80040b4 <LoopForever+0x18>)
 8004080:	2300      	movs	r3, #0
 8004082:	f7ff ffef 	bl	8004064 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004086:	480c      	ldr	r0, [pc, #48]	; (80040b8 <LoopForever+0x1c>)
 8004088:	490c      	ldr	r1, [pc, #48]	; (80040bc <LoopForever+0x20>)
 800408a:	2300      	movs	r3, #0
 800408c:	f7ff ffea 	bl	8004064 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004090:	f7ff fbb6 	bl	8003800 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004094:	f009 fc3c 	bl	800d910 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004098:	f7fe fba4 	bl	80027e4 <main>

0800409c <LoopForever>:

LoopForever:
  b LoopForever
 800409c:	e7fe      	b.n	800409c <LoopForever>
 800409e:	0000      	.short	0x0000
  ldr   r0, =_estack
 80040a0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80040a4:	20000004 	.word	0x20000004
 80040a8:	20000090 	.word	0x20000090
 80040ac:	0800de64 	.word	0x0800de64
  INIT_BSS _sbss, _ebss
 80040b0:	20000228 	.word	0x20000228
 80040b4:	200008e8 	.word	0x200008e8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80040b8:	200301c4 	.word	0x200301c4
 80040bc:	20030a44 	.word	0x20030a44

080040c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC1_IRQHandler>
	...

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <HAL_Init+0x3c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <HAL_Init+0x3c>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040da:	2003      	movs	r0, #3
 80040dc:	f000 f9c6 	bl	800446c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040e0:	2000      	movs	r0, #0
 80040e2:	f000 f80f 	bl	8004104 <HAL_InitTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	71fb      	strb	r3, [r7, #7]
 80040f0:	e001      	b.n	80040f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040f2:	f7ff f971 	bl	80033d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040f6:	79fb      	ldrb	r3, [r7, #7]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	58004000 	.word	0x58004000

08004104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004110:	4b17      	ldr	r3, [pc, #92]	; (8004170 <HAL_InitTick+0x6c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d023      	beq.n	8004160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U /uwTickFreq)) == 0U)
 8004118:	f003 fb86 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 800411c:	4601      	mov	r1, r0
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_InitTick+0x6c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	fbb1 f3f3 	udiv	r3, r1, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 f9dd 	bl	80044ee <HAL_SYSTICK_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10f      	bne.n	800415a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b0f      	cmp	r3, #15
 800413e:	d809      	bhi.n	8004154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004140:	2200      	movs	r2, #0
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	f000 f99b 	bl	8004482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800414c:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_InitTick+0x70>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e007      	b.n	8004164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
 8004158:	e004      	b.n	8004164 <HAL_InitTick+0x60>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
 800415e:	e001      	b.n	8004164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000014 	.word	0x20000014
 8004174:	20000010 	.word	0x20000010

08004178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_IncTick+0x1c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <HAL_IncTick+0x20>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4413      	add	r3, r2
 8004186:	4a03      	ldr	r2, [pc, #12]	; (8004194 <HAL_IncTick+0x1c>)
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	200008dc 	.word	0x200008dc
 8004198:	20000014 	.word	0x20000014

0800419c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return uwTick;
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_GetTick+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	200008dc 	.word	0x200008dc

080041b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_GetTickPrio+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000010 	.word	0x20000010

080041cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80041d4:	f7ff ffe2 	bl	800419c <HAL_GetTick>
 80041d8:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d004      	beq.n	80041f0 <HAL_Delay+0x24>
    {
      wait += (uint32_t)(uwTickFreq);
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <HAL_Delay+0x40>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 80041f0:	bf00      	nop
 80041f2:	f7ff ffd3 	bl	800419c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d8f7      	bhi.n	80041f2 <HAL_Delay+0x26>
    {
    }
  }
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000014 	.word	0x20000014

08004210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <__NVIC_GetPriorityGrouping+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0307 	and.w	r3, r3, #7
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db0b      	blt.n	800429e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	4907      	ldr	r1, [pc, #28]	; (80042ac <__NVIC_EnableIRQ+0x38>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2001      	movs	r0, #1
 8004296:	fa00 f202 	lsl.w	r2, r0, r2
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db10      	blt.n	80042e4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4909      	ldr	r1, [pc, #36]	; (80042f0 <__NVIC_DisableIRQ+0x40>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	3320      	adds	r3, #32
 80042d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80042dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80042e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100

080042f4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	2b00      	cmp	r3, #0
 8004304:	db0c      	blt.n	8004320 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <__NVIC_SetPendingIRQ+0x38>)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2001      	movs	r0, #1
 8004316:	fa00 f202 	lsl.w	r2, r0, r2
 800431a:	3340      	adds	r3, #64	; 0x40
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100

08004330 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	2b00      	cmp	r3, #0
 8004340:	db0c      	blt.n	800435c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	f003 021f 	and.w	r2, r3, #31
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <__NVIC_ClearPendingIRQ+0x38>)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	2001      	movs	r0, #1
 8004352:	fa00 f202 	lsl.w	r2, r0, r2
 8004356:	3360      	adds	r3, #96	; 0x60
 8004358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000e100 	.word	0xe000e100

0800436c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	6039      	str	r1, [r7, #0]
 8004376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	2b00      	cmp	r3, #0
 800437e:	db0a      	blt.n	8004396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	490c      	ldr	r1, [pc, #48]	; (80043b8 <__NVIC_SetPriority+0x4c>)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	440b      	add	r3, r1
 8004390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004394:	e00a      	b.n	80043ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4908      	ldr	r1, [pc, #32]	; (80043bc <__NVIC_SetPriority+0x50>)
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	3b04      	subs	r3, #4
 80043a4:	0112      	lsls	r2, r2, #4
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	440b      	add	r3, r1
 80043aa:	761a      	strb	r2, [r3, #24]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000e100 	.word	0xe000e100
 80043bc:	e000ed00 	.word	0xe000ed00

080043c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f1c3 0307 	rsb	r3, r3, #7
 80043da:	2b04      	cmp	r3, #4
 80043dc:	bf28      	it	cs
 80043de:	2304      	movcs	r3, #4
 80043e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d902      	bls.n	80043f0 <NVIC_EncodePriority+0x30>
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3b03      	subs	r3, #3
 80043ee:	e000      	b.n	80043f2 <NVIC_EncodePriority+0x32>
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f4:	f04f 32ff 	mov.w	r2, #4294967295
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	401a      	ands	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004408:	f04f 31ff 	mov.w	r1, #4294967295
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	43d9      	mvns	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004418:	4313      	orrs	r3, r2
         );
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3b01      	subs	r3, #1
 8004434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004438:	d301      	bcc.n	800443e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443a:	2301      	movs	r3, #1
 800443c:	e00f      	b.n	800445e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443e:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <SysTick_Config+0x40>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004446:	210f      	movs	r1, #15
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	f7ff ff8e 	bl	800436c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <SysTick_Config+0x40>)
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004456:	4b04      	ldr	r3, [pc, #16]	; (8004468 <SysTick_Config+0x40>)
 8004458:	2207      	movs	r2, #7
 800445a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	e000e010 	.word	0xe000e010

0800446c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fecb 	bl	8004210 <__NVIC_SetPriorityGrouping>
}
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	4603      	mov	r3, r0
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004490:	f7ff fee2 	bl	8004258 <__NVIC_GetPriorityGrouping>
 8004494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff ff90 	bl	80043c0 <NVIC_EncodePriority>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff5f 	bl	800436c <__NVIC_SetPriority>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fed5 	bl	8004274 <__NVIC_EnableIRQ>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fee5 	bl	80042b0 <__NVIC_DisableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ff96 	bl	8004428 <SysTick_Config>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff feed 	bl	80042f4 <__NVIC_SetPendingIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fefd 	bl	8004330 <__NVIC_ClearPendingIRQ>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e08d      	b.n	800466e <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_DMA_Init+0x138>)
 800455a:	429a      	cmp	r2, r3
 800455c:	d80f      	bhi.n	800457e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <HAL_DMA_Init+0x13c>)
 8004566:	4413      	add	r3, r2
 8004568:	4a45      	ldr	r2, [pc, #276]	; (8004680 <HAL_DMA_Init+0x140>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a42      	ldr	r2, [pc, #264]	; (8004684 <HAL_DMA_Init+0x144>)
 800457a:	641a      	str	r2, [r3, #64]	; 0x40
 800457c:	e00e      	b.n	800459c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <HAL_DMA_Init+0x148>)
 8004586:	4413      	add	r3, r2
 8004588:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <HAL_DMA_Init+0x140>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	009a      	lsls	r2, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a3c      	ldr	r2, [pc, #240]	; (800468c <HAL_DMA_Init+0x14c>)
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80045c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fa16 	bl	8004a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045fc:	d102      	bne.n	8004604 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004618:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <HAL_DMA_Init+0x104>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d80c      	bhi.n	8004644 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa36 	bl	8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	e008      	b.n	8004656 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40020407 	.word	0x40020407
 800467c:	bffdfff8 	.word	0xbffdfff8
 8004680:	cccccccd 	.word	0xcccccccd
 8004684:	40020000 	.word	0x40020000
 8004688:	bffdfbf8 	.word	0xbffdfbf8
 800468c:	40020400 	.word	0x40020400

08004690 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_DMA_Start_IT+0x20>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e066      	b.n	800477e <HAL_DMA_Start_IT+0xee>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d155      	bne.n	8004770 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f95a 	bl	80049a2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 020e 	orr.w	r2, r2, #14
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e00f      	b.n	8004728 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 020a 	orr.w	r2, r2, #10
 8004726:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004744:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e005      	b.n	800477c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004778:	2302      	movs	r3, #2
 800477a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d005      	beq.n	80047aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e047      	b.n	800483a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 020e 	bic.w	r2, r2, #14
 80047b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f003 021c 	and.w	r2, r3, #28
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	2101      	movs	r1, #1
 80047e8:	fa01 f202 	lsl.w	r2, r1, r2
 80047ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800480e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004818:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
    }
  }
  return status;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f003 031c 	and.w	r3, r3, #28
 8004864:	2204      	movs	r2, #4
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d026      	beq.n	80048be <HAL_DMA_IRQHandler+0x7a>
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d021      	beq.n	80048be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0204 	bic.w	r2, r2, #4
 8004896:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f003 021c 	and.w	r2, r3, #28
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2104      	movs	r1, #4
 80048a6:	fa01 f202 	lsl.w	r2, r1, r2
 80048aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d071      	beq.n	8004998 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80048bc:	e06c      	b.n	8004998 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	f003 031c 	and.w	r3, r3, #28
 80048c6:	2202      	movs	r2, #2
 80048c8:	409a      	lsls	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02e      	beq.n	8004930 <HAL_DMA_IRQHandler+0xec>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d029      	beq.n	8004930 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 020a 	bic.w	r2, r2, #10
 80048f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f003 021c 	and.w	r2, r3, #28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2102      	movs	r1, #2
 8004910:	fa01 f202 	lsl.w	r2, r1, r2
 8004914:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d038      	beq.n	8004998 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800492e:	e033      	b.n	8004998 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	f003 031c 	and.w	r3, r3, #28
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d02a      	beq.n	800499a <HAL_DMA_IRQHandler+0x156>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d025      	beq.n	800499a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 020e 	bic.w	r2, r2, #14
 800495c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 021c 	and.w	r2, r3, #28
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2101      	movs	r1, #1
 800496c:	fa01 f202 	lsl.w	r2, r1, r2
 8004970:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	2b00      	cmp	r3, #0
 800498e:	d004      	beq.n	800499a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004998:	bf00      	nop
 800499a:	bf00      	nop
}
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049b8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f003 021c 	and.w	r2, r3, #28
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f202 	lsl.w	r2, r1, r2
 80049de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d108      	bne.n	8004a02 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a00:	e007      	b.n	8004a12 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	60da      	str	r2, [r3, #12]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d80a      	bhi.n	8004a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6493      	str	r3, [r2, #72]	; 0x48
 8004a48:	e007      	b.n	8004a5a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	4b0f      	ldr	r3, [pc, #60]	; (8004a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a54:	4413      	add	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	3b08      	subs	r3, #8
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 031c 	and.w	r3, r3, #28
 8004a78:	2201      	movs	r2, #1
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40020407 	.word	0x40020407
 8004a90:	4002081c 	.word	0x4002081c
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	40020880 	.word	0x40020880

08004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004abe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2201      	movs	r2, #1
 8004aca:	409a      	lsls	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	1000823f 	.word	0x1000823f
 8004ae0:	40020940 	.word	0x40020940

08004ae4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af2:	e14c      	b.n	8004d8e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 813e 	beq.w	8004d88 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d003      	beq.n	8004b1c <HAL_GPIO_Init+0x38>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b12      	cmp	r3, #18
 8004b1a:	d123      	bne.n	8004b64 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	08da      	lsrs	r2, r3, #3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3208      	adds	r2, #8
 8004b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	220f      	movs	r2, #15
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	08da      	lsrs	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3208      	adds	r2, #8
 8004b5e:	6939      	ldr	r1, [r7, #16]
 8004b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0203 	and.w	r2, r3, #3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d00b      	beq.n	8004bb8 <HAL_GPIO_Init+0xd4>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d007      	beq.n	8004bb8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bac:	2b11      	cmp	r3, #17
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b12      	cmp	r3, #18
 8004bb6:	d130      	bne.n	8004c1a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bee:	2201      	movs	r2, #1
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0201 	and.w	r2, r3, #1
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	2203      	movs	r2, #3
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8098 	beq.w	8004d88 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c58:	4a54      	ldr	r2, [pc, #336]	; (8004dac <HAL_GPIO_Init+0x2c8>)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	220f      	movs	r2, #15
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c82:	d019      	beq.n	8004cb8 <HAL_GPIO_Init+0x1d4>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a4a      	ldr	r2, [pc, #296]	; (8004db0 <HAL_GPIO_Init+0x2cc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_GPIO_Init+0x1d0>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a49      	ldr	r2, [pc, #292]	; (8004db4 <HAL_GPIO_Init+0x2d0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00d      	beq.n	8004cb0 <HAL_GPIO_Init+0x1cc>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a48      	ldr	r2, [pc, #288]	; (8004db8 <HAL_GPIO_Init+0x2d4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <HAL_GPIO_Init+0x1c8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a47      	ldr	r2, [pc, #284]	; (8004dbc <HAL_GPIO_Init+0x2d8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_GPIO_Init+0x1c4>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e008      	b.n	8004cba <HAL_GPIO_Init+0x1d6>
 8004ca8:	2307      	movs	r3, #7
 8004caa:	e006      	b.n	8004cba <HAL_GPIO_Init+0x1d6>
 8004cac:	2303      	movs	r3, #3
 8004cae:	e004      	b.n	8004cba <HAL_GPIO_Init+0x1d6>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e002      	b.n	8004cba <HAL_GPIO_Init+0x1d6>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_GPIO_Init+0x1d6>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	f002 0203 	and.w	r2, r2, #3
 8004cc0:	0092      	lsls	r2, r2, #2
 8004cc2:	4093      	lsls	r3, r2
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cca:	4938      	ldr	r1, [pc, #224]	; (8004dac <HAL_GPIO_Init+0x2c8>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cd8:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cfe:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d2c:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d34:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4013      	ands	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	43db      	mvns	r3, r3
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <HAL_GPIO_Init+0x2dc>)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f47f aeab 	bne.w	8004af4 <HAL_GPIO_Init+0x10>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40010000 	.word	0x40010000
 8004db0:	48000400 	.word	0x48000400
 8004db4:	48000800 	.word	0x48000800
 8004db8:	48000c00 	.word	0x48000c00
 8004dbc:	48001000 	.word	0x48001000
 8004dc0:	58000800 	.word	0x58000800

08004dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	807b      	strh	r3, [r7, #2]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dd4:	787b      	ldrb	r3, [r7, #1]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dda:	887a      	ldrh	r2, [r7, #2]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004de0:	e002      	b.n	8004de8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e081      	b.n	8004f0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fe faf4 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d107      	bne.n	8004e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	e006      	b.n	8004e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d104      	bne.n	8004e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ea0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	ea42 0103 	orr.w	r1, r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	021a      	lsls	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69d9      	ldr	r1, [r3, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1a      	ldr	r2, [r3, #32]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	607a      	str	r2, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	460b      	mov	r3, r1
 8004f22:	817b      	strh	r3, [r7, #10]
 8004f24:	4613      	mov	r3, r2
 8004f26:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d153      	bne.n	8004fdc <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d101      	bne.n	8004f48 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
 8004f46:	e04a      	b.n	8004fde <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_I2C_Master_Transmit_IT+0x42>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e043      	b.n	8004fde <HAL_I2C_Master_Transmit_IT+0xca>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2221      	movs	r2, #33	; 0x21
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	893a      	ldrh	r2, [r7, #8]
 8004f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a18      	ldr	r2, [pc, #96]	; (8004fec <HAL_I2C_Master_Transmit_IT+0xd8>)
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2bff      	cmp	r3, #255	; 0xff
 8004f94:	d906      	bls.n	8004fa4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	22ff      	movs	r2, #255	; 0xff
 8004f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e007      	b.n	8004fb4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fb2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	8979      	ldrh	r1, [r7, #10]
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f001 f8fc 	bl	80061c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f001 f922 	bl	800621c <I2C_Enable_IRQ>

    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	ffff0000 	.word	0xffff0000
 8004fec:	0800525f 	.word	0x0800525f
 8004ff0:	80002000 	.word	0x80002000

08004ff4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	607a      	str	r2, [r7, #4]
 8004ffe:	461a      	mov	r2, r3
 8005000:	460b      	mov	r3, r1
 8005002:	817b      	strh	r3, [r7, #10]
 8005004:	4613      	mov	r3, r2
 8005006:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b20      	cmp	r3, #32
 8005012:	d153      	bne.n	80050bc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d101      	bne.n	8005028 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
 8005026:	e04a      	b.n	80050be <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_I2C_Master_Receive_IT+0x42>
 8005032:	2302      	movs	r3, #2
 8005034:	e043      	b.n	80050be <HAL_I2C_Master_Receive_IT+0xca>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2222      	movs	r2, #34	; 0x22
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2210      	movs	r2, #16
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	893a      	ldrh	r2, [r7, #8]
 800505e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_I2C_Master_Receive_IT+0xd8>)
 800506a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2bff      	cmp	r3, #255	; 0xff
 8005074:	d906      	bls.n	8005084 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800507c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	e007      	b.n	8005094 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800508e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005092:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	b2da      	uxtb	r2, r3
 800509a:	8979      	ldrh	r1, [r7, #10]
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <HAL_I2C_Master_Receive_IT+0xdc>)
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f001 f88c 	bl	80061c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80050b0:	2102      	movs	r1, #2
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 f8b2 	bl	800621c <I2C_Enable_IRQ>

    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	ffff0000 	.word	0xffff0000
 80050cc:	0800525f 	.word	0x0800525f
 80050d0:	80002400 	.word	0x80002400

080050d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
  }
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_I2C_ER_IRQHandler+0x46>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	f043 0201 	orr.w	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800514c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	0a9b      	lsrs	r3, r3, #10
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d010      	beq.n	800517c <HAL_I2C_ER_IRQHandler+0x74>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	09db      	lsrs	r3, r3, #7
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	f043 0208 	orr.w	r2, r3, #8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800517a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	0a5b      	lsrs	r3, r3, #9
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d010      	beq.n	80051aa <HAL_I2C_ER_IRQHandler+0xa2>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005198:	f043 0202 	orr.w	r2, r3, #2
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 030b 	and.w	r3, r3, #11
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fef7 	bl	8005fb0 <I2C_ITError>
  }
}
 80051c2:	bf00      	nop
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
 80051fe:	4613      	mov	r3, r2
 8005200:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <I2C_Master_ISR_IT+0x1e>
 8005278:	2302      	movs	r3, #2
 800527a:	e115      	b.n	80054a8 <I2C_Master_ISR_IT+0x24a>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d013      	beq.n	80052b8 <I2C_Master_ISR_IT+0x5a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	f043 0204 	orr.w	r2, r3, #4
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 ff3d 	bl	8006130 <I2C_Flush_TXDR>
 80052b6:	e0e2      	b.n	800547e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	089b      	lsrs	r3, r3, #2
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d023      	beq.n	800530c <I2C_Master_ISR_IT+0xae>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01d      	beq.n	800530c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0304 	bic.w	r3, r3, #4
 80052d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800530a:	e0b8      	b.n	800547e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <I2C_Master_ISR_IT+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d018      	beq.n	8005356 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005354:	e093      	b.n	800547e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	09db      	lsrs	r3, r3, #7
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d05e      	beq.n	8005420 <I2C_Master_ISR_IT+0x1c2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d058      	beq.n	8005420 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d041      	beq.n	80053fc <I2C_Master_ISR_IT+0x19e>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d13d      	bne.n	80053fc <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800538c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	2bff      	cmp	r3, #255	; 0xff
 8005396:	d90e      	bls.n	80053b6 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	8a79      	ldrh	r1, [r7, #18]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 ff06 	bl	80061c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b4:	e033      	b.n	800541e <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c8:	d00c      	beq.n	80053e4 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80053d4:	8a79      	ldrh	r1, [r7, #18]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	4603      	mov	r3, r0
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 feef 	bl	80061c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053e2:	e01c      	b.n	800541e <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8a79      	ldrh	r1, [r7, #18]
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fee3 	bl	80061c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053fa:	e010      	b.n	800541e <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800540a:	d003      	beq.n	8005414 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb8f 	bl	8005b30 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005412:	e034      	b.n	800547e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fdca 	bl	8005fb0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800541c:	e02f      	b.n	800547e <I2C_Master_ISR_IT+0x220>
 800541e:	e02e      	b.n	800547e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d028      	beq.n	800547e <I2C_Master_ISR_IT+0x220>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	099b      	lsrs	r3, r3, #6
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d022      	beq.n	800547e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005450:	d015      	beq.n	800547e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800545a:	d108      	bne.n	800546e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	e007      	b.n	800547e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fb5e 	bl	8005b30 <I2C_ITMasterSeqCplt>
 8005474:	e003      	b.n	800547e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005476:	2140      	movs	r1, #64	; 0x40
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fd99 	bl	8005fb0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <I2C_Master_ISR_IT+0x240>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005496:	6979      	ldr	r1, [r7, #20]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fbc3 	bl	8005c24 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <I2C_Slave_ISR_IT+0x24>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e0ec      	b.n	80056ae <I2C_Slave_ISR_IT+0x1fe>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <I2C_Slave_ISR_IT+0x4c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80054f4:	6939      	ldr	r1, [r7, #16]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fc30 	bl	8005d5c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d04d      	beq.n	80055a4 <I2C_Slave_ISR_IT+0xf4>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d047      	beq.n	80055a4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d128      	bne.n	8005570 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b28      	cmp	r3, #40	; 0x28
 8005528:	d108      	bne.n	800553c <I2C_Slave_ISR_IT+0x8c>
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005530:	d104      	bne.n	800553c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fce7 	bl	8005f08 <I2C_ITListenCplt>
 800553a:	e032      	b.n	80055a2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b29      	cmp	r3, #41	; 0x29
 8005546:	d10e      	bne.n	8005566 <I2C_Slave_ISR_IT+0xb6>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800554e:	d00a      	beq.n	8005566 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2210      	movs	r2, #16
 8005556:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fde9 	bl	8006130 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fb23 	bl	8005baa <I2C_ITSlaveSeqCplt>
 8005564:	e01d      	b.n	80055a2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2210      	movs	r2, #16
 800556c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800556e:	e096      	b.n	800569e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2210      	movs	r2, #16
 8005576:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	f043 0204 	orr.w	r2, r3, #4
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <I2C_Slave_ISR_IT+0xe4>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005590:	f040 8085 	bne.w	800569e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	4619      	mov	r1, r3
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fd08 	bl	8005fb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80055a0:	e07d      	b.n	800569e <I2C_Slave_ISR_IT+0x1ee>
 80055a2:	e07c      	b.n	800569e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d030      	beq.n	8005612 <I2C_Slave_ISR_IT+0x162>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02a      	beq.n	8005612 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d14f      	bne.n	80056a2 <I2C_Slave_ISR_IT+0x1f2>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005608:	d04b      	beq.n	80056a2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 facd 	bl	8005baa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005610:	e047      	b.n	80056a2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <I2C_Slave_ISR_IT+0x184>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800562a:	6939      	ldr	r1, [r7, #16]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f9fd 	bl	8005a2c <I2C_ITAddrCplt>
 8005632:	e037      	b.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d031      	beq.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02b      	beq.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d018      	beq.n	8005688 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
 8005686:	e00d      	b.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800568e:	d002      	beq.n	8005696 <I2C_Slave_ISR_IT+0x1e6>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fa87 	bl	8005baa <I2C_ITSlaveSeqCplt>
 800569c:	e002      	b.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80056a2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b088      	sub	sp, #32
 80056ba:	af02      	add	r7, sp, #8
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <I2C_Master_ISR_DMA+0x1a>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0e1      	b.n	8005894 <I2C_Master_ISR_DMA+0x1de>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <I2C_Master_ISR_DMA+0x5e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2210      	movs	r2, #16
 80056f6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fc:	f043 0204 	orr.w	r2, r3, #4
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005704:	2112      	movs	r1, #18
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fd88 	bl	800621c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fd0f 	bl	8006130 <I2C_Flush_TXDR>
 8005712:	e0ba      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d072      	beq.n	8005806 <I2C_Master_ISR_DMA+0x150>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d06c      	beq.n	8005806 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d04e      	beq.n	80057e4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005752:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	2bff      	cmp	r3, #255	; 0xff
 800575c:	d906      	bls.n	800576c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e010      	b.n	800578e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800577e:	d003      	beq.n	8005788 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e002      	b.n	800578e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800578c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	b2da      	uxtb	r2, r3
 8005794:	8a79      	ldrh	r1, [r7, #18]
 8005796:	2300      	movs	r3, #0
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fd0f 	bl	80061c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b22      	cmp	r3, #34	; 0x22
 80057be:	d108      	bne.n	80057d2 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057ce:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80057d0:	e05b      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80057e2:	e052      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f2:	d003      	beq.n	80057fc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f99b 	bl	8005b30 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80057fa:	e046      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057fc:	2140      	movs	r1, #64	; 0x40
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fbd6 	bl	8005fb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005804:	e041      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	099b      	lsrs	r3, r3, #6
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d029      	beq.n	8005866 <I2C_Master_ISR_DMA+0x1b0>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	099b      	lsrs	r3, r3, #6
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d023      	beq.n	8005866 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d119      	bne.n	800585c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005836:	d027      	beq.n	8005888 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005840:	d108      	bne.n	8005854 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005850:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005852:	e019      	b.n	8005888 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f96b 	bl	8005b30 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800585a:	e015      	b.n	8005888 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fba6 	bl	8005fb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005864:	e010      	b.n	8005888 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <I2C_Master_ISR_DMA+0x1d4>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f9cf 	bl	8005c24 <I2C_ITMasterCplt>
 8005886:	e000      	b.n	800588a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005888:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <I2C_Slave_ISR_DMA+0x24>
 80058bc:	2302      	movs	r3, #2
 80058be:	e0b1      	b.n	8005a24 <I2C_Slave_ISR_DMA+0x188>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <I2C_Slave_ISR_DMA+0x4c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa3a 	bl	8005d5c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8082 	beq.w	80059fa <I2C_Slave_ISR_DMA+0x15e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d07b      	beq.n	80059fa <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	0b9b      	lsrs	r3, r3, #14
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d105      	bne.n	800591a <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	0bdb      	lsrs	r3, r3, #15
 8005912:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005916:	2b00      	cmp	r3, #0
 8005918:	d068      	beq.n	80059ec <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00d      	beq.n	800593e <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	0bdb      	lsrs	r3, r3, #15
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 800593a:	2301      	movs	r3, #1
 800593c:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	0b9b      	lsrs	r3, r3, #14
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 800595e:	2301      	movs	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d128      	bne.n	80059ba <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b28      	cmp	r3, #40	; 0x28
 8005972:	d108      	bne.n	8005986 <I2C_Slave_ISR_DMA+0xea>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597a:	d104      	bne.n	8005986 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fac2 	bl	8005f08 <I2C_ITListenCplt>
 8005984:	e031      	b.n	80059ea <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b29      	cmp	r3, #41	; 0x29
 8005990:	d10e      	bne.n	80059b0 <I2C_Slave_ISR_DMA+0x114>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005998:	d00a      	beq.n	80059b0 <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2210      	movs	r2, #16
 80059a0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 fbc4 	bl	8006130 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f8fe 	bl	8005baa <I2C_ITSlaveSeqCplt>
 80059ae:	e01c      	b.n	80059ea <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2210      	movs	r2, #16
 80059b6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80059b8:	e01d      	b.n	80059f6 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2210      	movs	r2, #16
 80059c0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <I2C_Slave_ISR_DMA+0x140>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059da:	d10c      	bne.n	80059f6 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e0:	4619      	mov	r1, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fae4 	bl	8005fb0 <I2C_ITError>
      if (treatdmanack == 1U)
 80059e8:	e005      	b.n	80059f6 <I2C_Slave_ISR_DMA+0x15a>
 80059ea:	e004      	b.n	80059f6 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2210      	movs	r2, #16
 80059f2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059f4:	e011      	b.n	8005a1a <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 80059f6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059f8:	e00f      	b.n	8005a1a <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	08db      	lsrs	r3, r3, #3
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <I2C_Slave_ISR_DMA+0x17e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	08db      	lsrs	r3, r3, #3
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f809 	bl	8005a2c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a42:	2b28      	cmp	r3, #40	; 0x28
 8005a44:	d168      	bne.n	8005b18 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	0c1b      	lsrs	r3, r3, #16
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a64:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a72:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005a80:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d137      	bne.n	8005afa <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	89bb      	ldrh	r3, [r7, #12]
 8005a92:	4053      	eors	r3, r2
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f003 0306 	and.w	r3, r3, #6
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d11c      	bne.n	8005ad8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005a9e:	897b      	ldrh	r3, [r7, #10]
 8005aa0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d139      	bne.n	8005b28 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2208      	movs	r2, #8
 8005ac0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aca:	89ba      	ldrh	r2, [r7, #12]
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fb8e 	bl	80051f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ad6:	e027      	b.n	8005b28 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8005ad8:	893b      	ldrh	r3, [r7, #8]
 8005ada:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005adc:	2104      	movs	r1, #4
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fc0a 	bl	80062f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aec:	89ba      	ldrh	r2, [r7, #12]
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff fb7d 	bl	80051f2 <HAL_I2C_AddrCallback>
}
 8005af8:	e016      	b.n	8005b28 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005afa:	2104      	movs	r1, #4
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbfb 	bl	80062f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b0a:	89ba      	ldrh	r2, [r7, #12]
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fb6e 	bl	80051f2 <HAL_I2C_AddrCallback>
}
 8005b16:	e007      	b.n	8005b28 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b21      	cmp	r3, #33	; 0x21
 8005b4a:	d115      	bne.n	8005b78 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2211      	movs	r2, #17
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b60:	2101      	movs	r1, #1
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fbc8 	bl	80062f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fc fd2a 	bl	80025ca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b76:	e014      	b.n	8005ba2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2212      	movs	r2, #18
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fbb2 	bl	80062f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fc fd22 	bl	80025e6 <HAL_I2C_MasterRxCpltCallback>
}
 8005ba2:	bf00      	nop
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b29      	cmp	r3, #41	; 0x29
 8005bc4:	d112      	bne.n	8005bec <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2228      	movs	r2, #40	; 0x28
 8005bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2221      	movs	r2, #33	; 0x21
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fb8e 	bl	80062f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff faf0 	bl	80051ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005bea:	e017      	b.n	8005c1c <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf6:	d111      	bne.n	8005c1c <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2228      	movs	r2, #40	; 0x28
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2222      	movs	r2, #34	; 0x22
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c06:	2102      	movs	r1, #2
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb75 	bl	80062f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff fae1 	bl	80051de <HAL_I2C_SlaveRxCpltCallback>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2220      	movs	r2, #32
 8005c34:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b44      	ldr	r3, [pc, #272]	; (8005d54 <I2C_ITMasterCplt+0x130>)
 8005c42:	400b      	ands	r3, r1
 8005c44:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a40      	ldr	r2, [pc, #256]	; (8005d58 <I2C_ITMasterCplt+0x134>)
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fa59 	bl	8006130 <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005c7e:	2103      	movs	r1, #3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fb39 	bl	80062f8 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b60      	cmp	r3, #96	; 0x60
 8005c96:	d002      	beq.n	8005c9e <I2C_ITMasterCplt+0x7a>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f983 	bl	8005fb0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005caa:	e04e      	b.n	8005d4a <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b21      	cmp	r3, #33	; 0x21
 8005cb6:	d121      	bne.n	8005cfc <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d10b      	bne.n	8005ce4 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff faa0 	bl	8005222 <HAL_I2C_MemTxCpltCallback>
}
 8005ce2:	e032      	b.n	8005d4a <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fc fc68 	bl	80025ca <HAL_I2C_MasterTxCpltCallback>
}
 8005cfa:	e026      	b.n	8005d4a <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b22      	cmp	r3, #34	; 0x22
 8005d06:	d120      	bne.n	8005d4a <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d10b      	bne.n	8005d34 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff fa82 	bl	8005236 <HAL_I2C_MemRxCpltCallback>
}
 8005d32:	e00a      	b.n	8005d4a <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc fc4e 	bl	80025e6 <HAL_I2C_MasterRxCpltCallback>
}
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	fe00e800 	.word	0xfe00e800
 8005d58:	ffff0000 	.word	0xffff0000

08005d5c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2220      	movs	r2, #32
 8005d78:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005d7a:	2107      	movs	r1, #7
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fabb 	bl	80062f8 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d90:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6859      	ldr	r1, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	4b58      	ldr	r3, [pc, #352]	; (8005f00 <I2C_ITSlaveCplt+0x1a4>)
 8005d9e:	400b      	ands	r3, r1
 8005da0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9c4 	bl	8006130 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	0b9b      	lsrs	r3, r3, #14
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d018      	beq.n	8005dee <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dca:	e010      	b.n	8005dee <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	0bdb      	lsrs	r3, r3, #15
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00a      	beq.n	8005dee <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	089b      	lsrs	r3, r3, #2
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d020      	beq.n	8005e3c <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	f043 0204 	orr.w	r2, r3, #4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f89b 	bl	8005fb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b28      	cmp	r3, #40	; 0x28
 8005e84:	d138      	bne.n	8005ef8 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f83d 	bl	8005f08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e8e:	e033      	b.n	8005ef8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e98:	d011      	beq.n	8005ebe <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fe85 	bl	8005baa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <I2C_ITSlaveCplt+0x1a8>)
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f7ff f9a9 	bl	800520e <HAL_I2C_ListenCpltCallback>
}
 8005ebc:	e01c      	b.n	8005ef8 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b22      	cmp	r3, #34	; 0x22
 8005ec8:	d10b      	bne.n	8005ee2 <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff f97f 	bl	80051de <HAL_I2C_SlaveRxCpltCallback>
}
 8005ee0:	e00a      	b.n	8005ef8 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff f969 	bl	80051ca <HAL_I2C_SlaveTxCpltCallback>
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	fe00e800 	.word	0xfe00e800
 8005f04:	ffff0000 	.word	0xffff0000

08005f08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <I2C_ITListenCplt+0xa4>)
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d022      	beq.n	8005f86 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d012      	beq.n	8005f86 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	f043 0204 	orr.w	r2, r3, #4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f86:	2107      	movs	r1, #7
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f9b5 	bl	80062f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2210      	movs	r2, #16
 8005f94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f935 	bl	800520e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	ffff0000 	.word	0xffff0000

08005fb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fc0:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a55      	ldr	r2, [pc, #340]	; (8006124 <I2C_ITError+0x174>)
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	2b28      	cmp	r3, #40	; 0x28
 8005fe6:	d005      	beq.n	8005ff4 <I2C_ITError+0x44>
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b29      	cmp	r3, #41	; 0x29
 8005fec:	d002      	beq.n	8005ff4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff2:	d10e      	bne.n	8006012 <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ff4:	2103      	movs	r1, #3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f97e 	bl	80062f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2228      	movs	r2, #40	; 0x28
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a46      	ldr	r2, [pc, #280]	; (8006128 <I2C_ITError+0x178>)
 800600e:	635a      	str	r2, [r3, #52]	; 0x34
 8006010:	e013      	b.n	800603a <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006012:	2107      	movs	r1, #7
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f96f 	bl	80062f8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b60      	cmp	r3, #96	; 0x60
 8006024:	d003      	beq.n	800602e <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006048:	d123      	bne.n	8006092 <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006058:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	2b00      	cmp	r3, #0
 8006060:	d05c      	beq.n	800611c <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	4a31      	ldr	r2, [pc, #196]	; (800612c <I2C_ITError+0x17c>)
 8006068:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fb85 	bl	8004786 <HAL_DMA_Abort_IT>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04c      	beq.n	800611c <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006090:	e044      	b.n	800611c <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800609c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a0:	d123      	bne.n	80060ea <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b0:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d030      	beq.n	800611c <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <I2C_ITError+0x17c>)
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fb59 	bl	8004786 <HAL_DMA_Abort_IT>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060e4:	4610      	mov	r0, r2
 80060e6:	4798      	blx	r3
}
 80060e8:	e018      	b.n	800611c <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b60      	cmp	r3, #96	; 0x60
 80060f4:	d10b      	bne.n	800610e <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff f89f 	bl	800524a <HAL_I2C_AbortCpltCallback>
}
 800610c:	e006      	b.n	800611c <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fa73 	bl	8002602 <HAL_I2C_ErrorCallback>
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	ffff0000 	.word	0xffff0000
 8006128:	080054b1 	.word	0x080054b1
 800612c:	08006179 	.word	0x08006179

08006130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d103      	bne.n	800614e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d007      	beq.n	800616c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	619a      	str	r2, [r3, #24]
  }
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	2200      	movs	r2, #0
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006192:	2200      	movs	r2, #0
 8006194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b60      	cmp	r3, #96	; 0x60
 80061a0:	d107      	bne.n	80061b2 <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff f84d 	bl	800524a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061b0:	e002      	b.n	80061b8 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7fc fa25 	bl	8002602 <HAL_I2C_ErrorCallback>
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	460b      	mov	r3, r1
 80061cc:	817b      	strh	r3, [r7, #10]
 80061ce:	4613      	mov	r3, r2
 80061d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	0d5b      	lsrs	r3, r3, #21
 80061dc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <I2C_TransferConfig+0x58>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	43db      	mvns	r3, r3
 80061e6:	ea02 0103 	and.w	r1, r2, r3
 80061ea:	897b      	ldrh	r3, [r7, #10]
 80061ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061f0:	7a7b      	ldrb	r3, [r7, #9]
 80061f2:	041b      	lsls	r3, r3, #16
 80061f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	431a      	orrs	r2, r3
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	431a      	orrs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	03ff63ff 	.word	0x03ff63ff

0800621c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <I2C_Enable_IRQ+0xd4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800623a:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <I2C_Enable_IRQ+0xd8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d124      	bne.n	800628a <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006240:	887b      	ldrh	r3, [r7, #2]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006250:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8006252:	887b      	ldrh	r3, [r7, #2]
 8006254:	f003 0311 	and.w	r3, r3, #17
 8006258:	2b11      	cmp	r3, #17
 800625a:	d103      	bne.n	8006264 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006262:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006264:	887b      	ldrh	r3, [r7, #2]
 8006266:	f003 0312 	and.w	r3, r3, #18
 800626a:	2b12      	cmp	r3, #18
 800626c:	d103      	bne.n	8006276 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f043 0320 	orr.w	r3, r3, #32
 8006274:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	f003 0312 	and.w	r3, r3, #18
 800627c:	2b12      	cmp	r3, #18
 800627e:	d128      	bne.n	80062d2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006286:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8006288:	e023      	b.n	80062d2 <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800628a:	887b      	ldrh	r3, [r7, #2]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800629a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800629c:	887b      	ldrh	r3, [r7, #2]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80062ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80062be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80062c0:	887b      	ldrh	r3, [r7, #2]
 80062c2:	f003 0312 	and.w	r3, r3, #18
 80062c6:	2b12      	cmp	r3, #18
 80062c8:	d103      	bne.n	80062d2 <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f043 0320 	orr.w	r3, r3, #32
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	430a      	orrs	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	080056b7 	.word	0x080056b7
 80062f4:	0800589d 	.word	0x0800589d

080062f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006308:	887b      	ldrh	r3, [r7, #2]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00f      	beq.n	8006332 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006318:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006326:	2b28      	cmp	r3, #40	; 0x28
 8006328:	d003      	beq.n	8006332 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006330:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006332:	887b      	ldrh	r3, [r7, #2]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00f      	beq.n	800635c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006342:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006350:	2b28      	cmp	r3, #40	; 0x28
 8006352:	d003      	beq.n	800635c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800635a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800636c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	f003 0311 	and.w	r3, r3, #17
 8006374:	2b11      	cmp	r3, #17
 8006376:	d103      	bne.n	8006380 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800637e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8006380:	887b      	ldrh	r3, [r7, #2]
 8006382:	f003 0312 	and.w	r3, r3, #18
 8006386:	2b12      	cmp	r3, #18
 8006388:	d103      	bne.n	8006392 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f043 0320 	orr.w	r3, r3, #32
 8006390:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8006392:	887b      	ldrh	r3, [r7, #2]
 8006394:	f003 0312 	and.w	r3, r3, #18
 8006398:	2b12      	cmp	r3, #18
 800639a:	d103      	bne.n	80063a4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6819      	ldr	r1, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	43da      	mvns	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	400a      	ands	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d138      	bne.n	800644a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e032      	b.n	800644c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2224      	movs	r2, #36	; 0x24
 80063f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0201 	bic.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006414:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6819      	ldr	r1, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e000      	b.n	800644c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800644a:	2302      	movs	r3, #2
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b20      	cmp	r3, #32
 800646c:	d139      	bne.n	80064e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006478:	2302      	movs	r3, #2
 800647a:	e033      	b.n	80064e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2224      	movs	r2, #36	; 0x24
 8006488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80064aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2220      	movs	r2, #32
 80064d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80064e2:	2302      	movs	r3, #2
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b08b      	sub	sp, #44	; 0x2c
 80064f4:	af06      	add	r7, sp, #24
 80064f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e0ad      	b.n	800665e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fd f882 	bl	8003620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2203      	movs	r2, #3
 8006520:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	f004 fce1 	bl	800aef0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
 8006532:	e035      	b.n	80065a0 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	015b      	lsls	r3, r3, #5
 800653a:	4413      	add	r3, r2
 800653c:	3329      	adds	r3, #41	; 0x29
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	015b      	lsls	r3, r3, #5
 8006548:	4413      	add	r3, r2
 800654a:	3328      	adds	r3, #40	; 0x28
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	7bfa      	ldrb	r2, [r7, #15]
 8006554:	b291      	uxth	r1, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	015b      	lsls	r3, r3, #5
 800655a:	4413      	add	r3, r2
 800655c:	3336      	adds	r3, #54	; 0x36
 800655e:	460a      	mov	r2, r1
 8006560:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	015b      	lsls	r3, r3, #5
 8006568:	4413      	add	r3, r2
 800656a:	332b      	adds	r3, #43	; 0x2b
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	015b      	lsls	r3, r3, #5
 8006576:	4413      	add	r3, r2
 8006578:	3338      	adds	r3, #56	; 0x38
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	015b      	lsls	r3, r3, #5
 8006584:	4413      	add	r3, r2
 8006586:	333c      	adds	r3, #60	; 0x3c
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	3302      	adds	r3, #2
 8006592:	015b      	lsls	r3, r3, #5
 8006594:	4413      	add	r3, r2
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3301      	adds	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	7bfa      	ldrb	r2, [r7, #15]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d3c4      	bcc.n	8006534 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
 80065ae:	e031      	b.n	8006614 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	015b      	lsls	r3, r3, #5
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	015b      	lsls	r3, r3, #5
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	015b      	lsls	r3, r3, #5
 80065d6:	4413      	add	r3, r2
 80065d8:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	015b      	lsls	r3, r3, #5
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	015b      	lsls	r3, r3, #5
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	330a      	adds	r3, #10
 8006606:	015b      	lsls	r3, r3, #5
 8006608:	4413      	add	r3, r2
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	3301      	adds	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
 8006614:	7bfa      	ldrb	r2, [r7, #15]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d3c8      	bcc.n	80065b0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	687e      	ldr	r6, [r7, #4]
 8006626:	466d      	mov	r5, sp
 8006628:	f106 0410 	add.w	r4, r6, #16
 800662c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800662e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	1d33      	adds	r3, r6, #4
 8006636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006638:	6838      	ldr	r0, [r7, #0]
 800663a:	f004 fc76 	bl	800af2a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d102      	bne.n	800665c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f805 	bl	8006666 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006666 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800668a:	b29b      	uxth	r3, r3
 800668c:	f043 0301 	orr.w	r3, r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066bc:	b480      	push	{r7}
 80066be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066c0:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80066c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ca:	6013      	str	r3, [r2, #0]
}
 80066cc:	bf00      	nop
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	58000400 	.word	0x58000400

080066dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	58000400 	.word	0x58000400

080066f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80066fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670a:	d101      	bne.n	8006710 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <LL_RCC_HSE_EnableBypass>:
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800672a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800672e:	6013      	str	r3, [r2, #0]
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <LL_RCC_HSE_DisableBypass>:
{
 800673a:	b480      	push	{r7}
 800673c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800673e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800674c:	6013      	str	r3, [r2, #0]
}
 800674e:	bf00      	nop
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <LL_RCC_HSE_Enable>:
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
}
 800676c:	bf00      	nop
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <LL_RCC_HSE_Disable>:
{
 8006776:	b480      	push	{r7}
 8006778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800677a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006788:	6013      	str	r3, [r2, #0]
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <LL_RCC_HSE_IsReady>:
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067a6:	d101      	bne.n	80067ac <LL_RCC_HSE_IsReady+0x18>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <LL_RCC_HSE_IsReady+0x1a>
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <LL_RCC_HSI_Enable>:
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <LL_RCC_HSI_Disable>:
{
 80067d6:	b480      	push	{r7}
 80067d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80067da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067e8:	6013      	str	r3, [r2, #0]
}
 80067ea:	bf00      	nop
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <LL_RCC_HSI_IsReady>:
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80067f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d101      	bne.n	800680c <LL_RCC_HSI_IsReady+0x18>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <LL_RCC_HSI_IsReady+0x1a>
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	061b      	lsls	r3, r3, #24
 800682e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006832:	4313      	orrs	r3, r2
 8006834:	604b      	str	r3, [r1, #4]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <LL_RCC_HSI48_Enable>:
{
 8006842:	b480      	push	{r7}
 8006844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800684a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800684e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800685a:	bf00      	nop
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <LL_RCC_HSI48_Disable>:
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800686c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006874:	f023 0301 	bic.w	r3, r3, #1
 8006878:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800687c:	bf00      	nop
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <LL_RCC_HSI48_IsReady>:
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d101      	bne.n	800689e <LL_RCC_HSI48_IsReady+0x18>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <LL_RCC_HSI48_IsReady+0x1a>
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <LL_RCC_LSE_Enable>:
{
 80068aa:	b480      	push	{r7}
 80068ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <LL_RCC_LSE_Disable>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <LL_RCC_LSE_EnableBypass>:
{
 80068ee:	b480      	push	{r7}
 80068f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068fe:	f043 0304 	orr.w	r3, r3, #4
 8006902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_RCC_LSE_DisableBypass>:
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006920:	f023 0304 	bic.w	r3, r3, #4
 8006924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <LL_RCC_LSE_IsReady>:
{
 8006932:	b480      	push	{r7}
 8006934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b02      	cmp	r3, #2
 8006944:	d101      	bne.n	800694a <LL_RCC_LSE_IsReady+0x18>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <LL_RCC_LSE_IsReady+0x1a>
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_LSI1_Enable>:
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800695e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_LSI1_Disable>:
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <LL_RCC_LSI1_IsReady>:
{
 800699a:	b480      	push	{r7}
 800699c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d101      	bne.n	80069b2 <LL_RCC_LSI1_IsReady+0x18>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <LL_RCC_LSI1_IsReady+0x1a>
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <LL_RCC_LSI2_Enable>:
{
 80069be:	b480      	push	{r7}
 80069c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ce:	f043 0304 	orr.w	r3, r3, #4
 80069d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_RCC_LSI2_Disable>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80069e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069f0:	f023 0304 	bic.w	r3, r3, #4
 80069f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_RCC_LSI2_IsReady>:
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d101      	bne.n	8006a1a <LL_RCC_LSI2_IsReady+0x18>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <LL_RCC_LSI2_IsReady+0x1a>
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <LL_RCC_LSI2_SetTrimming>:
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <LL_RCC_MSI_Enable>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a62:	f043 0301 	orr.w	r3, r3, #1
 8006a66:	6013      	str	r3, [r2, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <LL_RCC_MSI_Disable>:
{
 8006a72:	b480      	push	{r7}
 8006a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a80:	f023 0301 	bic.w	r3, r3, #1
 8006a84:	6013      	str	r3, [r2, #0]
}
 8006a86:	bf00      	nop
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <LL_RCC_MSI_IsReady>:
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d101      	bne.n	8006aa6 <LL_RCC_MSI_IsReady+0x16>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <LL_RCC_MSI_IsReady+0x18>
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <LL_RCC_MSI_SetRange>:
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <LL_RCC_MSI_GetRange>:
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2bb0      	cmp	r3, #176	; 0xb0
 8006af0:	d901      	bls.n	8006af6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006af2:	23b0      	movs	r3, #176	; 0xb0
 8006af4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8006af6:	687b      	ldr	r3, [r7, #4]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	604b      	str	r3, [r1, #4]
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <LL_RCC_SetSysClkSource>:
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 0203 	bic.w	r2, r3, #3
 8006b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <LL_RCC_GetSysClkSource>:
{
 8006b56:	b480      	push	{r7}
 8006b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 030c 	and.w	r3, r3, #12
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <LL_RCC_SetAHBPrescaler>:
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	608b      	str	r3, [r1, #8]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_RCC_SetAHB4Prescaler>:
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006bd2:	f023 020f 	bic.w	r2, r3, #15
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	091b      	lsrs	r3, r3, #4
 8006bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_RCC_SetAPB1Prescaler>:
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	608b      	str	r3, [r1, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_RCC_SetAPB2Prescaler>:
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	608b      	str	r3, [r1, #8]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_GetAHBPrescaler>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <LL_RCC_GetAHB4Prescaler>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_RCC_GetAPB1Prescaler>:
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_GetAPB2Prescaler>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	6013      	str	r3, [r2, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cd4:	6013      	str	r3, [r2, #0]
}
 8006cd6:	bf00      	nop
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cf2:	d101      	bne.n	8006cf8 <LL_RCC_PLL_IsReady+0x18>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <LL_RCC_PLL_IsReady+0x1a>
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	0a1b      	lsrs	r3, r3, #8
 8006d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d36:	b480      	push	{r7}
 8006d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0303 	and.w	r3, r3, #3
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d78:	d101      	bne.n	8006d7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e000      	b.n	8006d80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9e:	d101      	bne.n	8006da4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006db8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d101      	bne.n	8006dca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de8:	d101      	bne.n	8006dee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e0c:	d101      	bne.n	8006e12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
	...

08006e20 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b08b      	sub	sp, #44	; 0x2c
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e34b      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 808f 	beq.w	8006f5e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e40:	f7ff fe89 	bl	8006b56 <LL_RCC_GetSysClkSource>
 8006e44:	6278      	str	r0, [r7, #36]	; 0x24
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e46:	f7ff ff82 	bl	8006d4e <LL_RCC_PLL_GetMainSource>
 8006e4a:	6238      	str	r0, [r7, #32]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_RCC_OscConfig+0x3e>
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d149      	bne.n	8006eec <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d146      	bne.n	8006eec <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e5e:	f7ff fe17 	bl	8006a90 <LL_RCC_MSI_IsReady>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_RCC_OscConfig+0x54>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e32a      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006e78:	f7ff fe2f 	bl	8006ada <LL_RCC_MSI_GetRange>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d914      	bls.n	8006eac <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fd0e 	bl	80078a8 <RCC_SetFlashLatencyFromMSIRange>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e319      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fe09 	bl	8006ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7ff fe2d 	bl	8006b04 <LL_RCC_MSI_SetCalibTrimming>
 8006eaa:	e013      	b.n	8006ed4 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fdfe 	bl	8006ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fe22 	bl	8006b04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fcef 	bl	80078a8 <RCC_SetFlashLatencyFromMSIRange>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e2fa      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8006ed4:	f7fc fcea 	bl	80038ac <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ed8:	4bb4      	ldr	r3, [pc, #720]	; (80071ac <HAL_RCC_OscConfig+0x38c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fd f911 	bl	8004104 <HAL_InitTick>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d039      	beq.n	8006f5c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e2ee      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d01e      	beq.n	8006f32 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ef4:	f7ff fdae 	bl	8006a54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ef8:	f7fd f950 	bl	800419c <HAL_GetTick>
 8006efc:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f00:	f7fd f94c 	bl	800419c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e2db      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006f12:	f7ff fdbd 	bl	8006a90 <LL_RCC_MSI_IsReady>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f1      	beq.n	8006f00 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fdc6 	bl	8006ab2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fdea 	bl	8006b04 <LL_RCC_MSI_SetCalibTrimming>
 8006f30:	e015      	b.n	8006f5e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006f32:	f7ff fd9e 	bl	8006a72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f36:	f7fd f931 	bl	800419c <HAL_GetTick>
 8006f3a:	61f8      	str	r0, [r7, #28]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006f3e:	f7fd f92d 	bl	800419c <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e2bc      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006f50:	f7ff fd9e 	bl	8006a90 <LL_RCC_MSI_IsReady>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f1      	bne.n	8006f3e <HAL_RCC_OscConfig+0x11e>
 8006f5a:	e000      	b.n	8006f5e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d05a      	beq.n	8007020 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f6a:	f7ff fdf4 	bl	8006b56 <LL_RCC_GetSysClkSource>
 8006f6e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f70:	f7ff feed 	bl	8006d4e <LL_RCC_PLL_GetMainSource>
 8006f74:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d005      	beq.n	8006f88 <HAL_RCC_OscConfig+0x168>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	2b0c      	cmp	r3, #12
 8006f80:	d10d      	bne.n	8006f9e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d10a      	bne.n	8006f9e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f88:	f7ff fc04 	bl	8006794 <LL_RCC_HSE_IsReady>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d045      	beq.n	800701e <HAL_RCC_OscConfig+0x1fe>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d141      	bne.n	800701e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e295      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_OscConfig+0x18e>
 8006fa8:	f7ff fbd6 	bl	8006758 <LL_RCC_HSE_Enable>
 8006fac:	e00d      	b.n	8006fca <HAL_RCC_OscConfig+0x1aa>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb6:	d104      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x1a2>
 8006fb8:	f7ff fbb0 	bl	800671c <LL_RCC_HSE_EnableBypass>
 8006fbc:	f7ff fbcc 	bl	8006758 <LL_RCC_HSE_Enable>
 8006fc0:	e003      	b.n	8006fca <HAL_RCC_OscConfig+0x1aa>
 8006fc2:	f7ff fbd8 	bl	8006776 <LL_RCC_HSE_Disable>
 8006fc6:	f7ff fbb8 	bl	800673a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d012      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd2:	f7fd f8e3 	bl	800419c <HAL_GetTick>
 8006fd6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fda:	f7fd f8df 	bl	800419c <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b64      	cmp	r3, #100	; 0x64
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e26e      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006fec:	f7ff fbd2 	bl	8006794 <LL_RCC_HSE_IsReady>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f1      	beq.n	8006fda <HAL_RCC_OscConfig+0x1ba>
 8006ff6:	e013      	b.n	8007020 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff8:	f7fd f8d0 	bl	800419c <HAL_GetTick>
 8006ffc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006ffe:	e008      	b.n	8007012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007000:	f7fd f8cc 	bl	800419c <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b64      	cmp	r3, #100	; 0x64
 800700c:	d901      	bls.n	8007012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e25b      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007012:	f7ff fbbf 	bl	8006794 <LL_RCC_HSE_IsReady>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f1      	bne.n	8007000 <HAL_RCC_OscConfig+0x1e0>
 800701c:	e000      	b.n	8007020 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d051      	beq.n	80070d0 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800702c:	f7ff fd93 	bl	8006b56 <LL_RCC_GetSysClkSource>
 8007030:	6138      	str	r0, [r7, #16]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007032:	f7ff fe8c 	bl	8006d4e <LL_RCC_PLL_GetMainSource>
 8007036:	60f8      	str	r0, [r7, #12]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b04      	cmp	r3, #4
 800703c:	d005      	beq.n	800704a <HAL_RCC_OscConfig+0x22a>
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	d113      	bne.n	800706c <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b02      	cmp	r3, #2
 8007048:	d110      	bne.n	800706c <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800704a:	f7ff fbd3 	bl	80067f4 <LL_RCC_HSI_IsReady>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCC_OscConfig+0x240>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e234      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fbd7 	bl	8006818 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800706a:	e031      	b.n	80070d0 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d019      	beq.n	80070a8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007074:	f7ff fba0 	bl	80067b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007078:	f7fd f890 	bl	800419c <HAL_GetTick>
 800707c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800707e:	e008      	b.n	8007092 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007080:	f7fd f88c 	bl	800419c <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	2b02      	cmp	r3, #2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e21b      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007092:	f7ff fbaf 	bl	80067f4 <LL_RCC_HSI_IsReady>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f1      	beq.n	8007080 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff fbb9 	bl	8006818 <LL_RCC_HSI_SetCalibTrimming>
 80070a6:	e013      	b.n	80070d0 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a8:	f7ff fb95 	bl	80067d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ac:	f7fd f876 	bl	800419c <HAL_GetTick>
 80070b0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b4:	f7fd f872 	bl	800419c <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e201      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80070c6:	f7ff fb95 	bl	80067f4 <LL_RCC_HSI_IsReady>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f1      	bne.n	80070b4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80a2 	beq.w	800722e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d075      	beq.n	80071de <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d046      	beq.n	800718c <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80070fe:	f7ff fc4c 	bl	800699a <LL_RCC_LSI1_IsReady>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d113      	bne.n	8007130 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007108:	f7ff fc25 	bl	8006956 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800710c:	f7fd f846 	bl	800419c <HAL_GetTick>
 8007110:	61f8      	str	r0, [r7, #28]

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007114:	f7fd f842 	bl	800419c <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e1d1      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007126:	f7ff fc38 	bl	800699a <LL_RCC_LSI1_IsReady>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f1      	beq.n	8007114 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007130:	f7ff fc45 	bl	80069be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fd f832 	bl	800419c <HAL_GetTick>
 8007138:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800713c:	f7fd f82e 	bl	800419c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e1bd      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800714e:	f7ff fc58 	bl	8006a02 <LL_RCC_LSI2_IsReady>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f1      	beq.n	800713c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fc62 	bl	8006a26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007162:	f7ff fc09 	bl	8006978 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fd f819 	bl	800419c <HAL_GetTick>
 800716a:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800716e:	f7fd f815 	bl	800419c <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e1a4      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007180:	f7ff fc0b 	bl	800699a <LL_RCC_LSI1_IsReady>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f1      	bne.n	800716e <HAL_RCC_OscConfig+0x34e>
 800718a:	e050      	b.n	800722e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800718c:	f7ff fbe3 	bl	8006956 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fd f804 	bl	800419c <HAL_GetTick>
 8007194:	61f8      	str	r0, [r7, #28]

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007196:	e00b      	b.n	80071b0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007198:	f7fd f800 	bl	800419c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d904      	bls.n	80071b0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e18f      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
 80071aa:	bf00      	nop
 80071ac:	20000010 	.word	0x20000010
        while (LL_RCC_LSI1_IsReady() == 0U)
 80071b0:	f7ff fbf3 	bl	800699a <LL_RCC_LSI1_IsReady>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0ee      	beq.n	8007198 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80071ba:	f7ff fc11 	bl	80069e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80071be:	e008      	b.n	80071d2 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80071c0:	f7fc ffec 	bl	800419c <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d901      	bls.n	80071d2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e17b      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80071d2:	f7ff fc16 	bl	8006a02 <LL_RCC_LSI2_IsReady>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f1      	bne.n	80071c0 <HAL_RCC_OscConfig+0x3a0>
 80071dc:	e027      	b.n	800722e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80071de:	f7ff fbff 	bl	80069e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e2:	f7fc ffdb 	bl	800419c <HAL_GetTick>
 80071e6:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80071e8:	e008      	b.n	80071fc <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80071ea:	f7fc ffd7 	bl	800419c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e166      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80071fc:	f7ff fc01 	bl	8006a02 <LL_RCC_LSI2_IsReady>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f1      	bne.n	80071ea <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007206:	f7ff fbb7 	bl	8006978 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720a:	f7fc ffc7 	bl	800419c <HAL_GetTick>
 800720e:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007212:	f7fc ffc3 	bl	800419c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e152      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007224:	f7ff fbb9 	bl	800699a <LL_RCC_LSI1_IsReady>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f1      	bne.n	8007212 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d05b      	beq.n	80072f2 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723a:	4ba6      	ldr	r3, [pc, #664]	; (80074d4 <HAL_RCC_OscConfig+0x6b4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d114      	bne.n	8007270 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007246:	f7ff fa39 	bl	80066bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800724a:	f7fc ffa7 	bl	800419c <HAL_GetTick>
 800724e:	61f8      	str	r0, [r7, #28]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007250:	e008      	b.n	8007264 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007252:	f7fc ffa3 	bl	800419c <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e132      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007264:	4b9b      	ldr	r3, [pc, #620]	; (80074d4 <HAL_RCC_OscConfig+0x6b4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0f0      	beq.n	8007252 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <HAL_RCC_OscConfig+0x45e>
 8007278:	f7ff fb17 	bl	80068aa <LL_RCC_LSE_Enable>
 800727c:	e00c      	b.n	8007298 <HAL_RCC_OscConfig+0x478>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b05      	cmp	r3, #5
 8007284:	d104      	bne.n	8007290 <HAL_RCC_OscConfig+0x470>
 8007286:	f7ff fb32 	bl	80068ee <LL_RCC_LSE_EnableBypass>
 800728a:	f7ff fb0e 	bl	80068aa <LL_RCC_LSE_Enable>
 800728e:	e003      	b.n	8007298 <HAL_RCC_OscConfig+0x478>
 8007290:	f7ff fb1c 	bl	80068cc <LL_RCC_LSE_Disable>
 8007294:	f7ff fb3c 	bl	8006910 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d014      	beq.n	80072ca <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a0:	f7fc ff7c 	bl	800419c <HAL_GetTick>
 80072a4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80072a6:	e00a      	b.n	80072be <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a8:	f7fc ff78 	bl	800419c <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e105      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80072be:	f7ff fb38 	bl	8006932 <LL_RCC_LSE_IsReady>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ef      	beq.n	80072a8 <HAL_RCC_OscConfig+0x488>
 80072c8:	e013      	b.n	80072f2 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ca:	f7fc ff67 	bl	800419c <HAL_GetTick>
 80072ce:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fc ff63 	bl	800419c <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e0f0      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_LSE_IsReady() != 0U)
 80072e8:	f7ff fb23 	bl	8006932 <LL_RCC_LSE_IsReady>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1ef      	bne.n	80072d2 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d02c      	beq.n	8007358 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	d014      	beq.n	8007330 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007306:	f7ff fa9c 	bl	8006842 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730a:	f7fc ff47 	bl	800419c <HAL_GetTick>
 800730e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007312:	f7fc ff43 	bl	800419c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e0d2      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007324:	f7ff faaf 	bl	8006886 <LL_RCC_HSI48_IsReady>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0f1      	beq.n	8007312 <HAL_RCC_OscConfig+0x4f2>
 800732e:	e013      	b.n	8007358 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007330:	f7ff fa98 	bl	8006864 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007334:	f7fc ff32 	bl	800419c <HAL_GetTick>
 8007338:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800733c:	f7fc ff2e 	bl	800419c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0bd      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800734e:	f7ff fa9a 	bl	8006886 <LL_RCC_HSI48_IsReady>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f1      	bne.n	800733c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80b3 	beq.w	80074c8 <HAL_RCC_OscConfig+0x6a8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007362:	f7ff fbf8 	bl	8006b56 <LL_RCC_GetSysClkSource>
 8007366:	4603      	mov	r3, r0
 8007368:	2b0c      	cmp	r3, #12
 800736a:	d076      	beq.n	800745a <HAL_RCC_OscConfig+0x63a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	2b02      	cmp	r3, #2
 8007372:	d14b      	bne.n	800740c <HAL_RCC_OscConfig+0x5ec>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007374:	f7ff fca5 	bl	8006cc2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fc ff10 	bl	800419c <HAL_GetTick>
 800737c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x572>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007380:	f7fc ff0c 	bl	800419c <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x572>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e09b      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007392:	f7ff fca5 	bl	8006ce0 <LL_RCC_PLL_IsReady>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f1      	bne.n	8007380 <HAL_RCC_OscConfig+0x560>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800739c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	4b4d      	ldr	r3, [pc, #308]	; (80074d8 <HAL_RCC_OscConfig+0x6b8>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073ae:	4311      	orrs	r1, r2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073b4:	0212      	lsls	r2, r2, #8
 80073b6:	4311      	orrs	r1, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073bc:	4311      	orrs	r1, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073c2:	4311      	orrs	r1, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80073c8:	430a      	orrs	r2, r1
 80073ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073d2:	f7ff fc67 	bl	8006ca4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e6:	f7fc fed9 	bl	800419c <HAL_GetTick>
 80073ea:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ee:	f7fc fed5 	bl	800419c <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e064      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007400:	f7ff fc6e 	bl	8006ce0 <LL_RCC_PLL_IsReady>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0f1      	beq.n	80073ee <HAL_RCC_OscConfig+0x5ce>
 800740a:	e05d      	b.n	80074c8 <HAL_RCC_OscConfig+0x6a8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740c:	f7ff fc59 	bl	8006cc2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8007420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800742a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800742e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007432:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007434:	f7fc feb2 	bl	800419c <HAL_GetTick>
 8007438:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743c:	f7fc feae 	bl	800419c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b02      	cmp	r3, #2
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e03d      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        while (LL_RCC_PLL_IsReady() != 0U)
 800744e:	f7ff fc47 	bl	8006ce0 <LL_RCC_PLL_IsReady>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f1      	bne.n	800743c <HAL_RCC_OscConfig+0x61c>
 8007458:	e036      	b.n	80074c8 <HAL_RCC_OscConfig+0x6a8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_RCC_OscConfig+0x646>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e031      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8007466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	60bb      	str	r3, [r7, #8]

        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 0203 	and.w	r2, r3, #3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	429a      	cmp	r2, r3
 800747a:	d123      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007486:	429a      	cmp	r2, r3
 8007488:	d11c      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6a4>
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	0a1b      	lsrs	r3, r3, #8
 800748e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007496:	429a      	cmp	r2, r3
 8007498:	d114      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
            ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d10d      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d106      	bne.n	80074c4 <HAL_RCC_OscConfig+0x6a4>
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d001      	beq.n	80074c8 <HAL_RCC_OscConfig+0x6a8>
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <HAL_RCC_OscConfig+0x6aa>
        }
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	372c      	adds	r7, #44	; 0x2c
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd90      	pop	{r4, r7, pc}
 80074d2:	bf00      	nop
 80074d4:	58000400 	.word	0x58000400
 80074d8:	11c1808c 	.word	0x11c1808c

080074dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e12a      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074f0:	4b97      	ldr	r3, [pc, #604]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d91b      	bls.n	8007536 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fe:	4b94      	ldr	r3, [pc, #592]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f023 0207 	bic.w	r2, r3, #7
 8007506:	4992      	ldr	r1, [pc, #584]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	4313      	orrs	r3, r2
 800750c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800750e:	f7fc fe45 	bl	800419c <HAL_GetTick>
 8007512:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007514:	e008      	b.n	8007528 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007516:	f7fc fe41 	bl	800419c <HAL_GetTick>
 800751a:	4602      	mov	r2, r0
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e10e      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007528:	4b89      	ldr	r3, [pc, #548]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d1ef      	bne.n	8007516 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fb11 	bl	8006b6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800754c:	f7fc fe26 	bl	800419c <HAL_GetTick>
 8007550:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007552:	e008      	b.n	8007566 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007554:	f7fc fe22 	bl	800419c <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e0ef      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007566:	f7ff fbfe 	bl	8006d66 <LL_RCC_IsActiveFlag_HPRE>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f1      	beq.n	8007554 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d016      	beq.n	80075aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff fb08 	bl	8006b96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007586:	f7fc fe09 	bl	800419c <HAL_GetTick>
 800758a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800758e:	f7fc fe05 	bl	800419c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e0d2      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80075a0:	f7ff fbf3 	bl	8006d8a <LL_RCC_IsActiveFlag_C2HPRE>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0f1      	beq.n	800758e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fb01 	bl	8006bc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075c0:	f7fc fdec 	bl	800419c <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075c6:	e008      	b.n	80075da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80075c8:	f7fc fde8 	bl	800419c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e0b5      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80075da:	f7ff fbe9 	bl	8006db0 <LL_RCC_IsActiveFlag_SHDHPRE>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f1      	beq.n	80075c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d016      	beq.n	800761e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fafb 	bl	8006bf0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80075fa:	f7fc fdcf 	bl	800419c <HAL_GetTick>
 80075fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007600:	e008      	b.n	8007614 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007602:	f7fc fdcb 	bl	800419c <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e098      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007614:	f7ff fbdf 	bl	8006dd6 <LL_RCC_IsActiveFlag_PPRE1>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f1      	beq.n	8007602 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d017      	beq.n	800765a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	4618      	mov	r0, r3
 8007632:	f7ff faf1 	bl	8006c18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007636:	f7fc fdb1 	bl	800419c <HAL_GetTick>
 800763a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800763e:	f7fc fdad 	bl	800419c <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e07a      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007650:	f7ff fbd3 	bl	8006dfa <LL_RCC_IsActiveFlag_PPRE2>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0f1      	beq.n	800763e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d043      	beq.n	80076ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d106      	bne.n	800767c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800766e:	f7ff f891 	bl	8006794 <LL_RCC_HSE_IsReady>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11e      	bne.n	80076b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e064      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b03      	cmp	r3, #3
 8007682:	d106      	bne.n	8007692 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007684:	f7ff fb2c 	bl	8006ce0 <LL_RCC_PLL_IsReady>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d113      	bne.n	80076b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e059      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800769a:	f7ff f9f9 	bl	8006a90 <LL_RCC_MSI_IsReady>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d108      	bne.n	80076b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e04e      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80076a8:	f7ff f8a4 	bl	80067f4 <LL_RCC_HSI_IsReady>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e047      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fa37 	bl	8006b2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c0:	f7fc fd6c 	bl	800419c <HAL_GetTick>
 80076c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c6:	e00a      	b.n	80076de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c8:	f7fc fd68 	bl	800419c <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e033      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076de:	f7ff fa3a 	bl	8006b56 <LL_RCC_GetSysClkSource>
 80076e2:	4602      	mov	r2, r0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d1ec      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ee:	4b18      	ldr	r3, [pc, #96]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0307 	and.w	r3, r3, #7
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d21b      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fc:	4b14      	ldr	r3, [pc, #80]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f023 0207 	bic.w	r2, r3, #7
 8007704:	4912      	ldr	r1, [pc, #72]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770c:	f7fc fd46 	bl	800419c <HAL_GetTick>
 8007710:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007712:	e008      	b.n	8007726 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007714:	f7fc fd42 	bl	800419c <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e00f      	b.n	8007746 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007726:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <HAL_RCC_ClockConfig+0x274>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d1ef      	bne.n	8007714 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8007734:	f7fc f8ba 	bl	80038ac <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007738:	f7fc fd3c 	bl	80041b4 <HAL_GetTickPrio>
 800773c:	4603      	mov	r3, r0
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc fce0 	bl	8004104 <HAL_InitTick>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	58004000 	.word	0x58004000

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	b590      	push	{r4, r7, lr}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775a:	f7ff f9fc 	bl	8006b56 <LL_RCC_GetSysClkSource>
 800775e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007766:	f7ff f9b8 	bl	8006ada <LL_RCC_MSI_GetRange>
 800776a:	4603      	mov	r3, r0
 800776c:	091b      	lsrs	r3, r3, #4
 800776e:	f003 030f 	and.w	r3, r3, #15
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e04a      	b.n	8007812 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b04      	cmp	r3, #4
 8007780:	d102      	bne.n	8007788 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007782:	4b27      	ldr	r3, [pc, #156]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	e044      	b.n	8007812 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b08      	cmp	r3, #8
 800778c:	d10a      	bne.n	80077a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800778e:	f7fe ffb3 	bl	80066f8 <LL_RCC_HSE_IsEnabledDiv2>
 8007792:	4603      	mov	r3, r0
 8007794:	2b01      	cmp	r3, #1
 8007796:	d102      	bne.n	800779e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007798:	4b21      	ldr	r3, [pc, #132]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	e039      	b.n	8007812 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800779e:	4b21      	ldr	r3, [pc, #132]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e036      	b.n	8007812 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80077a4:	f7ff fad3 	bl	8006d4e <LL_RCC_PLL_GetMainSource>
 80077a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d002      	beq.n	80077b6 <HAL_RCC_GetSysClockFreq+0x62>
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d003      	beq.n	80077bc <HAL_RCC_GetSysClockFreq+0x68>
 80077b4:	e00d      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80077b6:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 80077b8:	60bb      	str	r3, [r7, #8]
        break;
 80077ba:	e015      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80077bc:	f7fe ff9c 	bl	80066f8 <LL_RCC_HSE_IsEnabledDiv2>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d102      	bne.n	80077cc <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80077c6:	4b16      	ldr	r3, [pc, #88]	; (8007820 <HAL_RCC_GetSysClockFreq+0xcc>)
 80077c8:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80077ca:	e00d      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80077cc:	4b15      	ldr	r3, [pc, #84]	; (8007824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80077ce:	60bb      	str	r3, [r7, #8]
        break;
 80077d0:	e00a      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80077d2:	f7ff f982 	bl	8006ada <LL_RCC_MSI_GetRange>
 80077d6:	4603      	mov	r3, r0
 80077d8:	091b      	lsrs	r3, r3, #4
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	4a0f      	ldr	r2, [pc, #60]	; (800781c <HAL_RCC_GetSysClockFreq+0xc8>)
 80077e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e4:	60bb      	str	r3, [r7, #8]
        break;
 80077e6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80077e8:	f7ff fa8c 	bl	8006d04 <LL_RCC_PLL_GetN>
 80077ec:	4602      	mov	r2, r0
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	fb03 f402 	mul.w	r4, r3, r2
 80077f4:	f7ff fa9f 	bl	8006d36 <LL_RCC_PLL_GetDivider>
 80077f8:	4603      	mov	r3, r0
 80077fa:	091b      	lsrs	r3, r3, #4
 80077fc:	3301      	adds	r3, #1
 80077fe:	fbb4 f4f3 	udiv	r4, r4, r3
 8007802:	f7ff fa8c 	bl	8006d1e <LL_RCC_PLL_GetR>
 8007806:	4603      	mov	r3, r0
 8007808:	0f5b      	lsrs	r3, r3, #29
 800780a:	3301      	adds	r3, #1
 800780c:	fbb4 f3f3 	udiv	r3, r4, r3
 8007810:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	bd90      	pop	{r4, r7, pc}
 800781c:	0800dd10 	.word	0x0800dd10
 8007820:	00f42400 	.word	0x00f42400
 8007824:	01e84800 	.word	0x01e84800

08007828 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007828:	b598      	push	{r3, r4, r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800782c:	f7ff ff92 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007830:	4604      	mov	r4, r0
 8007832:	f7ff fa05 	bl	8006c40 <LL_RCC_GetAHBPrescaler>
 8007836:	4603      	mov	r3, r0
 8007838:	091b      	lsrs	r3, r3, #4
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	4a03      	ldr	r2, [pc, #12]	; (800784c <HAL_RCC_GetHCLKFreq+0x24>)
 8007840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007844:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd98      	pop	{r3, r4, r7, pc}
 800784c:	0800dcb0 	.word	0x0800dcb0

08007850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007850:	b598      	push	{r3, r4, r7, lr}
 8007852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007854:	f7ff ffe8 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 8007858:	4604      	mov	r4, r0
 800785a:	f7ff fa0b 	bl	8006c74 <LL_RCC_GetAPB1Prescaler>
 800785e:	4603      	mov	r3, r0
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800786c:	f003 031f 	and.w	r3, r3, #31
 8007870:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007874:	4618      	mov	r0, r3
 8007876:	bd98      	pop	{r3, r4, r7, pc}
 8007878:	0800dcf0 	.word	0x0800dcf0

0800787c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800787c:	b598      	push	{r3, r4, r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007880:	f7ff ffd2 	bl	8007828 <HAL_RCC_GetHCLKFreq>
 8007884:	4604      	mov	r4, r0
 8007886:	f7ff fa01 	bl	8006c8c <LL_RCC_GetAPB2Prescaler>
 800788a:	4603      	mov	r3, r0
 800788c:	0adb      	lsrs	r3, r3, #11
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	4a04      	ldr	r2, [pc, #16]	; (80078a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	f003 031f 	and.w	r3, r3, #31
 800789c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	bd98      	pop	{r3, r4, r7, pc}
 80078a4:	0800dcf0 	.word	0x0800dcf0

080078a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2bb0      	cmp	r3, #176	; 0xb0
 80078b4:	d903      	bls.n	80078be <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80078b6:	4b15      	ldr	r3, [pc, #84]	; (800790c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	e007      	b.n	80078ce <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	4a11      	ldr	r2, [pc, #68]	; (800790c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80078c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80078ce:	f7ff f9c3 	bl	8006c58 <LL_RCC_GetAHB4Prescaler>
 80078d2:	4603      	mov	r3, r0
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	4a0d      	ldr	r2, [pc, #52]	; (8007910 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80078dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4a0a      	ldr	r2, [pc, #40]	; (8007914 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	0c9c      	lsrs	r4, r3, #18
 80078f2:	f7fe fef3 	bl	80066dc <HAL_PWREx_GetVoltageRange>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4619      	mov	r1, r3
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 f80c 	bl	8007918 <RCC_SetFlashLatency>
 8007900:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	bd90      	pop	{r4, r7, pc}
 800790a:	bf00      	nop
 800790c:	0800dd10 	.word	0x0800dd10
 8007910:	0800dcb0 	.word	0x0800dcb0
 8007914:	431bde83 	.word	0x431bde83

08007918 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b093      	sub	sp, #76	; 0x4c
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007922:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <RCC_SetFlashLatency+0xf0>)
 8007924:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007928:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800792a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800792e:	4a37      	ldr	r2, [pc, #220]	; (8007a0c <RCC_SetFlashLatency+0xf4>)
 8007930:	f107 031c 	add.w	r3, r7, #28
 8007934:	ca07      	ldmia	r2, {r0, r1, r2}
 8007936:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800793a:	4b35      	ldr	r3, [pc, #212]	; (8007a10 <RCC_SetFlashLatency+0xf8>)
 800793c:	f107 040c 	add.w	r4, r7, #12
 8007940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007946:	2300      	movs	r3, #0
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007950:	d11c      	bne.n	800798c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007952:	2300      	movs	r3, #0
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
 8007956:	e015      	b.n	8007984 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007960:	4413      	add	r3, r2
 8007962:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	429a      	cmp	r2, r3
 800796a:	d808      	bhi.n	800797e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800796c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007974:	4413      	add	r3, r2
 8007976:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800797a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800797c:	e022      	b.n	80079c4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007980:	3301      	adds	r3, #1
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	2b03      	cmp	r3, #3
 8007988:	d9e6      	bls.n	8007958 <RCC_SetFlashLatency+0x40>
 800798a:	e01b      	b.n	80079c4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007990:	e015      	b.n	80079be <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800799a:	4413      	add	r3, r2
 800799c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d808      	bhi.n	80079b8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80079ae:	4413      	add	r3, r2
 80079b0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80079b6:	e005      	b.n	80079c4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80079b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ba:	3301      	adds	r3, #1
 80079bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d9e6      	bls.n	8007992 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80079c4:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <RCC_SetFlashLatency+0xfc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f023 0207 	bic.w	r2, r3, #7
 80079cc:	4911      	ldr	r1, [pc, #68]	; (8007a14 <RCC_SetFlashLatency+0xfc>)
 80079ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079d0:	4313      	orrs	r3, r2
 80079d2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079d4:	f7fc fbe2 	bl	800419c <HAL_GetTick>
 80079d8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80079da:	e008      	b.n	80079ee <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80079dc:	f7fc fbde 	bl	800419c <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d901      	bls.n	80079ee <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e007      	b.n	80079fe <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <RCC_SetFlashLatency+0xfc>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d1ef      	bne.n	80079dc <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	374c      	adds	r7, #76	; 0x4c
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	bf00      	nop
 8007a08:	0800dc04 	.word	0x0800dc04
 8007a0c:	0800dc14 	.word	0x0800dc14
 8007a10:	0800dc20 	.word	0x0800dc20
 8007a14:	58004000 	.word	0x58004000

08007a18 <LL_RCC_LSE_IsEnabled>:
{
 8007a18:	b480      	push	{r7}
 8007a1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <LL_RCC_LSE_IsEnabled+0x18>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <LL_RCC_LSE_IsEnabled+0x1a>
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <LL_RCC_LSE_IsReady>:
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d101      	bne.n	8007a54 <LL_RCC_LSE_IsReady+0x18>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <LL_RCC_LSE_IsReady+0x1a>
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <LL_RCC_MSI_EnablePLLMode>:
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8007a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a6e:	f043 0304 	orr.w	r3, r3, #4
 8007a72:	6013      	str	r3, [r2, #0]
}
 8007a74:	bf00      	nop
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <LL_RCC_SetRFWKPClockSource>:
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <LL_RCC_SetSMPSClockSource>:
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	f023 0203 	bic.w	r2, r3, #3
 8007abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <LL_RCC_SetSMPSPrescaler>:
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <LL_RCC_SetUSARTClockSource>:
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b0a:	f023 0203 	bic.w	r2, r3, #3
 8007b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <LL_RCC_SetLPUARTClockSource>:
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <LL_RCC_SetI2CClockSource>:
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	401a      	ands	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <LL_RCC_SetLPTIMClockSource>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	041b      	lsls	r3, r3, #16
 8007ba2:	43db      	mvns	r3, r3
 8007ba4:	401a      	ands	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <LL_RCC_SetSAIClockSource>:
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <LL_RCC_SetRNGClockSource>:
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bfc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <LL_RCC_SetCLK48ClockSource>:
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_SetUSBClockSource>:
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff ffe3 	bl	8007c18 <LL_RCC_SetCLK48ClockSource>
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <LL_RCC_SetADCClockSource>:
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <LL_RCC_SetRTCClockSource>:
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <LL_RCC_GetRTCClockSource>:
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <LL_RCC_ForceBackupDomainReset>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <LL_RCC_ReleaseBackupDomainReset>:
{
 8007cee:	b480      	push	{r7}
 8007cf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007d06:	bf00      	nop
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <LL_RCC_PLLSAI1_Enable>:
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <LL_RCC_PLLSAI1_Disable>:
{
 8007d2e:	b480      	push	{r7}
 8007d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d40:	6013      	str	r3, [r2, #0]
}
 8007d42:	bf00      	nop
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <LL_RCC_PLLSAI1_IsReady>:
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d5e:	d101      	bne.n	8007d64 <LL_RCC_PLLSAI1_IsReady+0x18>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007d78:	2300      	movs	r3, #0
 8007d7a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d033      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d94:	d00c      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d9a:	d802      	bhi.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d010      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007da0:	e017      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007da6:	d017      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8007da8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007dac:	d016      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007dae:	e010      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dbe:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007dc0:	e00d      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x6e>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f94d 	bl	8008066 <RCCEx_PLLSAI1_ConfigNP>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007dd0:	e005      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	77fb      	strb	r3, [r7, #31]
        break;
 8007dd6:	e002      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007dd8:	bf00      	nop
 8007dda:	e000      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8007ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dde:	7ffb      	ldrb	r3, [r7, #31]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fee9 	bl	8007bc0 <LL_RCC_SetSAIClockSource>
 8007dee:	e001      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	7ffb      	ldrb	r3, [r7, #31]
 8007df2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d046      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007e00:	f7ff ff57 	bl	8007cb2 <LL_RCC_GetRTCClockSource>
 8007e04:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d03c      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007e10:	f7fe fc54 	bl	80066bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7ff ff31 	bl	8007c86 <LL_RCC_SetRTCClockSource>
 8007e24:	e02e      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007e30:	f7ff ff4c 	bl	8007ccc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007e34:	f7ff ff5b 	bl	8007cee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007e50:	f7ff fde2 	bl	8007a18 <LL_RCC_LSE_IsEnabled>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d114      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e5a:	f7fc f99f 	bl	800419c <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007e60:	e00b      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e62:	f7fc f99b 	bl	800419c <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d902      	bls.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	77fb      	strb	r3, [r7, #31]
              break;
 8007e78:	e004      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007e7a:	f7ff fddf 	bl	8007a3c <LL_RCC_LSE_IsReady>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d1ee      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007e84:	7ffb      	ldrb	r3, [r7, #31]
 8007e86:	77bb      	strb	r3, [r7, #30]
 8007e88:	e001      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8a:	7ffb      	ldrb	r3, [r7, #31]
 8007e8c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff fe2b 	bl	8007afa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff fe36 	bl	8007b26 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fe5e 	bl	8007b8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fe53 	bl	8007b8c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7ff fe2b 	bl	8007b52 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d004      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7ff fe20 	bl	8007b52 <LL_RCC_SetI2CClockSource>
  }
#endif

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d022      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fe8e 	bl	8007c44 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f30:	d107      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f40:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f4a:	d10b      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f8e3 	bl	800811c <RCCEx_PLLSAI1_ConfigNQ>
 8007f56:	4603      	mov	r3, r0
 8007f58:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      {
        /* set overall return value */
        status = ret;
 8007f60:	7ffb      	ldrb	r3, [r7, #31]
 8007f62:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02b      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f78:	d008      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f82:	d003      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fe2b 	bl	8007bec <LL_RCC_SetRNGClockSource>
 8007f96:	e00a      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f7ff fe22 	bl	8007bec <LL_RCC_SetRNGClockSource>
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fe35 	bl	8007c18 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d022      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fe3e 	bl	8007c5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe6:	d107      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d10b      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f8e3 	bl	80081d2 <RCCEx_PLLSAI1_ConfigNR>
 800800c:	4603      	mov	r3, r0
 800800e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008010:	7ffb      	ldrb	r3, [r7, #31]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      {
        /* set overall return value */
        status = ret;
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	77bb      	strb	r3, [r7, #30]
    }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	4618      	mov	r0, r3
 800802c:	f7ff fd27 	bl	8007a7e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d009      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff fd46 	bl	8007ad2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fd2d 	bl	8007aaa <LL_RCC_SetSMPSClockSource>
  }
#endif

  return status;
 8008050:	7fbb      	ldrb	r3, [r7, #30]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3720      	adds	r7, #32
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800805e:	f7ff fcff 	bl	8007a60 <LL_RCC_MSI_EnablePLLMode>
}
 8008062:	bf00      	nop
 8008064:	bd80      	pop	{r7, pc}

08008066 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008072:	f7ff fe5c 	bl	8007d2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008076:	f7fc f891 	bl	800419c <HAL_GetTick>
 800807a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800807c:	e009      	b.n	8008092 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800807e:	f7fc f88d 	bl	800419c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d902      	bls.n	8008092 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	73fb      	strb	r3, [r7, #15]
      break;
 8008090:	e004      	b.n	800809c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008092:	f7ff fe5b 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f0      	bne.n	800807e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d137      	bne.n	8008112 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80080a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080b6:	4313      	orrs	r3, r2
 80080b8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80080ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080cc:	4313      	orrs	r3, r2
 80080ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80080d0:	f7ff fe1e 	bl	8007d10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d4:	f7fc f862 	bl	800419c <HAL_GetTick>
 80080d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80080da:	e009      	b.n	80080f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080dc:	f7fc f85e 	bl	800419c <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d902      	bls.n	80080f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
        break;
 80080ee:	e004      	b.n	80080fa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80080f0:	f7ff fe2c 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d1f0      	bne.n	80080dc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d108      	bne.n	8008112 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800810e:	4313      	orrs	r3, r2
 8008110:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008112:	7bfb      	ldrb	r3, [r7, #15]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008128:	f7ff fe01 	bl	8007d2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800812c:	f7fc f836 	bl	800419c <HAL_GetTick>
 8008130:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008132:	e009      	b.n	8008148 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008134:	f7fc f832 	bl	800419c <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d902      	bls.n	8008148 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	73fb      	strb	r3, [r7, #15]
      break;
 8008146:	e004      	b.n	8008152 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008148:	f7ff fe00 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1f0      	bne.n	8008134 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d137      	bne.n	80081c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800816c:	4313      	orrs	r3, r2
 800816e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008182:	4313      	orrs	r3, r2
 8008184:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008186:	f7ff fdc3 	bl	8007d10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7fc f807 	bl	800419c <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008190:	e009      	b.n	80081a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008192:	f7fc f803 	bl	800419c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d902      	bls.n	80081a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	73fb      	strb	r3, [r7, #15]
        break;
 80081a4:	e004      	b.n	80081b0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081a6:	f7ff fdd1 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d1f0      	bne.n	8008192 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d108      	bne.n	80081c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081c4:	4313      	orrs	r3, r2
 80081c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80081de:	f7ff fda6 	bl	8007d2e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081e2:	f7fb ffdb 	bl	800419c <HAL_GetTick>
 80081e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081e8:	e009      	b.n	80081fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081ea:	f7fb ffd7 	bl	800419c <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d902      	bls.n	80081fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	e004      	b.n	8008208 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081fe:	f7ff fda5 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1f0      	bne.n	80081ea <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d137      	bne.n	800827e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800820e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008222:	4313      	orrs	r3, r2
 8008224:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008238:	4313      	orrs	r3, r2
 800823a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800823c:	f7ff fd68 	bl	8007d10 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008240:	f7fb ffac 	bl	800419c <HAL_GetTick>
 8008244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008246:	e009      	b.n	800825c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008248:	f7fb ffa8 	bl	800419c <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d902      	bls.n	800825c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
        break;
 800825a:	e004      	b.n	8008266 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800825c:	f7ff fd76 	bl	8007d4c <LL_RCC_PLLSAI1_IsReady>
 8008260:	4603      	mov	r3, r0
 8008262:	2b01      	cmp	r3, #1
 8008264:	d1f0      	bne.n	8008248 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d108      	bne.n	800827e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800826c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008270:	691a      	ldr	r2, [r3, #16]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e090      	b.n	80083bc <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fb f8f4 	bl	800349c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	22ca      	movs	r2, #202	; 0xca
 80082c2:	625a      	str	r2, [r3, #36]	; 0x24
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2253      	movs	r2, #83	; 0x53
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f89f 	bl	8008410 <RTC_EnterInitMode>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d009      	beq.n	80082ec <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2204      	movs	r2, #4
 80082e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e067      	b.n	80083bc <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6899      	ldr	r1, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	68d2      	ldr	r2, [r2, #12]
 8008326:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6919      	ldr	r1, [r3, #16]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	041a      	lsls	r2, r3, #16
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800834a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0203 	bic.w	r2, r2, #3
 800835a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d113      	bne.n	80083aa <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f81e 	bl	80083c4 <HAL_RTC_WaitForSynchro>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00d      	beq.n	80083aa <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2204      	movs	r2, #4
 800839a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e008      	b.n	80083bc <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80083ba:	2300      	movs	r3, #0
  }
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80083da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80083dc:	f7fb fede 	bl	800419c <HAL_GetTick>
 80083e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083e2:	e009      	b.n	80083f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083e4:	f7fb feda 	bl	800419c <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083f2:	d901      	bls.n	80083f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e007      	b.n	8008408 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0ee      	beq.n	80083e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d119      	bne.n	800845a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008430:	f7fb feb4 	bl	800419c <HAL_GetTick>
 8008434:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008436:	e009      	b.n	800844c <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008438:	f7fb feb0 	bl	800419c <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008446:	d901      	bls.n	800844c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e007      	b.n	800845c <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ee      	beq.n	8008438 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e01d      	b.n	80084b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fb f818 	bl	80034c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f000 fd16 	bl	8008ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b082      	sub	sp, #8
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e01d      	b.n	8008508 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f815 	bl	8008510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3304      	adds	r3, #4
 80084f6:	4619      	mov	r1, r3
 80084f8:	4610      	mov	r0, r2
 80084fa:	f000 fceb 	bl	8008ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
 8008530:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d101      	bne.n	8008542 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800853e:	2302      	movs	r3, #2
 8008540:	e0fc      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b01      	cmp	r3, #1
 800854c:	d10b      	bne.n	8008566 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d104      	bne.n	800855e <HAL_TIM_PWM_Start_DMA+0x3a>
 8008554:	887b      	ldrh	r3, [r7, #2]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e0ee      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2202      	movs	r2, #2
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b0c      	cmp	r3, #12
 800856a:	f200 80ad 	bhi.w	80086c8 <HAL_TIM_PWM_Start_DMA+0x1a4>
 800856e:	a201      	add	r2, pc, #4	; (adr r2, 8008574 <HAL_TIM_PWM_Start_DMA+0x50>)
 8008570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008574:	080085a9 	.word	0x080085a9
 8008578:	080086c9 	.word	0x080086c9
 800857c:	080086c9 	.word	0x080086c9
 8008580:	080086c9 	.word	0x080086c9
 8008584:	080085f1 	.word	0x080085f1
 8008588:	080086c9 	.word	0x080086c9
 800858c:	080086c9 	.word	0x080086c9
 8008590:	080086c9 	.word	0x080086c9
 8008594:	08008639 	.word	0x08008639
 8008598:	080086c9 	.word	0x080086c9
 800859c:	080086c9 	.word	0x080086c9
 80085a0:	080086c9 	.word	0x080086c9
 80085a4:	08008681 	.word	0x08008681
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	4a65      	ldr	r2, [pc, #404]	; (8008744 <HAL_TIM_PWM_Start_DMA+0x220>)
 80085ae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	4a64      	ldr	r2, [pc, #400]	; (8008748 <HAL_TIM_PWM_Start_DMA+0x224>)
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	4a63      	ldr	r2, [pc, #396]	; (800874c <HAL_TIM_PWM_Start_DMA+0x228>)
 80085be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3334      	adds	r3, #52	; 0x34
 80085cc:	461a      	mov	r2, r3
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	f7fc f85e 	bl	8004690 <HAL_DMA_Start_IT>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0ae      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ec:	60da      	str	r2, [r3, #12]
      break;
 80085ee:	e06c      	b.n	80086ca <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	4a53      	ldr	r2, [pc, #332]	; (8008744 <HAL_TIM_PWM_Start_DMA+0x220>)
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	4a52      	ldr	r2, [pc, #328]	; (8008748 <HAL_TIM_PWM_Start_DMA+0x224>)
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	4a51      	ldr	r2, [pc, #324]	; (800874c <HAL_TIM_PWM_Start_DMA+0x228>)
 8008606:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3338      	adds	r3, #56	; 0x38
 8008614:	461a      	mov	r2, r3
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	f7fc f83a 	bl	8004690 <HAL_DMA_Start_IT>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e08a      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008634:	60da      	str	r2, [r3, #12]
      break;
 8008636:	e048      	b.n	80086ca <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	4a41      	ldr	r2, [pc, #260]	; (8008744 <HAL_TIM_PWM_Start_DMA+0x220>)
 800863e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	4a40      	ldr	r2, [pc, #256]	; (8008748 <HAL_TIM_PWM_Start_DMA+0x224>)
 8008646:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	4a3f      	ldr	r2, [pc, #252]	; (800874c <HAL_TIM_PWM_Start_DMA+0x228>)
 800864e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008654:	6879      	ldr	r1, [r7, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	333c      	adds	r3, #60	; 0x3c
 800865c:	461a      	mov	r2, r3
 800865e:	887b      	ldrh	r3, [r7, #2]
 8008660:	f7fc f816 	bl	8004690 <HAL_DMA_Start_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e066      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867c:	60da      	str	r2, [r3, #12]
      break;
 800867e:	e024      	b.n	80086ca <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	4a2f      	ldr	r2, [pc, #188]	; (8008744 <HAL_TIM_PWM_Start_DMA+0x220>)
 8008686:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	4a2e      	ldr	r2, [pc, #184]	; (8008748 <HAL_TIM_PWM_Start_DMA+0x224>)
 800868e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	4a2d      	ldr	r2, [pc, #180]	; (800874c <HAL_TIM_PWM_Start_DMA+0x228>)
 8008696:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3340      	adds	r3, #64	; 0x40
 80086a4:	461a      	mov	r2, r3
 80086a6:	887b      	ldrh	r3, [r7, #2]
 80086a8:	f7fb fff2 	bl	8004690 <HAL_DMA_Start_IT>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e042      	b.n	800873c <HAL_TIM_PWM_Start_DMA+0x218>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68da      	ldr	r2, [r3, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086c4:	60da      	str	r2, [r3, #12]
      break;
 80086c6:	e000      	b.n	80086ca <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80086c8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2201      	movs	r2, #1
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 ff7c 	bl	80095d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a1c      	ldr	r2, [pc, #112]	; (8008750 <HAL_TIM_PWM_Start_DMA+0x22c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d009      	beq.n	80086f6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1b      	ldr	r2, [pc, #108]	; (8008754 <HAL_TIM_PWM_Start_DMA+0x230>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d004      	beq.n	80086f6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a19      	ldr	r2, [pc, #100]	; (8008758 <HAL_TIM_PWM_Start_DMA+0x234>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d101      	bne.n	80086fa <HAL_TIM_PWM_Start_DMA+0x1d6>
 80086f6:	2301      	movs	r3, #1
 80086f8:	e000      	b.n	80086fc <HAL_TIM_PWM_Start_DMA+0x1d8>
 80086fa:	2300      	movs	r3, #0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d007      	beq.n	8008710 <HAL_TIM_PWM_Start_DMA+0x1ec>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800870e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	4b11      	ldr	r3, [pc, #68]	; (800875c <HAL_TIM_PWM_Start_DMA+0x238>)
 8008718:	4013      	ands	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b06      	cmp	r3, #6
 8008720:	d00b      	beq.n	800873a <HAL_TIM_PWM_Start_DMA+0x216>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008728:	d007      	beq.n	800873a <HAL_TIM_PWM_Start_DMA+0x216>
  {
    __HAL_TIM_ENABLE(htim);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0201 	orr.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	08008df3 	.word	0x08008df3
 8008748:	08008e63 	.word	0x08008e63
 800874c:	08008dcf 	.word	0x08008dcf
 8008750:	40012c00 	.word	0x40012c00
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800
 800875c:	00010007 	.word	0x00010007

08008760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b02      	cmp	r3, #2
 8008774:	d122      	bne.n	80087bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0302 	and.w	r3, r3, #2
 8008780:	2b02      	cmp	r3, #2
 8008782:	d11b      	bne.n	80087bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f06f 0202 	mvn.w	r2, #2
 800878c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fae1 	bl	8008d6a <HAL_TIM_IC_CaptureCallback>
 80087a8:	e005      	b.n	80087b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fad3 	bl	8008d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fae4 	bl	8008d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d122      	bne.n	8008810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d11b      	bne.n	8008810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0204 	mvn.w	r2, #4
 80087e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d003      	beq.n	80087fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fab7 	bl	8008d6a <HAL_TIM_IC_CaptureCallback>
 80087fc:	e005      	b.n	800880a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 faa9 	bl	8008d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 faba 	bl	8008d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b08      	cmp	r3, #8
 800881c:	d122      	bne.n	8008864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b08      	cmp	r3, #8
 800882a:	d11b      	bne.n	8008864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0208 	mvn.w	r2, #8
 8008834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2204      	movs	r2, #4
 800883a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa8d 	bl	8008d6a <HAL_TIM_IC_CaptureCallback>
 8008850:	e005      	b.n	800885e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa7f 	bl	8008d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa90 	bl	8008d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	f003 0310 	and.w	r3, r3, #16
 800886e:	2b10      	cmp	r3, #16
 8008870:	d122      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f003 0310 	and.w	r3, r3, #16
 800887c:	2b10      	cmp	r3, #16
 800887e:	d11b      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f06f 0210 	mvn.w	r2, #16
 8008888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2208      	movs	r2, #8
 800888e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800889a:	2b00      	cmp	r3, #0
 800889c:	d003      	beq.n	80088a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa63 	bl	8008d6a <HAL_TIM_IC_CaptureCallback>
 80088a4:	e005      	b.n	80088b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fa55 	bl	8008d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fa66 	bl	8008d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d10e      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d107      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0201 	mvn.w	r2, #1
 80088dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa2f 	bl	8008d42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d10e      	bne.n	8008910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d107      	bne.n	8008910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 ff68 	bl	80097e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800891e:	d10e      	bne.n	800893e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b80      	cmp	r3, #128	; 0x80
 800892c:	d107      	bne.n	800893e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ff5b 	bl	80097f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b40      	cmp	r3, #64	; 0x40
 800894a:	d10e      	bne.n	800896a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b40      	cmp	r3, #64	; 0x40
 8008958:	d107      	bne.n	800896a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 fa1e 	bl	8008da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b20      	cmp	r3, #32
 8008976:	d10e      	bne.n	8008996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	d107      	bne.n	8008996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f06f 0220 	mvn.w	r2, #32
 800898e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 ff1b 	bl	80097cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e105      	b.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b14      	cmp	r3, #20
 80089ce:	f200 80f0 	bhi.w	8008bb2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80089d2:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008bb3 	.word	0x08008bb3
 80089e0:	08008bb3 	.word	0x08008bb3
 80089e4:	08008bb3 	.word	0x08008bb3
 80089e8:	08008a6d 	.word	0x08008a6d
 80089ec:	08008bb3 	.word	0x08008bb3
 80089f0:	08008bb3 	.word	0x08008bb3
 80089f4:	08008bb3 	.word	0x08008bb3
 80089f8:	08008aaf 	.word	0x08008aaf
 80089fc:	08008bb3 	.word	0x08008bb3
 8008a00:	08008bb3 	.word	0x08008bb3
 8008a04:	08008bb3 	.word	0x08008bb3
 8008a08:	08008aef 	.word	0x08008aef
 8008a0c:	08008bb3 	.word	0x08008bb3
 8008a10:	08008bb3 	.word	0x08008bb3
 8008a14:	08008bb3 	.word	0x08008bb3
 8008a18:	08008b31 	.word	0x08008b31
 8008a1c:	08008bb3 	.word	0x08008bb3
 8008a20:	08008bb3 	.word	0x08008bb3
 8008a24:	08008bb3 	.word	0x08008bb3
 8008a28:	08008b71 	.word	0x08008b71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fab2 	bl	8008f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 0208 	orr.w	r2, r2, #8
 8008a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699a      	ldr	r2, [r3, #24]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0204 	bic.w	r2, r2, #4
 8008a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6999      	ldr	r1, [r3, #24]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	691a      	ldr	r2, [r3, #16]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	619a      	str	r2, [r3, #24]
      break;
 8008a6a:	e0a3      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fb0e 	bl	8009094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6999      	ldr	r1, [r3, #24]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	021a      	lsls	r2, r3, #8
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	619a      	str	r2, [r3, #24]
      break;
 8008aac:	e082      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fb67 	bl	8009188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69da      	ldr	r2, [r3, #28]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f042 0208 	orr.w	r2, r2, #8
 8008ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69da      	ldr	r2, [r3, #28]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 0204 	bic.w	r2, r2, #4
 8008ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69d9      	ldr	r1, [r3, #28]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	61da      	str	r2, [r3, #28]
      break;
 8008aec:	e062      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68b9      	ldr	r1, [r7, #8]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 fbbf 	bl	8009278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69da      	ldr	r2, [r3, #28]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69d9      	ldr	r1, [r3, #28]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	021a      	lsls	r2, r3, #8
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	61da      	str	r2, [r3, #28]
      break;
 8008b2e:	e041      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fbfc 	bl	8009334 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f022 0204 	bic.w	r2, r2, #4
 8008b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	691a      	ldr	r2, [r3, #16]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b6e:	e021      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fc34 	bl	80093e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	021a      	lsls	r2, r3, #8
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008bb0:	e000      	b.n	8008bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008bb2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop

08008bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d101      	bne.n	8008be8 <HAL_TIM_ConfigClockSource+0x18>
 8008be4:	2302      	movs	r3, #2
 8008be6:	e0a8      	b.n	8008d3a <HAL_TIM_ConfigClockSource+0x16a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d067      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x124>
 8008c24:	2b40      	cmp	r3, #64	; 0x40
 8008c26:	d80b      	bhi.n	8008c40 <HAL_TIM_ConfigClockSource+0x70>
 8008c28:	2b10      	cmp	r3, #16
 8008c2a:	d073      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x144>
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d802      	bhi.n	8008c36 <HAL_TIM_ConfigClockSource+0x66>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d06f      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c34:	e078      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	d06c      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x144>
 8008c3a:	2b30      	cmp	r3, #48	; 0x30
 8008c3c:	d06a      	beq.n	8008d14 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008c3e:	e073      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c40:	2b70      	cmp	r3, #112	; 0x70
 8008c42:	d00d      	beq.n	8008c60 <HAL_TIM_ConfigClockSource+0x90>
 8008c44:	2b70      	cmp	r3, #112	; 0x70
 8008c46:	d804      	bhi.n	8008c52 <HAL_TIM_ConfigClockSource+0x82>
 8008c48:	2b50      	cmp	r3, #80	; 0x50
 8008c4a:	d033      	beq.n	8008cb4 <HAL_TIM_ConfigClockSource+0xe4>
 8008c4c:	2b60      	cmp	r3, #96	; 0x60
 8008c4e:	d041      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008c50:	e06a      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c56:	d066      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x156>
 8008c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c5c:	d017      	beq.n	8008c8e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008c5e:	e063      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f000 fc8e 	bl	8009590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	609a      	str	r2, [r3, #8]
      break;
 8008c8c:	e04c      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	6899      	ldr	r1, [r3, #8]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f000 fc77 	bl	8009590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cb0:	609a      	str	r2, [r3, #8]
      break;
 8008cb2:	e039      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	6859      	ldr	r1, [r3, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f000 fbe9 	bl	8009498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2150      	movs	r1, #80	; 0x50
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fc42 	bl	8009556 <TIM_ITRx_SetConfig>
      break;
 8008cd2:	e029      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f000 fc08 	bl	80094f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2160      	movs	r1, #96	; 0x60
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fc32 	bl	8009556 <TIM_ITRx_SetConfig>
      break;
 8008cf2:	e019      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	461a      	mov	r2, r3
 8008d02:	f000 fbc9 	bl	8009498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2140      	movs	r1, #64	; 0x40
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fc22 	bl	8009556 <TIM_ITRx_SetConfig>
      break;
 8008d12:	e009      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f000 fc19 	bl	8009556 <TIM_ITRx_SetConfig>
      break;
 8008d24:	e000      	b.n	8008d28 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008d26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008d4a:	bf00      	nop
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b083      	sub	sp, #12
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr

08008d6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7ff ffe8 	bl	8008dba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b084      	sub	sp, #16
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfe:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d103      	bne.n	8008e1a <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	771a      	strb	r2, [r3, #28]
 8008e18:	e019      	b.n	8008e4e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d103      	bne.n	8008e2c <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2202      	movs	r2, #2
 8008e28:	771a      	strb	r2, [r3, #28]
 8008e2a:	e010      	b.n	8008e4e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d103      	bne.n	8008e3e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	771a      	strb	r2, [r3, #28]
 8008e3c:	e007      	b.n	8008e4e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d102      	bne.n	8008e4e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff ff95 	bl	8008d7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	771a      	strb	r2, [r3, #28]
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d103      	bne.n	8008e8a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	771a      	strb	r2, [r3, #28]
 8008e88:	e019      	b.n	8008ebe <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d103      	bne.n	8008e9c <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2202      	movs	r2, #2
 8008e98:	771a      	strb	r2, [r3, #28]
 8008e9a:	e010      	b.n	8008ebe <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d103      	bne.n	8008eae <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	771a      	strb	r2, [r3, #28]
 8008eac:	e007      	b.n	8008ebe <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d102      	bne.n	8008ebe <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff ff67 	bl	8008d92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	771a      	strb	r2, [r3, #28]
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a2a      	ldr	r2, [pc, #168]	; (8008f90 <TIM_Base_SetConfig+0xbc>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d003      	beq.n	8008ef4 <TIM_Base_SetConfig+0x20>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ef2:	d108      	bne.n	8008f06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <TIM_Base_SetConfig+0xbc>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00b      	beq.n	8008f26 <TIM_Base_SetConfig+0x52>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f14:	d007      	beq.n	8008f26 <TIM_Base_SetConfig+0x52>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <TIM_Base_SetConfig+0xc0>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d003      	beq.n	8008f26 <TIM_Base_SetConfig+0x52>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a1d      	ldr	r2, [pc, #116]	; (8008f98 <TIM_Base_SetConfig+0xc4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d108      	bne.n	8008f38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0c      	ldr	r2, [pc, #48]	; (8008f90 <TIM_Base_SetConfig+0xbc>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d007      	beq.n	8008f74 <TIM_Base_SetConfig+0xa0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <TIM_Base_SetConfig+0xc0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d003      	beq.n	8008f74 <TIM_Base_SetConfig+0xa0>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <TIM_Base_SetConfig+0xc4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d103      	bne.n	8008f7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	615a      	str	r2, [r3, #20]
}
 8008f82:	bf00      	nop
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40012c00 	.word	0x40012c00
 8008f94:	40014400 	.word	0x40014400
 8008f98:	40014800 	.word	0x40014800

08008f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	f023 0201 	bic.w	r2, r3, #1
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0303 	bic.w	r3, r3, #3
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f023 0302 	bic.w	r3, r3, #2
 8008fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a24      	ldr	r2, [pc, #144]	; (8009088 <TIM_OC1_SetConfig+0xec>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d007      	beq.n	800900c <TIM_OC1_SetConfig+0x70>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a23      	ldr	r2, [pc, #140]	; (800908c <TIM_OC1_SetConfig+0xf0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d003      	beq.n	800900c <TIM_OC1_SetConfig+0x70>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a22      	ldr	r2, [pc, #136]	; (8009090 <TIM_OC1_SetConfig+0xf4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d10c      	bne.n	8009026 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	f023 0308 	bic.w	r3, r3, #8
 8009012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a17      	ldr	r2, [pc, #92]	; (8009088 <TIM_OC1_SetConfig+0xec>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d007      	beq.n	800903e <TIM_OC1_SetConfig+0xa2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a17      	ldr	r2, [pc, #92]	; (8009090 <TIM_OC1_SetConfig+0xf4>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d003      	beq.n	800903e <TIM_OC1_SetConfig+0xa2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a14      	ldr	r2, [pc, #80]	; (800908c <TIM_OC1_SetConfig+0xf0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d111      	bne.n	8009062 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800904c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	695b      	ldr	r3, [r3, #20]
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	621a      	str	r2, [r3, #32]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40012c00 	.word	0x40012c00
 800908c:	40014800 	.word	0x40014800
 8009090:	40014400 	.word	0x40014400

08009094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	f023 0210 	bic.w	r2, r3, #16
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f023 0320 	bic.w	r3, r3, #32
 80090e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a22      	ldr	r2, [pc, #136]	; (800917c <TIM_OC2_SetConfig+0xe8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d10d      	bne.n	8009114 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a19      	ldr	r2, [pc, #100]	; (800917c <TIM_OC2_SetConfig+0xe8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d007      	beq.n	800912c <TIM_OC2_SetConfig+0x98>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <TIM_OC2_SetConfig+0xec>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d003      	beq.n	800912c <TIM_OC2_SetConfig+0x98>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <TIM_OC2_SetConfig+0xf0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d113      	bne.n	8009154 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009132:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800913a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4313      	orrs	r3, r2
 8009152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	693a      	ldr	r2, [r7, #16]
 8009158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	621a      	str	r2, [r3, #32]
}
 800916e:	bf00      	nop
 8009170:	371c      	adds	r7, #28
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40012c00 	.word	0x40012c00
 8009180:	40014400 	.word	0x40014400
 8009184:	40014800 	.word	0x40014800

08009188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	4313      	orrs	r3, r2
 80091e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a21      	ldr	r2, [pc, #132]	; (800926c <TIM_OC3_SetConfig+0xe4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10d      	bne.n	8009206 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	697a      	ldr	r2, [r7, #20]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a18      	ldr	r2, [pc, #96]	; (800926c <TIM_OC3_SetConfig+0xe4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d007      	beq.n	800921e <TIM_OC3_SetConfig+0x96>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a17      	ldr	r2, [pc, #92]	; (8009270 <TIM_OC3_SetConfig+0xe8>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d003      	beq.n	800921e <TIM_OC3_SetConfig+0x96>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a16      	ldr	r2, [pc, #88]	; (8009274 <TIM_OC3_SetConfig+0xec>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d113      	bne.n	8009246 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800922c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	011b      	lsls	r3, r3, #4
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	4313      	orrs	r3, r2
 8009244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685a      	ldr	r2, [r3, #4]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	621a      	str	r2, [r3, #32]
}
 8009260:	bf00      	nop
 8009262:	371c      	adds	r7, #28
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	40012c00 	.word	0x40012c00
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800

08009278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	031b      	lsls	r3, r3, #12
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a14      	ldr	r2, [pc, #80]	; (8009328 <TIM_OC4_SetConfig+0xb0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d007      	beq.n	80092ec <TIM_OC4_SetConfig+0x74>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a13      	ldr	r2, [pc, #76]	; (800932c <TIM_OC4_SetConfig+0xb4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_OC4_SetConfig+0x74>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a12      	ldr	r2, [pc, #72]	; (8009330 <TIM_OC4_SetConfig+0xb8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d109      	bne.n	8009300 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	019b      	lsls	r3, r3, #6
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	621a      	str	r2, [r3, #32]
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	40012c00 	.word	0x40012c00
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800

08009334 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a1b      	ldr	r3, [r3, #32]
 800934e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a13      	ldr	r2, [pc, #76]	; (80093d8 <TIM_OC5_SetConfig+0xa4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d007      	beq.n	800939e <TIM_OC5_SetConfig+0x6a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a12      	ldr	r2, [pc, #72]	; (80093dc <TIM_OC5_SetConfig+0xa8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <TIM_OC5_SetConfig+0x6a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <TIM_OC5_SetConfig+0xac>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d109      	bne.n	80093b2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	021b      	lsls	r3, r3, #8
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	621a      	str	r2, [r3, #32]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40014400 	.word	0x40014400
 80093e0:	40014800 	.word	0x40014800

080093e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800942a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	051b      	lsls	r3, r3, #20
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	4313      	orrs	r3, r2
 8009436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a14      	ldr	r2, [pc, #80]	; (800948c <TIM_OC6_SetConfig+0xa8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d007      	beq.n	8009450 <TIM_OC6_SetConfig+0x6c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a13      	ldr	r2, [pc, #76]	; (8009490 <TIM_OC6_SetConfig+0xac>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d003      	beq.n	8009450 <TIM_OC6_SetConfig+0x6c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a12      	ldr	r2, [pc, #72]	; (8009494 <TIM_OC6_SetConfig+0xb0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d109      	bne.n	8009464 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009456:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	029b      	lsls	r3, r3, #10
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	693a      	ldr	r2, [r7, #16]
 800947c:	621a      	str	r2, [r3, #32]
}
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	40012c00 	.word	0x40012c00
 8009490:	40014400 	.word	0x40014400
 8009494:	40014800 	.word	0x40014800

08009498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	f023 0201 	bic.w	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f023 030a 	bic.w	r3, r3, #10
 80094d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b087      	sub	sp, #28
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	f023 0210 	bic.w	r2, r3, #16
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	031b      	lsls	r3, r3, #12
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4313      	orrs	r3, r2
 800952a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	621a      	str	r2, [r3, #32]
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009556:	b480      	push	{r7}
 8009558:	b085      	sub	sp, #20
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800956c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	f043 0307 	orr.w	r3, r3, #7
 800957c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	609a      	str	r2, [r3, #8]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	021a      	lsls	r2, r3, #8
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	431a      	orrs	r2, r3
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	609a      	str	r2, [r3, #8]
}
 80095c4:	bf00      	nop
 80095c6:	371c      	adds	r7, #28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	f003 031f 	and.w	r3, r3, #31
 80095e2:	2201      	movs	r2, #1
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6a1a      	ldr	r2, [r3, #32]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a1a      	ldr	r2, [r3, #32]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	f003 031f 	and.w	r3, r3, #31
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	fa01 f303 	lsl.w	r3, r1, r3
 8009608:	431a      	orrs	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	621a      	str	r2, [r3, #32]
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009630:	2302      	movs	r3, #2
 8009632:	e04a      	b.n	80096ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1f      	ldr	r2, [pc, #124]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d108      	bne.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009664:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a12      	ldr	r2, [pc, #72]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d004      	beq.n	800969e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969c:	d10c      	bne.n	80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	40012c00 	.word	0x40012c00

080096dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e060      	b.n	80097ba <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	4313      	orrs	r3, r2
 8009760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d115      	bne.n	80097a8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	051b      	lsls	r3, r3, #20
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40012c00 	.word	0x40012c00

080097cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <LL_RCC_GetUSARTClockSource>:
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4013      	ands	r3, r2
}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <LL_RCC_GetLPUARTClockSource>:
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009834:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4013      	ands	r3, r2
}
 800983c:	4618      	mov	r0, r3
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e042      	b.n	80098e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7f9 fea7 	bl	80035c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2224      	movs	r2, #36	; 0x24
 8009876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0201 	bic.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f82c 	bl	80098e8 <UART_SetConfig>
 8009890:	4603      	mov	r3, r0
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e022      	b.n	80098e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 f884 	bl	800a9b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f90b 	bl	800aaf4 <UART_CheckIdleState>
 80098de:	4603      	mov	r3, r0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80098ec:	b08a      	sub	sp, #40	; 0x28
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	4313      	orrs	r3, r2
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800991a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991c:	4313      	orrs	r3, r2
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	4ba4      	ldr	r3, [pc, #656]	; (8009bb8 <UART_SetConfig+0x2d0>)
 8009928:	4013      	ands	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	6812      	ldr	r2, [r2, #0]
 800992e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009930:	430b      	orrs	r3, r1
 8009932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68da      	ldr	r2, [r3, #12]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a99      	ldr	r2, [pc, #612]	; (8009bbc <UART_SetConfig+0x2d4>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d004      	beq.n	8009964 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009960:	4313      	orrs	r3, r2
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800996e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009978:	430b      	orrs	r3, r1
 800997a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009982:	f023 010f 	bic.w	r1, r3, #15
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a8a      	ldr	r2, [pc, #552]	; (8009bc0 <UART_SetConfig+0x2d8>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d126      	bne.n	80099ea <UART_SetConfig+0x102>
 800999c:	2003      	movs	r0, #3
 800999e:	f7ff ff33 	bl	8009808 <LL_RCC_GetUSARTClockSource>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d81b      	bhi.n	80099e0 <UART_SetConfig+0xf8>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <UART_SetConfig+0xc8>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099c1 	.word	0x080099c1
 80099b4:	080099d1 	.word	0x080099d1
 80099b8:	080099c9 	.word	0x080099c9
 80099bc:	080099d9 	.word	0x080099d9
 80099c0:	2301      	movs	r3, #1
 80099c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099c6:	e042      	b.n	8009a4e <UART_SetConfig+0x166>
 80099c8:	2302      	movs	r3, #2
 80099ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099ce:	e03e      	b.n	8009a4e <UART_SetConfig+0x166>
 80099d0:	2304      	movs	r3, #4
 80099d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099d6:	e03a      	b.n	8009a4e <UART_SetConfig+0x166>
 80099d8:	2308      	movs	r3, #8
 80099da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099de:	e036      	b.n	8009a4e <UART_SetConfig+0x166>
 80099e0:	2310      	movs	r3, #16
 80099e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80099e6:	bf00      	nop
 80099e8:	e031      	b.n	8009a4e <UART_SetConfig+0x166>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a73      	ldr	r2, [pc, #460]	; (8009bbc <UART_SetConfig+0x2d4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d129      	bne.n	8009a48 <UART_SetConfig+0x160>
 80099f4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80099f8:	f7ff ff16 	bl	8009828 <LL_RCC_GetLPUARTClockSource>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a02:	d014      	beq.n	8009a2e <UART_SetConfig+0x146>
 8009a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a08:	d802      	bhi.n	8009a10 <UART_SetConfig+0x128>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <UART_SetConfig+0x136>
 8009a0e:	e016      	b.n	8009a3e <UART_SetConfig+0x156>
 8009a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a14:	d007      	beq.n	8009a26 <UART_SetConfig+0x13e>
 8009a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a1a:	d00c      	beq.n	8009a36 <UART_SetConfig+0x14e>
 8009a1c:	e00f      	b.n	8009a3e <UART_SetConfig+0x156>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a24:	e013      	b.n	8009a4e <UART_SetConfig+0x166>
 8009a26:	2302      	movs	r3, #2
 8009a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a2c:	e00f      	b.n	8009a4e <UART_SetConfig+0x166>
 8009a2e:	2304      	movs	r3, #4
 8009a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a34:	e00b      	b.n	8009a4e <UART_SetConfig+0x166>
 8009a36:	2308      	movs	r3, #8
 8009a38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a3c:	e007      	b.n	8009a4e <UART_SetConfig+0x166>
 8009a3e:	2310      	movs	r3, #16
 8009a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009a44:	bf00      	nop
 8009a46:	e002      	b.n	8009a4e <UART_SetConfig+0x166>
 8009a48:	2310      	movs	r3, #16
 8009a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a5a      	ldr	r2, [pc, #360]	; (8009bbc <UART_SetConfig+0x2d4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	f040 8428 	bne.w	800a2aa <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	f200 8171 	bhi.w	8009d46 <UART_SetConfig+0x45e>
 8009a64:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <UART_SetConfig+0x184>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009a91 	.word	0x08009a91
 8009a70:	08009d47 	.word	0x08009d47
 8009a74:	08009b33 	.word	0x08009b33
 8009a78:	08009d47 	.word	0x08009d47
 8009a7c:	08009bf7 	.word	0x08009bf7
 8009a80:	08009d47 	.word	0x08009d47
 8009a84:	08009d47 	.word	0x08009d47
 8009a88:	08009d47 	.word	0x08009d47
 8009a8c:	08009c99 	.word	0x08009c99
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a90:	f7fd fede 	bl	8007850 <HAL_RCC_GetPCLK1Freq>
 8009a94:	4602      	mov	r2, r0
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d044      	beq.n	8009b28 <UART_SetConfig+0x240>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d03e      	beq.n	8009b24 <UART_SetConfig+0x23c>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d038      	beq.n	8009b20 <UART_SetConfig+0x238>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d032      	beq.n	8009b1c <UART_SetConfig+0x234>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d02c      	beq.n	8009b18 <UART_SetConfig+0x230>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b05      	cmp	r3, #5
 8009ac4:	d026      	beq.n	8009b14 <UART_SetConfig+0x22c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b06      	cmp	r3, #6
 8009acc:	d020      	beq.n	8009b10 <UART_SetConfig+0x228>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b07      	cmp	r3, #7
 8009ad4:	d01a      	beq.n	8009b0c <UART_SetConfig+0x224>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	d014      	beq.n	8009b08 <UART_SetConfig+0x220>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b09      	cmp	r3, #9
 8009ae4:	d00e      	beq.n	8009b04 <UART_SetConfig+0x21c>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b0a      	cmp	r3, #10
 8009aec:	d008      	beq.n	8009b00 <UART_SetConfig+0x218>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b0b      	cmp	r3, #11
 8009af4:	d102      	bne.n	8009afc <UART_SetConfig+0x214>
 8009af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009afa:	e016      	b.n	8009b2a <UART_SetConfig+0x242>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e014      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	e012      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	e010      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	e00e      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	e00c      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b10:	230c      	movs	r3, #12
 8009b12:	e00a      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b14:	230a      	movs	r3, #10
 8009b16:	e008      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	e006      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b1c:	2306      	movs	r3, #6
 8009b1e:	e004      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b20:	2304      	movs	r3, #4
 8009b22:	e002      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e000      	b.n	8009b2a <UART_SetConfig+0x242>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	617b      	str	r3, [r7, #20]
        break;
 8009b30:	e10c      	b.n	8009d4c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d05a      	beq.n	8009bf0 <UART_SetConfig+0x308>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d054      	beq.n	8009bec <UART_SetConfig+0x304>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d04e      	beq.n	8009be8 <UART_SetConfig+0x300>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d048      	beq.n	8009be4 <UART_SetConfig+0x2fc>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d02c      	beq.n	8009bb4 <UART_SetConfig+0x2cc>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	2b05      	cmp	r3, #5
 8009b60:	d026      	beq.n	8009bb0 <UART_SetConfig+0x2c8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2b06      	cmp	r3, #6
 8009b68:	d020      	beq.n	8009bac <UART_SetConfig+0x2c4>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6e:	2b07      	cmp	r3, #7
 8009b70:	d01a      	beq.n	8009ba8 <UART_SetConfig+0x2c0>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b76:	2b08      	cmp	r3, #8
 8009b78:	d014      	beq.n	8009ba4 <UART_SetConfig+0x2bc>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d00e      	beq.n	8009ba0 <UART_SetConfig+0x2b8>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b0a      	cmp	r3, #10
 8009b88:	d008      	beq.n	8009b9c <UART_SetConfig+0x2b4>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b0b      	cmp	r3, #11
 8009b90:	d102      	bne.n	8009b98 <UART_SetConfig+0x2b0>
 8009b92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009b96:	e02c      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <UART_SetConfig+0x2dc>)
 8009b9a:	e02a      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <UART_SetConfig+0x2e0>)
 8009b9e:	e028      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <UART_SetConfig+0x2e4>)
 8009ba2:	e026      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009ba4:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <UART_SetConfig+0x2e8>)
 8009ba6:	e024      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009ba8:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <UART_SetConfig+0x2ec>)
 8009baa:	e022      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <UART_SetConfig+0x2f0>)
 8009bae:	e020      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <UART_SetConfig+0x2f4>)
 8009bb2:	e01e      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bb4:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <UART_SetConfig+0x2f8>)
 8009bb6:	e01c      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bb8:	cfff69f3 	.word	0xcfff69f3
 8009bbc:	40008000 	.word	0x40008000
 8009bc0:	40013800 	.word	0x40013800
 8009bc4:	00f42400 	.word	0x00f42400
 8009bc8:	0001e848 	.word	0x0001e848
 8009bcc:	0003d090 	.word	0x0003d090
 8009bd0:	0007a120 	.word	0x0007a120
 8009bd4:	000f4240 	.word	0x000f4240
 8009bd8:	00145855 	.word	0x00145855
 8009bdc:	00186a00 	.word	0x00186a00
 8009be0:	001e8480 	.word	0x001e8480
 8009be4:	4ba6      	ldr	r3, [pc, #664]	; (8009e80 <UART_SetConfig+0x598>)
 8009be6:	e004      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009be8:	4ba6      	ldr	r3, [pc, #664]	; (8009e84 <UART_SetConfig+0x59c>)
 8009bea:	e002      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bec:	4ba6      	ldr	r3, [pc, #664]	; (8009e88 <UART_SetConfig+0x5a0>)
 8009bee:	e000      	b.n	8009bf2 <UART_SetConfig+0x30a>
 8009bf0:	4ba6      	ldr	r3, [pc, #664]	; (8009e8c <UART_SetConfig+0x5a4>)
 8009bf2:	617b      	str	r3, [r7, #20]
        break;
 8009bf4:	e0aa      	b.n	8009d4c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009bf6:	f7fd fdad 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d044      	beq.n	8009c8e <UART_SetConfig+0x3a6>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d03e      	beq.n	8009c8a <UART_SetConfig+0x3a2>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d038      	beq.n	8009c86 <UART_SetConfig+0x39e>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d032      	beq.n	8009c82 <UART_SetConfig+0x39a>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d02c      	beq.n	8009c7e <UART_SetConfig+0x396>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b05      	cmp	r3, #5
 8009c2a:	d026      	beq.n	8009c7a <UART_SetConfig+0x392>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b06      	cmp	r3, #6
 8009c32:	d020      	beq.n	8009c76 <UART_SetConfig+0x38e>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b07      	cmp	r3, #7
 8009c3a:	d01a      	beq.n	8009c72 <UART_SetConfig+0x38a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d014      	beq.n	8009c6e <UART_SetConfig+0x386>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b09      	cmp	r3, #9
 8009c4a:	d00e      	beq.n	8009c6a <UART_SetConfig+0x382>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b0a      	cmp	r3, #10
 8009c52:	d008      	beq.n	8009c66 <UART_SetConfig+0x37e>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b0b      	cmp	r3, #11
 8009c5a:	d102      	bne.n	8009c62 <UART_SetConfig+0x37a>
 8009c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c60:	e016      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e014      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c66:	2380      	movs	r3, #128	; 0x80
 8009c68:	e012      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	e010      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c6e:	2320      	movs	r3, #32
 8009c70:	e00e      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c72:	2310      	movs	r3, #16
 8009c74:	e00c      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c76:	230c      	movs	r3, #12
 8009c78:	e00a      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c7a:	230a      	movs	r3, #10
 8009c7c:	e008      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c7e:	2308      	movs	r3, #8
 8009c80:	e006      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c82:	2306      	movs	r3, #6
 8009c84:	e004      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c86:	2304      	movs	r3, #4
 8009c88:	e002      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e000      	b.n	8009c90 <UART_SetConfig+0x3a8>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	617b      	str	r3, [r7, #20]
        break;
 8009c96:	e059      	b.n	8009d4c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d04e      	beq.n	8009d3e <UART_SetConfig+0x456>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d047      	beq.n	8009d38 <UART_SetConfig+0x450>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d040      	beq.n	8009d32 <UART_SetConfig+0x44a>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d039      	beq.n	8009d2c <UART_SetConfig+0x444>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d032      	beq.n	8009d26 <UART_SetConfig+0x43e>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	d02b      	beq.n	8009d20 <UART_SetConfig+0x438>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	2b06      	cmp	r3, #6
 8009cce:	d024      	beq.n	8009d1a <UART_SetConfig+0x432>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd4:	2b07      	cmp	r3, #7
 8009cd6:	d01d      	beq.n	8009d14 <UART_SetConfig+0x42c>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cdc:	2b08      	cmp	r3, #8
 8009cde:	d016      	beq.n	8009d0e <UART_SetConfig+0x426>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce4:	2b09      	cmp	r3, #9
 8009ce6:	d00f      	beq.n	8009d08 <UART_SetConfig+0x420>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	2b0a      	cmp	r3, #10
 8009cee:	d008      	beq.n	8009d02 <UART_SetConfig+0x41a>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	2b0b      	cmp	r3, #11
 8009cf6:	d101      	bne.n	8009cfc <UART_SetConfig+0x414>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	e022      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d00:	e01f      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d06:	e01c      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d0c:	e019      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	e016      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d18:	e013      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d1a:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009d1e:	e010      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d20:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009d24:	e00d      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d2a:	e00a      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d2c:	f241 5355 	movw	r3, #5461	; 0x1555
 8009d30:	e007      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d36:	e004      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d3c:	e001      	b.n	8009d42 <UART_SetConfig+0x45a>
 8009d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d42:	617b      	str	r3, [r7, #20]
        break;
 8009d44:	e002      	b.n	8009d4c <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	76fb      	strb	r3, [r7, #27]
        break;
 8009d4a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 8604 	beq.w	800a95c <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d305      	bcc.n	8009d70 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d903      	bls.n	8009d78 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	76fb      	strb	r3, [r7, #27]
 8009d74:	f000 bdf2 	b.w	800a95c <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8009d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	f200 8281 	bhi.w	800a284 <UART_SetConfig+0x99c>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <UART_SetConfig+0x4a0>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	0800a285 	.word	0x0800a285
 8009d90:	08009efd 	.word	0x08009efd
 8009d94:	0800a285 	.word	0x0800a285
 8009d98:	08009ff3 	.word	0x08009ff3
 8009d9c:	0800a285 	.word	0x0800a285
 8009da0:	0800a285 	.word	0x0800a285
 8009da4:	0800a285 	.word	0x0800a285
 8009da8:	0800a131 	.word	0x0800a131
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8009dac:	f7fd fd50 	bl	8007850 <HAL_RCC_GetPCLK1Freq>
 8009db0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f04f 0100 	mov.w	r1, #0
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d070      	beq.n	8009ea4 <UART_SetConfig+0x5bc>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d067      	beq.n	8009e9a <UART_SetConfig+0x5b2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d05e      	beq.n	8009e90 <UART_SetConfig+0x5a8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d04c      	beq.n	8009e74 <UART_SetConfig+0x58c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d043      	beq.n	8009e6a <UART_SetConfig+0x582>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d03a      	beq.n	8009e60 <UART_SetConfig+0x578>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	2b06      	cmp	r3, #6
 8009df0:	d031      	beq.n	8009e56 <UART_SetConfig+0x56e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b07      	cmp	r3, #7
 8009df8:	d028      	beq.n	8009e4c <UART_SetConfig+0x564>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	2b08      	cmp	r3, #8
 8009e00:	d01f      	beq.n	8009e42 <UART_SetConfig+0x55a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	2b09      	cmp	r3, #9
 8009e08:	d016      	beq.n	8009e38 <UART_SetConfig+0x550>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	2b0a      	cmp	r3, #10
 8009e10:	d00d      	beq.n	8009e2e <UART_SetConfig+0x546>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	2b0b      	cmp	r3, #11
 8009e18:	d104      	bne.n	8009e24 <UART_SetConfig+0x53c>
 8009e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e1e:	f04f 0400 	mov.w	r4, #0
 8009e22:	e043      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e24:	f04f 0301 	mov.w	r3, #1
 8009e28:	f04f 0400 	mov.w	r4, #0
 8009e2c:	e03e      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009e32:	f04f 0400 	mov.w	r4, #0
 8009e36:	e039      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e38:	f04f 0340 	mov.w	r3, #64	; 0x40
 8009e3c:	f04f 0400 	mov.w	r4, #0
 8009e40:	e034      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e42:	f04f 0320 	mov.w	r3, #32
 8009e46:	f04f 0400 	mov.w	r4, #0
 8009e4a:	e02f      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e4c:	f04f 0310 	mov.w	r3, #16
 8009e50:	f04f 0400 	mov.w	r4, #0
 8009e54:	e02a      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e56:	f04f 030c 	mov.w	r3, #12
 8009e5a:	f04f 0400 	mov.w	r4, #0
 8009e5e:	e025      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e60:	f04f 030a 	mov.w	r3, #10
 8009e64:	f04f 0400 	mov.w	r4, #0
 8009e68:	e020      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e6a:	f04f 0308 	mov.w	r3, #8
 8009e6e:	f04f 0400 	mov.w	r4, #0
 8009e72:	e01b      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e74:	f04f 0306 	mov.w	r3, #6
 8009e78:	f04f 0400 	mov.w	r4, #0
 8009e7c:	e016      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e7e:	bf00      	nop
 8009e80:	0028b0aa 	.word	0x0028b0aa
 8009e84:	003d0900 	.word	0x003d0900
 8009e88:	007a1200 	.word	0x007a1200
 8009e8c:	00f42400 	.word	0x00f42400
 8009e90:	f04f 0304 	mov.w	r3, #4
 8009e94:	f04f 0400 	mov.w	r4, #0
 8009e98:	e008      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009e9a:	f04f 0302 	mov.w	r3, #2
 8009e9e:	f04f 0400 	mov.w	r4, #0
 8009ea2:	e003      	b.n	8009eac <UART_SetConfig+0x5c4>
 8009ea4:	f04f 0301 	mov.w	r3, #1
 8009ea8:	f04f 0400 	mov.w	r4, #0
 8009eac:	461a      	mov	r2, r3
 8009eae:	4623      	mov	r3, r4
 8009eb0:	f7f6 f9be 	bl	8000230 <__aeabi_uldivmod>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4622      	mov	r2, r4
 8009ebc:	f04f 0300 	mov.w	r3, #0
 8009ec0:	f04f 0400 	mov.w	r4, #0
 8009ec4:	0214      	lsls	r4, r2, #8
 8009ec6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009eca:	020b      	lsls	r3, r1, #8
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6852      	ldr	r2, [r2, #4]
 8009ed0:	0852      	lsrs	r2, r2, #1
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	f04f 0200 	mov.w	r2, #0
 8009ed8:	eb13 0b01 	adds.w	fp, r3, r1
 8009edc:	eb44 0c02 	adc.w	ip, r4, r2
 8009ee0:	4658      	mov	r0, fp
 8009ee2:	4661      	mov	r1, ip
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f04f 0400 	mov.w	r4, #0
 8009eec:	461a      	mov	r2, r3
 8009eee:	4623      	mov	r3, r4
 8009ef0:	f7f6 f99e 	bl	8000230 <__aeabi_uldivmod>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	61fb      	str	r3, [r7, #28]
            break;
 8009efa:	e1c6      	b.n	800a28a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d05b      	beq.n	8009fbc <UART_SetConfig+0x6d4>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d053      	beq.n	8009fb4 <UART_SetConfig+0x6cc>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d04b      	beq.n	8009fac <UART_SetConfig+0x6c4>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d043      	beq.n	8009fa4 <UART_SetConfig+0x6bc>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d03b      	beq.n	8009f9c <UART_SetConfig+0x6b4>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b05      	cmp	r3, #5
 8009f2a:	d033      	beq.n	8009f94 <UART_SetConfig+0x6ac>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	2b06      	cmp	r3, #6
 8009f32:	d02b      	beq.n	8009f8c <UART_SetConfig+0x6a4>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f38:	2b07      	cmp	r3, #7
 8009f3a:	d023      	beq.n	8009f84 <UART_SetConfig+0x69c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	d01b      	beq.n	8009f7c <UART_SetConfig+0x694>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f48:	2b09      	cmp	r3, #9
 8009f4a:	d013      	beq.n	8009f74 <UART_SetConfig+0x68c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b0a      	cmp	r3, #10
 8009f52:	d00b      	beq.n	8009f6c <UART_SetConfig+0x684>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2b0b      	cmp	r3, #11
 8009f5a:	d103      	bne.n	8009f64 <UART_SetConfig+0x67c>
 8009f5c:	4bae      	ldr	r3, [pc, #696]	; (800a218 <UART_SetConfig+0x930>)
 8009f5e:	f04f 0400 	mov.w	r4, #0
 8009f62:	e02e      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f64:	4bad      	ldr	r3, [pc, #692]	; (800a21c <UART_SetConfig+0x934>)
 8009f66:	f04f 0400 	mov.w	r4, #0
 8009f6a:	e02a      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f6c:	4bac      	ldr	r3, [pc, #688]	; (800a220 <UART_SetConfig+0x938>)
 8009f6e:	f04f 0400 	mov.w	r4, #0
 8009f72:	e026      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f74:	4bab      	ldr	r3, [pc, #684]	; (800a224 <UART_SetConfig+0x93c>)
 8009f76:	f04f 0400 	mov.w	r4, #0
 8009f7a:	e022      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f7c:	4baa      	ldr	r3, [pc, #680]	; (800a228 <UART_SetConfig+0x940>)
 8009f7e:	f04f 0400 	mov.w	r4, #0
 8009f82:	e01e      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f84:	4ba9      	ldr	r3, [pc, #676]	; (800a22c <UART_SetConfig+0x944>)
 8009f86:	f04f 0400 	mov.w	r4, #0
 8009f8a:	e01a      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f8c:	a49e      	add	r4, pc, #632	; (adr r4, 800a208 <UART_SetConfig+0x920>)
 8009f8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009f92:	e016      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f94:	4ba6      	ldr	r3, [pc, #664]	; (800a230 <UART_SetConfig+0x948>)
 8009f96:	f04f 0400 	mov.w	r4, #0
 8009f9a:	e012      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009f9c:	4ba5      	ldr	r3, [pc, #660]	; (800a234 <UART_SetConfig+0x94c>)
 8009f9e:	f04f 0400 	mov.w	r4, #0
 8009fa2:	e00e      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009fa4:	a49a      	add	r4, pc, #616	; (adr r4, 800a210 <UART_SetConfig+0x928>)
 8009fa6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8009faa:	e00a      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009fac:	4ba2      	ldr	r3, [pc, #648]	; (800a238 <UART_SetConfig+0x950>)
 8009fae:	f04f 0400 	mov.w	r4, #0
 8009fb2:	e006      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009fb4:	4ba1      	ldr	r3, [pc, #644]	; (800a23c <UART_SetConfig+0x954>)
 8009fb6:	f04f 0400 	mov.w	r4, #0
 8009fba:	e002      	b.n	8009fc2 <UART_SetConfig+0x6da>
 8009fbc:	4b97      	ldr	r3, [pc, #604]	; (800a21c <UART_SetConfig+0x934>)
 8009fbe:	f04f 0400 	mov.w	r4, #0
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6852      	ldr	r2, [r2, #4]
 8009fc6:	0852      	lsrs	r2, r2, #1
 8009fc8:	4611      	mov	r1, r2
 8009fca:	f04f 0200 	mov.w	r2, #0
 8009fce:	eb13 0b01 	adds.w	fp, r3, r1
 8009fd2:	eb44 0c02 	adc.w	ip, r4, r2
 8009fd6:	4658      	mov	r0, fp
 8009fd8:	4661      	mov	r1, ip
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f04f 0400 	mov.w	r4, #0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	4623      	mov	r3, r4
 8009fe6:	f7f6 f923 	bl	8000230 <__aeabi_uldivmod>
 8009fea:	4603      	mov	r3, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	61fb      	str	r3, [r7, #28]
            break;
 8009ff0:	e14b      	b.n	800a28a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8009ff2:	f7fd fbaf 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8009ff6:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f04f 0100 	mov.w	r1, #0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d067      	beq.n	800a0d8 <UART_SetConfig+0x7f0>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d05e      	beq.n	800a0ce <UART_SetConfig+0x7e6>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	2b02      	cmp	r3, #2
 800a016:	d055      	beq.n	800a0c4 <UART_SetConfig+0x7dc>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	2b03      	cmp	r3, #3
 800a01e:	d04c      	beq.n	800a0ba <UART_SetConfig+0x7d2>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	2b04      	cmp	r3, #4
 800a026:	d043      	beq.n	800a0b0 <UART_SetConfig+0x7c8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	2b05      	cmp	r3, #5
 800a02e:	d03a      	beq.n	800a0a6 <UART_SetConfig+0x7be>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	2b06      	cmp	r3, #6
 800a036:	d031      	beq.n	800a09c <UART_SetConfig+0x7b4>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	2b07      	cmp	r3, #7
 800a03e:	d028      	beq.n	800a092 <UART_SetConfig+0x7aa>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	2b08      	cmp	r3, #8
 800a046:	d01f      	beq.n	800a088 <UART_SetConfig+0x7a0>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d016      	beq.n	800a07e <UART_SetConfig+0x796>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b0a      	cmp	r3, #10
 800a056:	d00d      	beq.n	800a074 <UART_SetConfig+0x78c>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05c:	2b0b      	cmp	r3, #11
 800a05e:	d104      	bne.n	800a06a <UART_SetConfig+0x782>
 800a060:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a064:	f04f 0400 	mov.w	r4, #0
 800a068:	e03a      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a06a:	f04f 0301 	mov.w	r3, #1
 800a06e:	f04f 0400 	mov.w	r4, #0
 800a072:	e035      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a074:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a078:	f04f 0400 	mov.w	r4, #0
 800a07c:	e030      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a07e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a082:	f04f 0400 	mov.w	r4, #0
 800a086:	e02b      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a088:	f04f 0320 	mov.w	r3, #32
 800a08c:	f04f 0400 	mov.w	r4, #0
 800a090:	e026      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a092:	f04f 0310 	mov.w	r3, #16
 800a096:	f04f 0400 	mov.w	r4, #0
 800a09a:	e021      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a09c:	f04f 030c 	mov.w	r3, #12
 800a0a0:	f04f 0400 	mov.w	r4, #0
 800a0a4:	e01c      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0a6:	f04f 030a 	mov.w	r3, #10
 800a0aa:	f04f 0400 	mov.w	r4, #0
 800a0ae:	e017      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0b0:	f04f 0308 	mov.w	r3, #8
 800a0b4:	f04f 0400 	mov.w	r4, #0
 800a0b8:	e012      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0ba:	f04f 0306 	mov.w	r3, #6
 800a0be:	f04f 0400 	mov.w	r4, #0
 800a0c2:	e00d      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0c4:	f04f 0304 	mov.w	r3, #4
 800a0c8:	f04f 0400 	mov.w	r4, #0
 800a0cc:	e008      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0ce:	f04f 0302 	mov.w	r3, #2
 800a0d2:	f04f 0400 	mov.w	r4, #0
 800a0d6:	e003      	b.n	800a0e0 <UART_SetConfig+0x7f8>
 800a0d8:	f04f 0301 	mov.w	r3, #1
 800a0dc:	f04f 0400 	mov.w	r4, #0
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	f7f6 f8a4 	bl	8000230 <__aeabi_uldivmod>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	f04f 0400 	mov.w	r4, #0
 800a0f8:	0214      	lsls	r4, r2, #8
 800a0fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a0fe:	020b      	lsls	r3, r1, #8
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	6852      	ldr	r2, [r2, #4]
 800a104:	0852      	lsrs	r2, r2, #1
 800a106:	4611      	mov	r1, r2
 800a108:	f04f 0200 	mov.w	r2, #0
 800a10c:	eb13 0b01 	adds.w	fp, r3, r1
 800a110:	eb44 0c02 	adc.w	ip, r4, r2
 800a114:	4658      	mov	r0, fp
 800a116:	4661      	mov	r1, ip
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f04f 0400 	mov.w	r4, #0
 800a120:	461a      	mov	r2, r3
 800a122:	4623      	mov	r3, r4
 800a124:	f7f6 f884 	bl	8000230 <__aeabi_uldivmod>
 800a128:	4603      	mov	r3, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	61fb      	str	r3, [r7, #28]
            break;
 800a12e:	e0ac      	b.n	800a28a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8089 	beq.w	800a24c <UART_SetConfig+0x964>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d05b      	beq.n	800a1fa <UART_SetConfig+0x912>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b02      	cmp	r3, #2
 800a148:	d052      	beq.n	800a1f0 <UART_SetConfig+0x908>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	2b03      	cmp	r3, #3
 800a150:	d04a      	beq.n	800a1e8 <UART_SetConfig+0x900>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b04      	cmp	r3, #4
 800a158:	d041      	beq.n	800a1de <UART_SetConfig+0x8f6>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	2b05      	cmp	r3, #5
 800a160:	d039      	beq.n	800a1d6 <UART_SetConfig+0x8ee>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	2b06      	cmp	r3, #6
 800a168:	d031      	beq.n	800a1ce <UART_SetConfig+0x8e6>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b07      	cmp	r3, #7
 800a170:	d028      	beq.n	800a1c4 <UART_SetConfig+0x8dc>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b08      	cmp	r3, #8
 800a178:	d01f      	beq.n	800a1ba <UART_SetConfig+0x8d2>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b09      	cmp	r3, #9
 800a180:	d016      	beq.n	800a1b0 <UART_SetConfig+0x8c8>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b0a      	cmp	r3, #10
 800a188:	d00d      	beq.n	800a1a6 <UART_SetConfig+0x8be>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b0b      	cmp	r3, #11
 800a190:	d104      	bne.n	800a19c <UART_SetConfig+0x8b4>
 800a192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a196:	f04f 0400 	mov.w	r4, #0
 800a19a:	e05b      	b.n	800a254 <UART_SetConfig+0x96c>
 800a19c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1a0:	f04f 0400 	mov.w	r4, #0
 800a1a4:	e056      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1aa:	f04f 0400 	mov.w	r4, #0
 800a1ae:	e051      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a1b4:	f04f 0400 	mov.w	r4, #0
 800a1b8:	e04c      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1be:	f04f 0400 	mov.w	r4, #0
 800a1c2:	e047      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1c8:	f04f 0400 	mov.w	r4, #0
 800a1cc:	e042      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1ce:	4b1c      	ldr	r3, [pc, #112]	; (800a240 <UART_SetConfig+0x958>)
 800a1d0:	f04f 0400 	mov.w	r4, #0
 800a1d4:	e03e      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1d6:	4b1b      	ldr	r3, [pc, #108]	; (800a244 <UART_SetConfig+0x95c>)
 800a1d8:	f04f 0400 	mov.w	r4, #0
 800a1dc:	e03a      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1e2:	f04f 0400 	mov.w	r4, #0
 800a1e6:	e035      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <UART_SetConfig+0x960>)
 800a1ea:	f04f 0400 	mov.w	r4, #0
 800a1ee:	e031      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1f4:	f04f 0400 	mov.w	r4, #0
 800a1f8:	e02c      	b.n	800a254 <UART_SetConfig+0x96c>
 800a1fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1fe:	f04f 0400 	mov.w	r4, #0
 800a202:	e027      	b.n	800a254 <UART_SetConfig+0x96c>
 800a204:	f3af 8000 	nop.w
 800a208:	14585500 	.word	0x14585500
 800a20c:	00000000 	.word	0x00000000
 800a210:	28b0aa00 	.word	0x28b0aa00
 800a214:	00000000 	.word	0x00000000
 800a218:	00f42400 	.word	0x00f42400
 800a21c:	f4240000 	.word	0xf4240000
 800a220:	01e84800 	.word	0x01e84800
 800a224:	03d09000 	.word	0x03d09000
 800a228:	07a12000 	.word	0x07a12000
 800a22c:	0f424000 	.word	0x0f424000
 800a230:	186a0000 	.word	0x186a0000
 800a234:	1e848000 	.word	0x1e848000
 800a238:	3d090000 	.word	0x3d090000
 800a23c:	7a120000 	.word	0x7a120000
 800a240:	000aaa00 	.word	0x000aaa00
 800a244:	000ccc00 	.word	0x000ccc00
 800a248:	00155500 	.word	0x00155500
 800a24c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a250:	f04f 0400 	mov.w	r4, #0
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6852      	ldr	r2, [r2, #4]
 800a258:	0852      	lsrs	r2, r2, #1
 800a25a:	4611      	mov	r1, r2
 800a25c:	f04f 0200 	mov.w	r2, #0
 800a260:	eb13 0b01 	adds.w	fp, r3, r1
 800a264:	eb44 0c02 	adc.w	ip, r4, r2
 800a268:	4658      	mov	r0, fp
 800a26a:	4661      	mov	r1, ip
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f04f 0400 	mov.w	r4, #0
 800a274:	461a      	mov	r2, r3
 800a276:	4623      	mov	r3, r4
 800a278:	f7f5 ffda 	bl	8000230 <__aeabi_uldivmod>
 800a27c:	4603      	mov	r3, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	61fb      	str	r3, [r7, #28]
            break;
 800a282:	e002      	b.n	800a28a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	76fb      	strb	r3, [r7, #27]
            break;
 800a288:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a290:	d308      	bcc.n	800a2a4 <UART_SetConfig+0x9bc>
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a298:	d204      	bcs.n	800a2a4 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	60da      	str	r2, [r3, #12]
 800a2a2:	e35b      	b.n	800a95c <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	76fb      	strb	r3, [r7, #27]
 800a2a8:	e358      	b.n	800a95c <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b2:	f040 81a6 	bne.w	800a602 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a2b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	2b07      	cmp	r3, #7
 800a2be:	f200 8180 	bhi.w	800a5c2 <UART_SetConfig+0xcda>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <UART_SetConfig+0x9e0>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a2e9 	.word	0x0800a2e9
 800a2cc:	0800a3a1 	.word	0x0800a3a1
 800a2d0:	0800a5c3 	.word	0x0800a5c3
 800a2d4:	0800a449 	.word	0x0800a449
 800a2d8:	0800a5c3 	.word	0x0800a5c3
 800a2dc:	0800a5c3 	.word	0x0800a5c3
 800a2e0:	0800a5c3 	.word	0x0800a5c3
 800a2e4:	0800a501 	.word	0x0800a501
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2e8:	f7fd fac8 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 800a2ec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d044      	beq.n	800a380 <UART_SetConfig+0xa98>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d03e      	beq.n	800a37c <UART_SetConfig+0xa94>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	2b02      	cmp	r3, #2
 800a304:	d038      	beq.n	800a378 <UART_SetConfig+0xa90>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d032      	beq.n	800a374 <UART_SetConfig+0xa8c>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	2b04      	cmp	r3, #4
 800a314:	d02c      	beq.n	800a370 <UART_SetConfig+0xa88>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d026      	beq.n	800a36c <UART_SetConfig+0xa84>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a322:	2b06      	cmp	r3, #6
 800a324:	d020      	beq.n	800a368 <UART_SetConfig+0xa80>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32a:	2b07      	cmp	r3, #7
 800a32c:	d01a      	beq.n	800a364 <UART_SetConfig+0xa7c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	2b08      	cmp	r3, #8
 800a334:	d014      	beq.n	800a360 <UART_SetConfig+0xa78>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	2b09      	cmp	r3, #9
 800a33c:	d00e      	beq.n	800a35c <UART_SetConfig+0xa74>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	2b0a      	cmp	r3, #10
 800a344:	d008      	beq.n	800a358 <UART_SetConfig+0xa70>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	2b0b      	cmp	r3, #11
 800a34c:	d102      	bne.n	800a354 <UART_SetConfig+0xa6c>
 800a34e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a352:	e016      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a354:	2301      	movs	r3, #1
 800a356:	e014      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a358:	2380      	movs	r3, #128	; 0x80
 800a35a:	e012      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	e010      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a360:	2320      	movs	r3, #32
 800a362:	e00e      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a364:	2310      	movs	r3, #16
 800a366:	e00c      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a368:	230c      	movs	r3, #12
 800a36a:	e00a      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a36c:	230a      	movs	r3, #10
 800a36e:	e008      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a370:	2308      	movs	r3, #8
 800a372:	e006      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a374:	2306      	movs	r3, #6
 800a376:	e004      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a378:	2304      	movs	r3, #4
 800a37a:	e002      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e000      	b.n	800a382 <UART_SetConfig+0xa9a>
 800a380:	2301      	movs	r3, #1
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	fbb2 f3f3 	udiv	r3, r2, r3
 800a388:	005a      	lsls	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	441a      	add	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	fbb2 f3f3 	udiv	r3, r2, r3
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	61fb      	str	r3, [r7, #28]
        break;
 800a39e:	e113      	b.n	800a5c8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d043      	beq.n	800a430 <UART_SetConfig+0xb48>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d03d      	beq.n	800a42c <UART_SetConfig+0xb44>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d037      	beq.n	800a428 <UART_SetConfig+0xb40>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d031      	beq.n	800a424 <UART_SetConfig+0xb3c>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d02b      	beq.n	800a420 <UART_SetConfig+0xb38>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d025      	beq.n	800a41c <UART_SetConfig+0xb34>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b06      	cmp	r3, #6
 800a3d6:	d01f      	beq.n	800a418 <UART_SetConfig+0xb30>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b07      	cmp	r3, #7
 800a3de:	d019      	beq.n	800a414 <UART_SetConfig+0xb2c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d013      	beq.n	800a410 <UART_SetConfig+0xb28>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d00d      	beq.n	800a40c <UART_SetConfig+0xb24>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b0a      	cmp	r3, #10
 800a3f6:	d007      	beq.n	800a408 <UART_SetConfig+0xb20>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b0b      	cmp	r3, #11
 800a3fe:	d101      	bne.n	800a404 <UART_SetConfig+0xb1c>
 800a400:	4b8c      	ldr	r3, [pc, #560]	; (800a634 <UART_SetConfig+0xd4c>)
 800a402:	e016      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a404:	4b8c      	ldr	r3, [pc, #560]	; (800a638 <UART_SetConfig+0xd50>)
 800a406:	e014      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a408:	4b8c      	ldr	r3, [pc, #560]	; (800a63c <UART_SetConfig+0xd54>)
 800a40a:	e012      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a40c:	4b8c      	ldr	r3, [pc, #560]	; (800a640 <UART_SetConfig+0xd58>)
 800a40e:	e010      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a410:	4b8c      	ldr	r3, [pc, #560]	; (800a644 <UART_SetConfig+0xd5c>)
 800a412:	e00e      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a414:	4b8c      	ldr	r3, [pc, #560]	; (800a648 <UART_SetConfig+0xd60>)
 800a416:	e00c      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a418:	4b8c      	ldr	r3, [pc, #560]	; (800a64c <UART_SetConfig+0xd64>)
 800a41a:	e00a      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a41c:	4b8c      	ldr	r3, [pc, #560]	; (800a650 <UART_SetConfig+0xd68>)
 800a41e:	e008      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a420:	4b8c      	ldr	r3, [pc, #560]	; (800a654 <UART_SetConfig+0xd6c>)
 800a422:	e006      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a424:	4b8c      	ldr	r3, [pc, #560]	; (800a658 <UART_SetConfig+0xd70>)
 800a426:	e004      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a428:	4b8c      	ldr	r3, [pc, #560]	; (800a65c <UART_SetConfig+0xd74>)
 800a42a:	e002      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a42c:	4b8c      	ldr	r3, [pc, #560]	; (800a660 <UART_SetConfig+0xd78>)
 800a42e:	e000      	b.n	800a432 <UART_SetConfig+0xb4a>
 800a430:	4b81      	ldr	r3, [pc, #516]	; (800a638 <UART_SetConfig+0xd50>)
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	6852      	ldr	r2, [r2, #4]
 800a436:	0852      	lsrs	r2, r2, #1
 800a438:	441a      	add	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a442:	b29b      	uxth	r3, r3
 800a444:	61fb      	str	r3, [r7, #28]
        break;
 800a446:	e0bf      	b.n	800a5c8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a448:	f7fd f984 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a44c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	2b00      	cmp	r3, #0
 800a454:	d044      	beq.n	800a4e0 <UART_SetConfig+0xbf8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d03e      	beq.n	800a4dc <UART_SetConfig+0xbf4>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a462:	2b02      	cmp	r3, #2
 800a464:	d038      	beq.n	800a4d8 <UART_SetConfig+0xbf0>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d032      	beq.n	800a4d4 <UART_SetConfig+0xbec>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	2b04      	cmp	r3, #4
 800a474:	d02c      	beq.n	800a4d0 <UART_SetConfig+0xbe8>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d026      	beq.n	800a4cc <UART_SetConfig+0xbe4>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	2b06      	cmp	r3, #6
 800a484:	d020      	beq.n	800a4c8 <UART_SetConfig+0xbe0>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	2b07      	cmp	r3, #7
 800a48c:	d01a      	beq.n	800a4c4 <UART_SetConfig+0xbdc>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	2b08      	cmp	r3, #8
 800a494:	d014      	beq.n	800a4c0 <UART_SetConfig+0xbd8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49a:	2b09      	cmp	r3, #9
 800a49c:	d00e      	beq.n	800a4bc <UART_SetConfig+0xbd4>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	2b0a      	cmp	r3, #10
 800a4a4:	d008      	beq.n	800a4b8 <UART_SetConfig+0xbd0>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	2b0b      	cmp	r3, #11
 800a4ac:	d102      	bne.n	800a4b4 <UART_SetConfig+0xbcc>
 800a4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4b2:	e016      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e014      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	e012      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4bc:	2340      	movs	r3, #64	; 0x40
 800a4be:	e010      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4c0:	2320      	movs	r3, #32
 800a4c2:	e00e      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	e00c      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	e00a      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4cc:	230a      	movs	r3, #10
 800a4ce:	e008      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	e006      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4d4:	2306      	movs	r3, #6
 800a4d6:	e004      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	e002      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e000      	b.n	800a4e2 <UART_SetConfig+0xbfa>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4e8:	005a      	lsls	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	085b      	lsrs	r3, r3, #1
 800a4f0:	441a      	add	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	61fb      	str	r3, [r7, #28]
        break;
 800a4fe:	e063      	b.n	800a5c8 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	2b00      	cmp	r3, #0
 800a506:	d04f      	beq.n	800a5a8 <UART_SetConfig+0xcc0>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d048      	beq.n	800a5a2 <UART_SetConfig+0xcba>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b02      	cmp	r3, #2
 800a516:	d041      	beq.n	800a59c <UART_SetConfig+0xcb4>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b03      	cmp	r3, #3
 800a51e:	d03a      	beq.n	800a596 <UART_SetConfig+0xcae>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b04      	cmp	r3, #4
 800a526:	d033      	beq.n	800a590 <UART_SetConfig+0xca8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d02c      	beq.n	800a58a <UART_SetConfig+0xca2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b06      	cmp	r3, #6
 800a536:	d025      	beq.n	800a584 <UART_SetConfig+0xc9c>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b07      	cmp	r3, #7
 800a53e:	d01e      	beq.n	800a57e <UART_SetConfig+0xc96>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b08      	cmp	r3, #8
 800a546:	d017      	beq.n	800a578 <UART_SetConfig+0xc90>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	d010      	beq.n	800a572 <UART_SetConfig+0xc8a>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	2b0a      	cmp	r3, #10
 800a556:	d009      	beq.n	800a56c <UART_SetConfig+0xc84>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	2b0b      	cmp	r3, #11
 800a55e:	d102      	bne.n	800a566 <UART_SetConfig+0xc7e>
 800a560:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a564:	e022      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a56a:	e01f      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a56c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a570:	e01c      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a576:	e019      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a57c:	e016      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a57e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a582:	e013      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a584:	f241 5354 	movw	r3, #5460	; 0x1554
 800a588:	e010      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a58a:	f641 1398 	movw	r3, #6552	; 0x1998
 800a58e:	e00d      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a594:	e00a      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a596:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800a59a:	e007      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a59c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5a0:	e004      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a5a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5a6:	e001      	b.n	800a5ac <UART_SetConfig+0xcc4>
 800a5a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6852      	ldr	r2, [r2, #4]
 800a5b0:	0852      	lsrs	r2, r2, #1
 800a5b2:	441a      	add	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	61fb      	str	r3, [r7, #28]
        break;
 800a5c0:	e002      	b.n	800a5c8 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	76fb      	strb	r3, [r7, #27]
        break;
 800a5c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	d916      	bls.n	800a5fc <UART_SetConfig+0xd14>
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d4:	d212      	bcs.n	800a5fc <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	f023 030f 	bic.w	r3, r3, #15
 800a5de:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	085b      	lsrs	r3, r3, #1
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	89fb      	ldrh	r3, [r7, #14]
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	89fa      	ldrh	r2, [r7, #14]
 800a5f8:	60da      	str	r2, [r3, #12]
 800a5fa:	e1af      	b.n	800a95c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	76fb      	strb	r3, [r7, #27]
 800a600:	e1ac      	b.n	800a95c <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 800a602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a606:	3b01      	subs	r3, #1
 800a608:	2b07      	cmp	r3, #7
 800a60a:	f200 8196 	bhi.w	800a93a <UART_SetConfig+0x1052>
 800a60e:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0xd2c>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a665 	.word	0x0800a665
 800a618:	0800a71b 	.word	0x0800a71b
 800a61c:	0800a93b 	.word	0x0800a93b
 800a620:	0800a7c5 	.word	0x0800a7c5
 800a624:	0800a93b 	.word	0x0800a93b
 800a628:	0800a93b 	.word	0x0800a93b
 800a62c:	0800a93b 	.word	0x0800a93b
 800a630:	0800a87b 	.word	0x0800a87b
 800a634:	0001e848 	.word	0x0001e848
 800a638:	01e84800 	.word	0x01e84800
 800a63c:	0003d090 	.word	0x0003d090
 800a640:	0007a120 	.word	0x0007a120
 800a644:	000f4240 	.word	0x000f4240
 800a648:	001e8480 	.word	0x001e8480
 800a64c:	0028b0aa 	.word	0x0028b0aa
 800a650:	0030d400 	.word	0x0030d400
 800a654:	003d0900 	.word	0x003d0900
 800a658:	00516154 	.word	0x00516154
 800a65c:	007a1200 	.word	0x007a1200
 800a660:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a664:	f7fd f90a 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 800a668:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d044      	beq.n	800a6fc <UART_SetConfig+0xe14>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	2b01      	cmp	r3, #1
 800a678:	d03e      	beq.n	800a6f8 <UART_SetConfig+0xe10>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d038      	beq.n	800a6f4 <UART_SetConfig+0xe0c>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a686:	2b03      	cmp	r3, #3
 800a688:	d032      	beq.n	800a6f0 <UART_SetConfig+0xe08>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d02c      	beq.n	800a6ec <UART_SetConfig+0xe04>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b05      	cmp	r3, #5
 800a698:	d026      	beq.n	800a6e8 <UART_SetConfig+0xe00>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	2b06      	cmp	r3, #6
 800a6a0:	d020      	beq.n	800a6e4 <UART_SetConfig+0xdfc>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a6:	2b07      	cmp	r3, #7
 800a6a8:	d01a      	beq.n	800a6e0 <UART_SetConfig+0xdf8>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b08      	cmp	r3, #8
 800a6b0:	d014      	beq.n	800a6dc <UART_SetConfig+0xdf4>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	2b09      	cmp	r3, #9
 800a6b8:	d00e      	beq.n	800a6d8 <UART_SetConfig+0xdf0>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b0a      	cmp	r3, #10
 800a6c0:	d008      	beq.n	800a6d4 <UART_SetConfig+0xdec>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b0b      	cmp	r3, #11
 800a6c8:	d102      	bne.n	800a6d0 <UART_SetConfig+0xde8>
 800a6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ce:	e016      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e014      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	e012      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6d8:	2340      	movs	r3, #64	; 0x40
 800a6da:	e010      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6dc:	2320      	movs	r3, #32
 800a6de:	e00e      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	e00c      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	e00a      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6e8:	230a      	movs	r3, #10
 800a6ea:	e008      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	e006      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6f0:	2306      	movs	r3, #6
 800a6f2:	e004      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	e002      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	e000      	b.n	800a6fe <UART_SetConfig+0xe16>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	fbb2 f2f3 	udiv	r2, r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	085b      	lsrs	r3, r3, #1
 800a70a:	441a      	add	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	fbb2 f3f3 	udiv	r3, r2, r3
 800a714:	b29b      	uxth	r3, r3
 800a716:	61fb      	str	r3, [r7, #28]
        break;
 800a718:	e112      	b.n	800a940 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d044      	beq.n	800a7ac <UART_SetConfig+0xec4>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a726:	2b01      	cmp	r3, #1
 800a728:	d03e      	beq.n	800a7a8 <UART_SetConfig+0xec0>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d038      	beq.n	800a7a4 <UART_SetConfig+0xebc>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b03      	cmp	r3, #3
 800a738:	d032      	beq.n	800a7a0 <UART_SetConfig+0xeb8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d02c      	beq.n	800a79c <UART_SetConfig+0xeb4>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b05      	cmp	r3, #5
 800a748:	d026      	beq.n	800a798 <UART_SetConfig+0xeb0>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	2b06      	cmp	r3, #6
 800a750:	d020      	beq.n	800a794 <UART_SetConfig+0xeac>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a756:	2b07      	cmp	r3, #7
 800a758:	d01a      	beq.n	800a790 <UART_SetConfig+0xea8>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75e:	2b08      	cmp	r3, #8
 800a760:	d014      	beq.n	800a78c <UART_SetConfig+0xea4>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	2b09      	cmp	r3, #9
 800a768:	d00e      	beq.n	800a788 <UART_SetConfig+0xea0>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	2b0a      	cmp	r3, #10
 800a770:	d008      	beq.n	800a784 <UART_SetConfig+0xe9c>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	2b0b      	cmp	r3, #11
 800a778:	d102      	bne.n	800a780 <UART_SetConfig+0xe98>
 800a77a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a77e:	e016      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a780:	4b80      	ldr	r3, [pc, #512]	; (800a984 <UART_SetConfig+0x109c>)
 800a782:	e014      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a784:	4b80      	ldr	r3, [pc, #512]	; (800a988 <UART_SetConfig+0x10a0>)
 800a786:	e012      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a788:	4b80      	ldr	r3, [pc, #512]	; (800a98c <UART_SetConfig+0x10a4>)
 800a78a:	e010      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a78c:	4b80      	ldr	r3, [pc, #512]	; (800a990 <UART_SetConfig+0x10a8>)
 800a78e:	e00e      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a790:	4b80      	ldr	r3, [pc, #512]	; (800a994 <UART_SetConfig+0x10ac>)
 800a792:	e00c      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a794:	4b80      	ldr	r3, [pc, #512]	; (800a998 <UART_SetConfig+0x10b0>)
 800a796:	e00a      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a798:	4b80      	ldr	r3, [pc, #512]	; (800a99c <UART_SetConfig+0x10b4>)
 800a79a:	e008      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a79c:	4b80      	ldr	r3, [pc, #512]	; (800a9a0 <UART_SetConfig+0x10b8>)
 800a79e:	e006      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a7a0:	4b80      	ldr	r3, [pc, #512]	; (800a9a4 <UART_SetConfig+0x10bc>)
 800a7a2:	e004      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a7a4:	4b80      	ldr	r3, [pc, #512]	; (800a9a8 <UART_SetConfig+0x10c0>)
 800a7a6:	e002      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a7a8:	4b80      	ldr	r3, [pc, #512]	; (800a9ac <UART_SetConfig+0x10c4>)
 800a7aa:	e000      	b.n	800a7ae <UART_SetConfig+0xec6>
 800a7ac:	4b75      	ldr	r3, [pc, #468]	; (800a984 <UART_SetConfig+0x109c>)
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6852      	ldr	r2, [r2, #4]
 800a7b2:	0852      	lsrs	r2, r2, #1
 800a7b4:	441a      	add	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	61fb      	str	r3, [r7, #28]
        break;
 800a7c2:	e0bd      	b.n	800a940 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c4:	f7fc ffc6 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800a7c8:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d044      	beq.n	800a85c <UART_SetConfig+0xf74>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d03e      	beq.n	800a858 <UART_SetConfig+0xf70>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	d038      	beq.n	800a854 <UART_SetConfig+0xf6c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d032      	beq.n	800a850 <UART_SetConfig+0xf68>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d02c      	beq.n	800a84c <UART_SetConfig+0xf64>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d026      	beq.n	800a848 <UART_SetConfig+0xf60>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	2b06      	cmp	r3, #6
 800a800:	d020      	beq.n	800a844 <UART_SetConfig+0xf5c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b07      	cmp	r3, #7
 800a808:	d01a      	beq.n	800a840 <UART_SetConfig+0xf58>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	2b08      	cmp	r3, #8
 800a810:	d014      	beq.n	800a83c <UART_SetConfig+0xf54>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	2b09      	cmp	r3, #9
 800a818:	d00e      	beq.n	800a838 <UART_SetConfig+0xf50>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b0a      	cmp	r3, #10
 800a820:	d008      	beq.n	800a834 <UART_SetConfig+0xf4c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a826:	2b0b      	cmp	r3, #11
 800a828:	d102      	bne.n	800a830 <UART_SetConfig+0xf48>
 800a82a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a82e:	e016      	b.n	800a85e <UART_SetConfig+0xf76>
 800a830:	2301      	movs	r3, #1
 800a832:	e014      	b.n	800a85e <UART_SetConfig+0xf76>
 800a834:	2380      	movs	r3, #128	; 0x80
 800a836:	e012      	b.n	800a85e <UART_SetConfig+0xf76>
 800a838:	2340      	movs	r3, #64	; 0x40
 800a83a:	e010      	b.n	800a85e <UART_SetConfig+0xf76>
 800a83c:	2320      	movs	r3, #32
 800a83e:	e00e      	b.n	800a85e <UART_SetConfig+0xf76>
 800a840:	2310      	movs	r3, #16
 800a842:	e00c      	b.n	800a85e <UART_SetConfig+0xf76>
 800a844:	230c      	movs	r3, #12
 800a846:	e00a      	b.n	800a85e <UART_SetConfig+0xf76>
 800a848:	230a      	movs	r3, #10
 800a84a:	e008      	b.n	800a85e <UART_SetConfig+0xf76>
 800a84c:	2308      	movs	r3, #8
 800a84e:	e006      	b.n	800a85e <UART_SetConfig+0xf76>
 800a850:	2306      	movs	r3, #6
 800a852:	e004      	b.n	800a85e <UART_SetConfig+0xf76>
 800a854:	2304      	movs	r3, #4
 800a856:	e002      	b.n	800a85e <UART_SetConfig+0xf76>
 800a858:	2302      	movs	r3, #2
 800a85a:	e000      	b.n	800a85e <UART_SetConfig+0xf76>
 800a85c:	2301      	movs	r3, #1
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	fbb2 f2f3 	udiv	r2, r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	085b      	lsrs	r3, r3, #1
 800a86a:	441a      	add	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	fbb2 f3f3 	udiv	r3, r2, r3
 800a874:	b29b      	uxth	r3, r3
 800a876:	61fb      	str	r3, [r7, #28]
        break;
 800a878:	e062      	b.n	800a940 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d04e      	beq.n	800a920 <UART_SetConfig+0x1038>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b01      	cmp	r3, #1
 800a888:	d047      	beq.n	800a91a <UART_SetConfig+0x1032>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d040      	beq.n	800a914 <UART_SetConfig+0x102c>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b03      	cmp	r3, #3
 800a898:	d039      	beq.n	800a90e <UART_SetConfig+0x1026>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d032      	beq.n	800a908 <UART_SetConfig+0x1020>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b05      	cmp	r3, #5
 800a8a8:	d02b      	beq.n	800a902 <UART_SetConfig+0x101a>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b06      	cmp	r3, #6
 800a8b0:	d024      	beq.n	800a8fc <UART_SetConfig+0x1014>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b07      	cmp	r3, #7
 800a8b8:	d01d      	beq.n	800a8f6 <UART_SetConfig+0x100e>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d016      	beq.n	800a8f0 <UART_SetConfig+0x1008>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b09      	cmp	r3, #9
 800a8c8:	d00f      	beq.n	800a8ea <UART_SetConfig+0x1002>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b0a      	cmp	r3, #10
 800a8d0:	d008      	beq.n	800a8e4 <UART_SetConfig+0xffc>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b0b      	cmp	r3, #11
 800a8d8:	d101      	bne.n	800a8de <UART_SetConfig+0xff6>
 800a8da:	2380      	movs	r3, #128	; 0x80
 800a8dc:	e022      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e2:	e01f      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e8:	e01c      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8ee:	e019      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8f4:	e016      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8fa:	e013      	b.n	800a924 <UART_SetConfig+0x103c>
 800a8fc:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a900:	e010      	b.n	800a924 <UART_SetConfig+0x103c>
 800a902:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a906:	e00d      	b.n	800a924 <UART_SetConfig+0x103c>
 800a908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a90c:	e00a      	b.n	800a924 <UART_SetConfig+0x103c>
 800a90e:	f241 5355 	movw	r3, #5461	; 0x1555
 800a912:	e007      	b.n	800a924 <UART_SetConfig+0x103c>
 800a914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a918:	e004      	b.n	800a924 <UART_SetConfig+0x103c>
 800a91a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a91e:	e001      	b.n	800a924 <UART_SetConfig+0x103c>
 800a920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	6852      	ldr	r2, [r2, #4]
 800a928:	0852      	lsrs	r2, r2, #1
 800a92a:	441a      	add	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	fbb2 f3f3 	udiv	r3, r2, r3
 800a934:	b29b      	uxth	r3, r3
 800a936:	61fb      	str	r3, [r7, #28]
        break;
 800a938:	e002      	b.n	800a940 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	76fb      	strb	r3, [r7, #27]
        break;
 800a93e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d908      	bls.n	800a958 <UART_SetConfig+0x1070>
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a94c:	d204      	bcs.n	800a958 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	60da      	str	r2, [r3, #12]
 800a956:	e001      	b.n	800a95c <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a978:	7efb      	ldrb	r3, [r7, #27]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3728      	adds	r7, #40	; 0x28
 800a97e:	46bd      	mov	sp, r7
 800a980:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a984:	00f42400 	.word	0x00f42400
 800a988:	0001e848 	.word	0x0001e848
 800a98c:	0003d090 	.word	0x0003d090
 800a990:	0007a120 	.word	0x0007a120
 800a994:	000f4240 	.word	0x000f4240
 800a998:	00145855 	.word	0x00145855
 800a99c:	00186a00 	.word	0x00186a00
 800a9a0:	001e8480 	.word	0x001e8480
 800a9a4:	0028b0aa 	.word	0x0028b0aa
 800a9a8:	003d0900 	.word	0x003d0900
 800a9ac:	007a1200 	.word	0x007a1200

0800a9b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00a      	beq.n	800a9da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00a      	beq.n	800a9fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	430a      	orrs	r2, r1
 800a9fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00a      	beq.n	800aa1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa44:	f003 0310 	and.w	r3, r3, #16
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01a      	beq.n	800aac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	430a      	orrs	r2, r1
 800aaa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaae:	d10a      	bne.n	800aac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00a      	beq.n	800aae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	430a      	orrs	r2, r1
 800aae6:	605a      	str	r2, [r3, #4]
  }
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af02      	add	r7, sp, #8
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ab04:	f7f9 fb4a 	bl	800419c <HAL_GetTick>
 800ab08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 0308 	and.w	r3, r3, #8
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d10e      	bne.n	800ab36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 f82c 	bl	800ab84 <UART_WaitOnFlagUntilTimeout>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e022      	b.n	800ab7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b04      	cmp	r3, #4
 800ab42:	d10e      	bne.n	800ab62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f816 	bl	800ab84 <UART_WaitOnFlagUntilTimeout>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e00c      	b.n	800ab7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2220      	movs	r2, #32
 800ab66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab94:	e062      	b.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d05e      	beq.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab9e:	f7f9 fafd 	bl	800419c <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d302      	bcc.n	800abb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d11d      	bne.n	800abf0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abc2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2220      	movs	r2, #32
 800abe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e045      	b.n	800ac7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0304 	and.w	r3, r3, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d02e      	beq.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	69db      	ldr	r3, [r3, #28]
 800ac04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac0c:	d126      	bne.n	800ac5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac16:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac26:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689a      	ldr	r2, [r3, #8]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f022 0201 	bic.w	r2, r2, #1
 800ac36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2220      	movs	r2, #32
 800ac44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e00f      	b.n	800ac7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69da      	ldr	r2, [r3, #28]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	4013      	ands	r3, r2
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2301      	moveq	r3, #1
 800ac6e:	2300      	movne	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	461a      	mov	r2, r3
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d08d      	beq.n	800ab96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <HAL_UARTEx_DisableFifoMode+0x16>
 800ac96:	2302      	movs	r3, #2
 800ac98:	e027      	b.n	800acea <HAL_UARTEx_DisableFifoMode+0x66>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2224      	movs	r2, #36	; 0x24
 800aca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0201 	bic.w	r2, r2, #1
 800acc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2220      	movs	r2, #32
 800acdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d101      	bne.n	800ad0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad0a:	2302      	movs	r3, #2
 800ad0c:	e02d      	b.n	800ad6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2224      	movs	r2, #36	; 0x24
 800ad1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f850 	bl	800adf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2220      	movs	r2, #32
 800ad5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d101      	bne.n	800ad8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad86:	2302      	movs	r3, #2
 800ad88:	e02d      	b.n	800ade6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2224      	movs	r2, #36	; 0x24
 800ad96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f022 0201 	bic.w	r2, r2, #1
 800adb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	683a      	ldr	r2, [r7, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f812 	bl	800adf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2220      	movs	r2, #32
 800add8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
	...

0800adf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b089      	sub	sp, #36	; 0x24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800adf8:	4a2f      	ldr	r2, [pc, #188]	; (800aeb8 <UARTEx_SetNbDataToProcess+0xc8>)
 800adfa:	f107 0314 	add.w	r3, r7, #20
 800adfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae02:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae06:	4a2d      	ldr	r2, [pc, #180]	; (800aebc <UARTEx_SetNbDataToProcess+0xcc>)
 800ae08:	f107 030c 	add.w	r3, r7, #12
 800ae0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae10:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d108      	bne.n	800ae2e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2201      	movs	r2, #1
 800ae28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae2c:	e03d      	b.n	800aeaa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae2e:	2308      	movs	r3, #8
 800ae30:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae32:	2308      	movs	r3, #8
 800ae34:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	0e5b      	lsrs	r3, r3, #25
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0307 	and.w	r3, r3, #7
 800ae44:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	0f5b      	lsrs	r3, r3, #29
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 0307 	and.w	r3, r3, #7
 800ae54:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae56:	7fbb      	ldrb	r3, [r7, #30]
 800ae58:	7f3a      	ldrb	r2, [r7, #28]
 800ae5a:	f107 0120 	add.w	r1, r7, #32
 800ae5e:	440a      	add	r2, r1
 800ae60:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	7f3a      	ldrb	r2, [r7, #28]
 800ae6a:	f107 0120 	add.w	r1, r7, #32
 800ae6e:	440a      	add	r2, r1
 800ae70:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ae74:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ae80:	7ffb      	ldrb	r3, [r7, #31]
 800ae82:	7f7a      	ldrb	r2, [r7, #29]
 800ae84:	f107 0120 	add.w	r1, r7, #32
 800ae88:	440a      	add	r2, r1
 800ae8a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ae8e:	fb02 f303 	mul.w	r3, r2, r3
 800ae92:	7f7a      	ldrb	r2, [r7, #29]
 800ae94:	f107 0120 	add.w	r1, r7, #32
 800ae98:	440a      	add	r2, r1
 800ae9a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ae9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aeaa:	bf00      	nop
 800aeac:	3724      	adds	r7, #36	; 0x24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	0800dc30 	.word	0x0800dc30
 800aebc:	0800dc38 	.word	0x0800dc38

0800aec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aec8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800aecc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	89fb      	ldrh	r3, [r7, #14]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aef8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800aefc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800af04:	b29b      	uxth	r3, r3
 800af06:	b21a      	sxth	r2, r3
 800af08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800af0c:	43db      	mvns	r3, r3
 800af0e:	b21b      	sxth	r3, r3
 800af10:	4013      	ands	r3, r2
 800af12:	b21b      	sxth	r3, r3
 800af14:	b29a      	uxth	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800af2a:	b084      	sub	sp, #16
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	f107 0014 	add.w	r0, r7, #20
 800af38:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff ffaf 	bl	800aec0 <USB_EnableGlobalInt>

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af6e:	b004      	add	sp, #16
 800af70:	4770      	bx	lr

0800af72 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b088      	sub	sp, #32
 800af76:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800af7c:	f107 0308 	add.w	r3, r7, #8
 800af80:	2218      	movs	r2, #24
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f000 ff98 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800af8a:	233f      	movs	r3, #63	; 0x3f
 800af8c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800af8e:	2381      	movs	r3, #129	; 0x81
 800af90:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800af92:	1dfb      	adds	r3, r7, #7
 800af94:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800af96:	2301      	movs	r3, #1
 800af98:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800af9a:	f107 0308 	add.w	r3, r7, #8
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f001 f8fb 	bl	800c19c <hci_send_req>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	da01      	bge.n	800afb0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800afac:	23ff      	movs	r3, #255	; 0xff
 800afae:	e005      	b.n	800afbc <aci_gap_set_non_discoverable+0x4a>
  if (status) 
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <aci_gap_set_non_discoverable+0x48>
  {
    return status;
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	e000      	b.n	800afbc <aci_gap_set_non_discoverable+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800afc4:	b5b0      	push	{r4, r5, r7, lr}
 800afc6:	b0ce      	sub	sp, #312	; 0x138
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4605      	mov	r5, r0
 800afcc:	460c      	mov	r4, r1
 800afce:	4610      	mov	r0, r2
 800afd0:	4619      	mov	r1, r3
 800afd2:	1dfb      	adds	r3, r7, #7
 800afd4:	462a      	mov	r2, r5
 800afd6:	701a      	strb	r2, [r3, #0]
 800afd8:	1d3b      	adds	r3, r7, #4
 800afda:	4622      	mov	r2, r4
 800afdc:	801a      	strh	r2, [r3, #0]
 800afde:	1cbb      	adds	r3, r7, #2
 800afe0:	4602      	mov	r2, r0
 800afe2:	801a      	strh	r2, [r3, #0]
 800afe4:	1dbb      	adds	r3, r7, #6
 800afe6:	460a      	mov	r2, r1
 800afe8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800afea:	f107 0310 	add.w	r3, r7, #16
 800afee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800aff2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800aff6:	3308      	adds	r3, #8
 800aff8:	f107 0210 	add.w	r2, r7, #16
 800affc:	4413      	add	r3, r2
 800affe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b002:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b006:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b00a:	4413      	add	r3, r2
 800b00c:	3309      	adds	r3, #9
 800b00e:	f107 0210 	add.w	r2, r7, #16
 800b012:	4413      	add	r3, r2
 800b014:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b018:	f107 030f 	add.w	r3, r7, #15
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800b026:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b02a:	1dfa      	adds	r2, r7, #7
 800b02c:	7812      	ldrb	r2, [r2, #0]
 800b02e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b030:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b034:	3301      	adds	r3, #1
 800b036:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800b03a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b03e:	1d3a      	adds	r2, r7, #4
 800b040:	8812      	ldrh	r2, [r2, #0]
 800b042:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800b046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b04a:	3302      	adds	r3, #2
 800b04c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800b050:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b054:	1cba      	adds	r2, r7, #2
 800b056:	8812      	ldrh	r2, [r2, #0]
 800b058:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800b05c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b060:	3302      	adds	r3, #2
 800b062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800b066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b06a:	1dba      	adds	r2, r7, #6
 800b06c:	7812      	ldrb	r2, [r2, #0]
 800b06e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b074:	3301      	adds	r3, #1
 800b076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800b07a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b07e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b082:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b084:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b088:	3301      	adds	r3, #1
 800b08a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800b08e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b092:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b096:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b09c:	3301      	adds	r3, #1
 800b09e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length);
 800b0a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b0a6:	3308      	adds	r3, #8
 800b0a8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b0ac:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fef2 	bl	800be9a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800b0b6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b0ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0be:	4413      	add	r3, r2
 800b0c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800b0c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0c8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b0cc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b0ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length);
 800b0d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b0dc:	3301      	adds	r3, #1
 800b0de:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b0e2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fed7 	bl	800be9a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800b0ec:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b0f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800b0fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0fe:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b102:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b108:	3302      	adds	r3, #2
 800b10a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800b10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b112:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b116:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800b118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b11c:	3302      	adds	r3, #2
 800b11e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b126:	2218      	movs	r2, #24
 800b128:	2100      	movs	r1, #0
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fec5 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b130:	233f      	movs	r3, #63	; 0x3f
 800b132:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800b136:	2383      	movs	r3, #131	; 0x83
 800b138:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b13c:	f107 0310 	add.w	r3, r7, #16
 800b140:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b148:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b14c:	f107 030f 	add.w	r3, r7, #15
 800b150:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b15a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b15e:	2100      	movs	r1, #0
 800b160:	4618      	mov	r0, r3
 800b162:	f001 f81b 	bl	800c19c <hci_send_req>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da01      	bge.n	800b170 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800b16c:	23ff      	movs	r3, #255	; 0xff
 800b16e:	e009      	b.n	800b184 <aci_gap_set_discoverable+0x1c0>
  if (status) 
 800b170:	f107 030f 	add.w	r3, r7, #15
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <aci_gap_set_discoverable+0x1be>
  {
    return status;
 800b17a:	f107 030f 	add.w	r3, r7, #15
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	e000      	b.n	800b184 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bdb0      	pop	{r4, r5, r7, pc}

0800b18e <aci_gap_set_io_capability>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b0cc      	sub	sp, #304	; 0x130
 800b192:	af00      	add	r7, sp, #0
 800b194:	4602      	mov	r2, r0
 800b196:	1dfb      	adds	r3, r7, #7
 800b198:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800b19a:	f107 0310 	add.w	r3, r7, #16
 800b19e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b1a2:	f107 030f 	add.w	r3, r7, #15
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = htob(IO_Capability, 1);
 800b1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1b4:	1dfa      	adds	r2, r7, #7
 800b1b6:	7812      	ldrb	r2, [r2, #0]
 800b1b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b1ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1be:	3301      	adds	r3, #1
 800b1c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b1c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1c8:	2218      	movs	r2, #24
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 fe74 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1d2:	233f      	movs	r3, #63	; 0x3f
 800b1d4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800b1d8:	2385      	movs	r3, #133	; 0x85
 800b1da:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b1de:	f107 0310 	add.w	r3, r7, #16
 800b1e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1ee:	f107 030f 	add.w	r3, r7, #15
 800b1f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b1fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b200:	2100      	movs	r1, #0
 800b202:	4618      	mov	r0, r3
 800b204:	f000 ffca 	bl	800c19c <hci_send_req>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	da01      	bge.n	800b212 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800b20e:	23ff      	movs	r3, #255	; 0xff
 800b210:	e009      	b.n	800b226 <aci_gap_set_io_capability+0x98>
  if (status) 
 800b212:	f107 030f 	add.w	r3, r7, #15
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <aci_gap_set_io_capability+0x96>
  {
    return status;
 800b21c:	f107 030f 	add.w	r3, r7, #15
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	e000      	b.n	800b226 <aci_gap_set_io_capability+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800b230:	b5b0      	push	{r4, r5, r7, lr}
 800b232:	b0cc      	sub	sp, #304	; 0x130
 800b234:	af00      	add	r7, sp, #0
 800b236:	4605      	mov	r5, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	4610      	mov	r0, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	1dfb      	adds	r3, r7, #7
 800b240:	462a      	mov	r2, r5
 800b242:	701a      	strb	r2, [r3, #0]
 800b244:	1dbb      	adds	r3, r7, #6
 800b246:	4622      	mov	r2, r4
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	1d7b      	adds	r3, r7, #5
 800b24c:	4602      	mov	r2, r0
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	1d3b      	adds	r3, r7, #4
 800b252:	460a      	mov	r2, r1
 800b254:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800b256:	f107 0310 	add.w	r3, r7, #16
 800b25a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b25e:	f107 030f 	add.w	r3, r7, #15
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800b26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b270:	1dfa      	adds	r2, r7, #7
 800b272:	7812      	ldrb	r2, [r2, #0]
 800b274:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b27a:	3301      	adds	r3, #1
 800b27c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800b280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b284:	1dba      	adds	r2, r7, #6
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b28a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b28e:	3301      	adds	r3, #1
 800b290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = htob(SC_Support, 1);
 800b294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b298:	1d7a      	adds	r2, r7, #5
 800b29a:	7812      	ldrb	r2, [r2, #0]
 800b29c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b29e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800b2a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ac:	1d3a      	adds	r2, r7, #4
 800b2ae:	7812      	ldrb	r2, [r2, #0]
 800b2b0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800b2b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800b2bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800b2c4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b2c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800b2d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2d4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800b2d8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b2da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2de:	3301      	adds	r3, #1
 800b2e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800b2e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2e8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b2ec:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b2ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800b2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800b300:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800b304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b308:	3304      	adds	r3, #4
 800b30a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800b30e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b312:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b316:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800b318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b31c:	3301      	adds	r3, #1
 800b31e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b326:	2218      	movs	r2, #24
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fdc5 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b330:	233f      	movs	r3, #63	; 0x3f
 800b332:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800b336:	2386      	movs	r3, #134	; 0x86
 800b338:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b33c:	f107 0310 	add.w	r3, r7, #16
 800b340:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b344:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b34c:	f107 030f 	add.w	r3, r7, #15
 800b350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b354:	2301      	movs	r3, #1
 800b356:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b35a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b35e:	2100      	movs	r1, #0
 800b360:	4618      	mov	r0, r3
 800b362:	f000 ff1b 	bl	800c19c <hci_send_req>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	da01      	bge.n	800b370 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800b36c:	23ff      	movs	r3, #255	; 0xff
 800b36e:	e009      	b.n	800b384 <aci_gap_set_authentication_requirement+0x154>
  if (status) 
 800b370:	f107 030f 	add.w	r3, r7, #15
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <aci_gap_set_authentication_requirement+0x152>
  {
    return status;
 800b37a:	f107 030f 	add.w	r3, r7, #15
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	e000      	b.n	800b384 <aci_gap_set_authentication_requirement+0x154>
  }
  return BLE_STATUS_SUCCESS;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bdb0      	pop	{r4, r5, r7, pc}

0800b38e <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800b38e:	b590      	push	{r4, r7, lr}
 800b390:	b0cd      	sub	sp, #308	; 0x134
 800b392:	af00      	add	r7, sp, #0
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	463a      	mov	r2, r7
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	1dfb      	adds	r3, r7, #7
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	1dbb      	adds	r3, r7, #6
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	1d7b      	adds	r3, r7, #5
 800b3ac:	460a      	mov	r2, r1
 800b3ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800b3b0:	f107 0310 	add.w	r3, r7, #16
 800b3b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b3b8:	f107 0308 	add.w	r3, r7, #8
 800b3bc:	2207      	movs	r2, #7
 800b3be:	2100      	movs	r1, #0
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fd7a 	bl	800beba <Osal_MemSet>
  int index_input = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = htob(Role, 1);
 800b3cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3d0:	1dfa      	adds	r2, r7, #7
 800b3d2:	7812      	ldrb	r2, [r2, #0]
 800b3d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b3d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3da:	3301      	adds	r3, #1
 800b3dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800b3e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3e4:	1dba      	adds	r2, r7, #6
 800b3e6:	7812      	ldrb	r2, [r2, #0]
 800b3e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b3ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800b3f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b3f8:	1d7a      	adds	r2, r7, #5
 800b3fa:	7812      	ldrb	r2, [r2, #0]
 800b3fc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b3fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b402:	3301      	adds	r3, #1
 800b404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b408:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b40c:	2218      	movs	r2, #24
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fd52 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b416:	233f      	movs	r3, #63	; 0x3f
 800b418:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800b41c:	238a      	movs	r3, #138	; 0x8a
 800b41e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b422:	f107 0310 	add.w	r3, r7, #16
 800b426:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b42e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b432:	f107 0308 	add.w	r3, r7, #8
 800b436:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b43a:	2307      	movs	r3, #7
 800b43c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b440:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b444:	2100      	movs	r1, #0
 800b446:	4618      	mov	r0, r3
 800b448:	f000 fea8 	bl	800c19c <hci_send_req>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	da01      	bge.n	800b456 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800b452:	23ff      	movs	r3, #255	; 0xff
 800b454:	e021      	b.n	800b49a <aci_gap_init+0x10c>
  if (resp.Status) 
 800b456:	f107 0308 	add.w	r3, r7, #8
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d003      	beq.n	800b468 <aci_gap_init+0xda>
  {
    return resp.Status;
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	e018      	b.n	800b49a <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b470:	b29a      	uxth	r2, r3
 800b472:	463b      	mov	r3, r7
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b480:	b29a      	uxth	r2, r3
 800b482:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b486:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800b488:	f107 0308 	add.w	r3, r7, #8
 800b48c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b496:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}

0800b4a4 <aci_gap_update_adv_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b0cc      	sub	sp, #304	; 0x130
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	6019      	str	r1, [r3, #0]
 800b4b0:	1dfb      	adds	r3, r7, #7
 800b4b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800b4b4:	f107 0310 	add.w	r3, r7, #16
 800b4b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b4bc:	f107 030f 	add.w	r3, r7, #15
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800b4ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4ce:	1dfa      	adds	r2, r7, #7
 800b4d0:	7812      	ldrb	r2, [r2, #0]
 800b4d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b4d8:	3301      	adds	r3, #1
 800b4da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen);
 800b4de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b4e2:	1c58      	adds	r0, r3, #1
 800b4e4:	1dfb      	adds	r3, r7, #7
 800b4e6:	781a      	ldrb	r2, [r3, #0]
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	6819      	ldr	r1, [r3, #0]
 800b4ec:	f000 fcd5 	bl	800be9a <Osal_MemCpy>
  index_input += AdvDataLen;
 800b4f0:	1dfb      	adds	r3, r7, #7
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b4fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b502:	2218      	movs	r2, #24
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f000 fcd7 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b50c:	233f      	movs	r3, #63	; 0x3f
 800b50e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800b512:	238e      	movs	r3, #142	; 0x8e
 800b514:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b518:	f107 0310 	add.w	r3, r7, #16
 800b51c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b524:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b528:	f107 030f 	add.w	r3, r7, #15
 800b52c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fe2d 	bl	800c19c <hci_send_req>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	da01      	bge.n	800b54c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800b548:	23ff      	movs	r3, #255	; 0xff
 800b54a:	e009      	b.n	800b560 <aci_gap_update_adv_data+0xbc>
  if (status) 
 800b54c:	f107 030f 	add.w	r3, r7, #15
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <aci_gap_update_adv_data+0xba>
  {
    return status;
 800b556:	f107 030f 	add.w	r3, r7, #15
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	e000      	b.n	800b560 <aci_gap_update_adv_data+0xbc>
  }
  return BLE_STATUS_SUCCESS;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <aci_gap_configure_whitelist>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_configure_whitelist(void)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	2218      	movs	r2, #24
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fc9c 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b582:	233f      	movs	r3, #63	; 0x3f
 800b584:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800b586:	2392      	movs	r3, #146	; 0x92
 800b588:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b58a:	1dfb      	adds	r3, r7, #7
 800b58c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b58e:	2301      	movs	r3, #1
 800b590:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b592:	f107 0308 	add.w	r3, r7, #8
 800b596:	2100      	movs	r1, #0
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fdff 	bl	800c19c <hci_send_req>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	da01      	bge.n	800b5a8 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b5a4:	23ff      	movs	r3, #255	; 0xff
 800b5a6:	e005      	b.n	800b5b4 <aci_gap_configure_whitelist+0x4a>
  if (status) 
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <aci_gap_configure_whitelist+0x48>
  {
    return status;
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	e000      	b.n	800b5b4 <aci_gap_configure_whitelist+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3720      	adds	r7, #32
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b5c6:	f107 0308 	add.w	r3, r7, #8
 800b5ca:	2218      	movs	r2, #24
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fc73 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5d4:	233f      	movs	r3, #63	; 0x3f
 800b5d6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800b5d8:	f240 1301 	movw	r3, #257	; 0x101
 800b5dc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b5de:	1dfb      	adds	r3, r7, #7
 800b5e0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800b5e6:	f107 0308 	add.w	r3, r7, #8
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 fdd5 	bl	800c19c <hci_send_req>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da01      	bge.n	800b5fc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800b5f8:	23ff      	movs	r3, #255	; 0xff
 800b5fa:	e005      	b.n	800b608 <aci_gatt_init+0x4c>
  if (status) 
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <aci_gatt_init+0x4a>
  {
    return status;
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	e000      	b.n	800b608 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800b610:	b590      	push	{r4, r7, lr}
 800b612:	b0cf      	sub	sp, #316	; 0x13c
 800b614:	af00      	add	r7, sp, #0
 800b616:	4604      	mov	r4, r0
 800b618:	4638      	mov	r0, r7
 800b61a:	6001      	str	r1, [r0, #0]
 800b61c:	4610      	mov	r0, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	1dfb      	adds	r3, r7, #7
 800b622:	4622      	mov	r2, r4
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	1dbb      	adds	r3, r7, #6
 800b628:	4602      	mov	r2, r0
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	1d7b      	adds	r3, r7, #5
 800b62e:	460a      	mov	r2, r1
 800b630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800b632:	f107 0310 	add.w	r3, r7, #16
 800b636:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800b63a:	1dfb      	adds	r3, r7, #7
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d007      	beq.n	800b652 <aci_gatt_add_service+0x42>
 800b642:	1dfb      	adds	r3, r7, #7
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b02      	cmp	r3, #2
 800b648:	d101      	bne.n	800b64e <aci_gatt_add_service+0x3e>
 800b64a:	2311      	movs	r3, #17
 800b64c:	e002      	b.n	800b654 <aci_gatt_add_service+0x44>
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <aci_gatt_add_service+0x44>
 800b652:	2303      	movs	r3, #3
 800b654:	f107 0210 	add.w	r2, r7, #16
 800b658:	4413      	add	r3, r2
 800b65a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b65e:	f107 030c 	add.w	r3, r7, #12
 800b662:	2203      	movs	r2, #3
 800b664:	2100      	movs	r1, #0
 800b666:	4618      	mov	r0, r3
 800b668:	f000 fc27 	bl	800beba <Osal_MemSet>
  int index_input = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800b672:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b676:	1dfa      	adds	r2, r7, #7
 800b678:	7812      	ldrb	r2, [r2, #0]
 800b67a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b67c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b680:	3301      	adds	r3, #1
 800b682:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800b686:	1dfb      	adds	r3, r7, #7
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d002      	beq.n	800b694 <aci_gatt_add_service+0x84>
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d004      	beq.n	800b69c <aci_gatt_add_service+0x8c>
 800b692:	e007      	b.n	800b6a4 <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 800b694:	2302      	movs	r3, #2
 800b696:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b69a:	e005      	b.n	800b6a8 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800b69c:	2310      	movs	r3, #16
 800b69e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800b6a2:	e001      	b.n	800b6a8 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800b6a4:	2347      	movs	r3, #71	; 0x47
 800b6a6:	e05d      	b.n	800b764 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800b6a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b6ac:	1c58      	adds	r0, r3, #1
 800b6ae:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	6819      	ldr	r1, [r3, #0]
 800b6b6:	f000 fbf0 	bl	800be9a <Osal_MemCpy>
    index_input += size;
 800b6ba:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800b6be:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800b6c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6cc:	1dba      	adds	r2, r7, #6
 800b6ce:	7812      	ldrb	r2, [r2, #0]
 800b6d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b6d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800b6dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6e0:	1d7a      	adds	r2, r7, #5
 800b6e2:	7812      	ldrb	r2, [r2, #0]
 800b6e4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800b6e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b6f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b6f4:	2218      	movs	r2, #24
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f000 fbde 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b6fe:	233f      	movs	r3, #63	; 0x3f
 800b700:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800b704:	f44f 7381 	mov.w	r3, #258	; 0x102
 800b708:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b70c:	f107 0310 	add.w	r3, r7, #16
 800b710:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b718:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800b71c:	f107 030c 	add.w	r3, r7, #12
 800b720:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800b724:	2303      	movs	r3, #3
 800b726:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800b72a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b72e:	2100      	movs	r1, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fd33 	bl	800c19c <hci_send_req>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	da01      	bge.n	800b740 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800b73c:	23ff      	movs	r3, #255	; 0xff
 800b73e:	e011      	b.n	800b764 <aci_gatt_add_service+0x154>
  if (resp.Status) 
 800b740:	f107 030c 	add.w	r3, r7, #12
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d003      	beq.n	800b752 <aci_gatt_add_service+0x142>
  {
    return resp.Status;
 800b74a:	f107 030c 	add.w	r3, r7, #12
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	e008      	b.n	800b764 <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800b752:	f107 030c 	add.w	r3, r7, #12
 800b756:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b760:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd90      	pop	{r4, r7, pc}

0800b76e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800b76e:	b590      	push	{r4, r7, lr}
 800b770:	b0d1      	sub	sp, #324	; 0x144
 800b772:	af00      	add	r7, sp, #0
 800b774:	4604      	mov	r4, r0
 800b776:	4608      	mov	r0, r1
 800b778:	f107 0108 	add.w	r1, r7, #8
 800b77c:	600a      	str	r2, [r1, #0]
 800b77e:	4619      	mov	r1, r3
 800b780:	f107 030e 	add.w	r3, r7, #14
 800b784:	4622      	mov	r2, r4
 800b786:	801a      	strh	r2, [r3, #0]
 800b788:	f107 030d 	add.w	r3, r7, #13
 800b78c:	4602      	mov	r2, r0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	1dbb      	adds	r3, r7, #6
 800b792:	460a      	mov	r2, r1
 800b794:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800b796:	f107 0318 	add.w	r3, r7, #24
 800b79a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800b79e:	f107 030d 	add.w	r3, r7, #13
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d008      	beq.n	800b7ba <aci_gatt_add_char+0x4c>
 800b7a8:	f107 030d 	add.w	r3, r7, #13
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d101      	bne.n	800b7b6 <aci_gatt_add_char+0x48>
 800b7b2:	2313      	movs	r3, #19
 800b7b4:	e002      	b.n	800b7bc <aci_gatt_add_char+0x4e>
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e000      	b.n	800b7bc <aci_gatt_add_char+0x4e>
 800b7ba:	2305      	movs	r3, #5
 800b7bc:	f107 0218 	add.w	r2, r7, #24
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800b7c6:	f107 0314 	add.w	r3, r7, #20
 800b7ca:	2203      	movs	r2, #3
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fb73 	bl	800beba <Osal_MemSet>
  int index_input = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b7da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b7de:	f107 020e 	add.w	r2, r7, #14
 800b7e2:	8812      	ldrh	r2, [r2, #0]
 800b7e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b7e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b7ea:	3302      	adds	r3, #2
 800b7ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800b7f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b7f4:	f107 020d 	add.w	r2, r7, #13
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b7fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b800:	3301      	adds	r3, #1
 800b802:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800b806:	f107 030d 	add.w	r3, r7, #13
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d002      	beq.n	800b816 <aci_gatt_add_char+0xa8>
 800b810:	2b02      	cmp	r3, #2
 800b812:	d004      	beq.n	800b81e <aci_gatt_add_char+0xb0>
 800b814:	e007      	b.n	800b826 <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 800b816:	2302      	movs	r3, #2
 800b818:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b81c:	e005      	b.n	800b82a <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800b81e:	2310      	movs	r3, #16
 800b820:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b824:	e001      	b.n	800b82a <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800b826:	2347      	movs	r3, #71	; 0x47
 800b828:	e086      	b.n	800b938 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800b82a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b82e:	1cd8      	adds	r0, r3, #3
 800b830:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800b834:	f107 0308 	add.w	r3, r7, #8
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	f000 fb2e 	bl	800be9a <Osal_MemCpy>
    index_input += size;
 800b83e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b842:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800b846:	4413      	add	r3, r2
 800b848:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800b84c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b850:	1dba      	adds	r2, r7, #6
 800b852:	8812      	ldrh	r2, [r2, #0]
 800b854:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b856:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b85a:	3302      	adds	r3, #2
 800b85c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800b860:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b864:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b868:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b86a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b86e:	3301      	adds	r3, #1
 800b870:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800b874:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b878:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b87c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b87e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b882:	3301      	adds	r3, #1
 800b884:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800b888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b88c:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800b890:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b892:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b896:	3301      	adds	r3, #1
 800b898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800b89c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8a0:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800b8a4:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b8a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800b8b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8b4:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800b8b8:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b8ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8be:	3301      	adds	r3, #1
 800b8c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b8c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b8c8:	2218      	movs	r2, #24
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 faf4 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b8d2:	233f      	movs	r3, #63	; 0x3f
 800b8d4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800b8d8:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b8dc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b8e0:	f107 0318 	add.w	r3, r7, #24
 800b8e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b8e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800b8fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b902:	2100      	movs	r1, #0
 800b904:	4618      	mov	r0, r3
 800b906:	f000 fc49 	bl	800c19c <hci_send_req>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	da01      	bge.n	800b914 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800b910:	23ff      	movs	r3, #255	; 0xff
 800b912:	e011      	b.n	800b938 <aci_gatt_add_char+0x1ca>
  if (resp.Status) 
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <aci_gatt_add_char+0x1b8>
  {
    return resp.Status;
 800b91e:	f107 0314 	add.w	r3, r7, #20
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	e008      	b.n	800b938 <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800b926:	f107 0314 	add.w	r3, r7, #20
 800b92a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800b934:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd90      	pop	{r4, r7, pc}

0800b942 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800b942:	b5b0      	push	{r4, r5, r7, lr}
 800b944:	b0cc      	sub	sp, #304	; 0x130
 800b946:	af00      	add	r7, sp, #0
 800b948:	4605      	mov	r5, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	4610      	mov	r0, r2
 800b94e:	4619      	mov	r1, r3
 800b950:	1dbb      	adds	r3, r7, #6
 800b952:	462a      	mov	r2, r5
 800b954:	801a      	strh	r2, [r3, #0]
 800b956:	1d3b      	adds	r3, r7, #4
 800b958:	4622      	mov	r2, r4
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	1cfb      	adds	r3, r7, #3
 800b95e:	4602      	mov	r2, r0
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	1cbb      	adds	r3, r7, #2
 800b964:	460a      	mov	r2, r1
 800b966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b968:	f107 0310 	add.w	r3, r7, #16
 800b96c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b970:	f107 030f 	add.w	r3, r7, #15
 800b974:	2200      	movs	r2, #0
 800b976:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = htob(Service_Handle, 2);
 800b97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b982:	1dba      	adds	r2, r7, #6
 800b984:	8812      	ldrh	r2, [r2, #0]
 800b986:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b98c:	3302      	adds	r3, #2
 800b98e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = htob(Char_Handle, 2);
 800b992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b996:	1d3a      	adds	r2, r7, #4
 800b998:	8812      	ldrh	r2, [r2, #0]
 800b99a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b99c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = htob(Val_Offset, 1);
 800b9a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9aa:	1cfa      	adds	r2, r7, #3
 800b9ac:	7812      	ldrb	r2, [r2, #0]
 800b9ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b9b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800b9ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9be:	1cba      	adds	r2, r7, #2
 800b9c0:	7812      	ldrb	r2, [r2, #0]
 800b9c2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b9c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
 800b9ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9d2:	1d98      	adds	r0, r3, #6
 800b9d4:	1cbb      	adds	r3, r7, #2
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800b9de:	f000 fa5c 	bl	800be9a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b9e2:	1cbb      	adds	r3, r7, #2
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800b9f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b9f4:	2218      	movs	r2, #24
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 fa5e 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800b9fe:	233f      	movs	r3, #63	; 0x3f
 800ba00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800ba04:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ba08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ba0c:	f107 0310 	add.w	r3, r7, #16
 800ba10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ba14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ba1c:	f107 030f 	add.w	r3, r7, #15
 800ba20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ba2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba2e:	2100      	movs	r1, #0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 fbb3 	bl	800c19c <hci_send_req>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	da01      	bge.n	800ba40 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800ba3c:	23ff      	movs	r3, #255	; 0xff
 800ba3e:	e009      	b.n	800ba54 <aci_gatt_update_char_value+0x112>
  if (status) 
 800ba40:	f107 030f 	add.w	r3, r7, #15
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <aci_gatt_update_char_value+0x110>
  {
    return status;
 800ba4a:	f107 030f 	add.w	r3, r7, #15
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	e000      	b.n	800ba54 <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ba5e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b0cc      	sub	sp, #304	; 0x130
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	463b      	mov	r3, r7
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	1dfb      	adds	r3, r7, #7
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	1dbb      	adds	r3, r7, #6
 800ba70:	460a      	mov	r2, r1
 800ba72:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ba74:	f107 0310 	add.w	r3, r7, #16
 800ba78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ba7c:	f107 030f 	add.w	r3, r7, #15
 800ba80:	2200      	movs	r2, #0
 800ba82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = htob(Offset, 1);
 800ba8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba8e:	1dfa      	adds	r2, r7, #7
 800ba90:	7812      	ldrb	r2, [r2, #0]
 800ba92:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ba94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba98:	3301      	adds	r3, #1
 800ba9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = htob(Length, 1);
 800ba9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baa2:	1dba      	adds	r2, r7, #6
 800baa4:	7812      	ldrb	r2, [r2, #0]
 800baa6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800baa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baac:	3301      	adds	r3, #1
 800baae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
 800bab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bab6:	1c98      	adds	r0, r3, #2
 800bab8:	1dbb      	adds	r3, r7, #6
 800baba:	781a      	ldrb	r2, [r3, #0]
 800babc:	463b      	mov	r3, r7
 800babe:	6819      	ldr	r1, [r3, #0]
 800bac0:	f000 f9eb 	bl	800be9a <Osal_MemCpy>
  index_input += Length;
 800bac4:	1dbb      	adds	r3, r7, #6
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800bacc:	4413      	add	r3, r2
 800bace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bad6:	2218      	movs	r2, #24
 800bad8:	2100      	movs	r1, #0
 800bada:	4618      	mov	r0, r3
 800badc:	f000 f9ed 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800bae0:	233f      	movs	r3, #63	; 0x3f
 800bae2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800bae6:	230c      	movs	r3, #12
 800bae8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800baec:	f107 0310 	add.w	r3, r7, #16
 800baf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800baf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800baf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bafc:	f107 030f 	add.w	r3, r7, #15
 800bb00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bb04:	2301      	movs	r3, #1
 800bb06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bb0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 fb43 	bl	800c19c <hci_send_req>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da01      	bge.n	800bb20 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800bb1c:	23ff      	movs	r3, #255	; 0xff
 800bb1e:	e009      	b.n	800bb34 <aci_hal_write_config_data+0xd6>
  if (status) 
 800bb20:	f107 030f 	add.w	r3, r7, #15
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <aci_hal_write_config_data+0xd4>
  {
    return status;
 800bb2a:	f107 030f 	add.w	r3, r7, #15
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	e000      	b.n	800bb34 <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b0cc      	sub	sp, #304	; 0x130
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	4602      	mov	r2, r0
 800bb46:	1dfb      	adds	r3, r7, #7
 800bb48:	701a      	strb	r2, [r3, #0]
 800bb4a:	1dbb      	adds	r3, r7, #6
 800bb4c:	460a      	mov	r2, r1
 800bb4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800bb50:	f107 0310 	add.w	r3, r7, #16
 800bb54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bb58:	f107 030f 	add.w	r3, r7, #15
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = htob(En_High_Power, 1);
 800bb66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb6a:	1dfa      	adds	r2, r7, #7
 800bb6c:	7812      	ldrb	r2, [r2, #0]
 800bb6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bb70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb74:	3301      	adds	r3, #1
 800bb76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = htob(PA_Level, 1);
 800bb7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb7e:	1dba      	adds	r2, r7, #6
 800bb80:	7812      	ldrb	r2, [r2, #0]
 800bb82:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bb84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb88:	3301      	adds	r3, #1
 800bb8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bb8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb92:	2218      	movs	r2, #24
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f000 f98f 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb9c:	233f      	movs	r3, #63	; 0x3f
 800bb9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800bba2:	230f      	movs	r3, #15
 800bba4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bba8:	f107 0310 	add.w	r3, r7, #16
 800bbac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bbb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bbb8:	f107 030f 	add.w	r3, r7, #15
 800bbbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bbc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbca:	2100      	movs	r1, #0
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 fae5 	bl	800c19c <hci_send_req>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da01      	bge.n	800bbdc <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800bbd8:	23ff      	movs	r3, #255	; 0xff
 800bbda:	e009      	b.n	800bbf0 <aci_hal_set_tx_power_level+0xb2>
  if (status) 
 800bbdc:	f107 030f 	add.w	r3, r7, #15
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d003      	beq.n	800bbee <aci_hal_set_tx_power_level+0xb0>
  {
    return status;
 800bbe6:	f107 030f 	add.w	r3, r7, #15
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	e000      	b.n	800bbf0 <aci_hal_set_tx_power_level+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b0cc      	sub	sp, #304	; 0x130
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	4602      	mov	r2, r0
 800bc02:	1dbb      	adds	r3, r7, #6
 800bc04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800bc06:	f107 0310 	add.w	r3, r7, #16
 800bc0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bc0e:	f107 030f 	add.w	r3, r7, #15
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
 800bc1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc20:	1dba      	adds	r2, r7, #6
 800bc22:	8812      	ldrh	r2, [r2, #0]
 800bc24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bc26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc2a:	3302      	adds	r3, #2
 800bc2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bc30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc34:	2218      	movs	r2, #24
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f93e 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x3f;
 800bc3e:	233f      	movs	r3, #63	; 0x3f
 800bc40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800bc44:	2318      	movs	r3, #24
 800bc46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bc4a:	f107 0310 	add.w	r3, r7, #16
 800bc4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bc52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bc5a:	f107 030f 	add.w	r3, r7, #15
 800bc5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800bc68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fa94 	bl	800c19c <hci_send_req>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da01      	bge.n	800bc7e <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800bc7a:	23ff      	movs	r3, #255	; 0xff
 800bc7c:	e009      	b.n	800bc92 <aci_hal_set_radio_activity_mask+0x98>
  if (status) 
 800bc7e:	f107 030f 	add.w	r3, r7, #15
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d003      	beq.n	800bc90 <aci_hal_set_radio_activity_mask+0x96>
  {
    return status;
 800bc88:	f107 030f 	add.w	r3, r7, #15
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	e000      	b.n	800bc92 <aci_hal_set_radio_activity_mask+0x98>
  }
  return BLE_STATUS_SUCCESS;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <hci_reset>:
  }
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_reset(void)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bca6:	f107 0308 	add.w	r3, r7, #8
 800bcaa:	2218      	movs	r2, #24
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f903 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x03;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bcbc:	1dfb      	adds	r3, r7, #7
 800bcbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800bcc4:	f107 0308 	add.w	r3, r7, #8
 800bcc8:	2100      	movs	r1, #0
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fa66 	bl	800c19c <hci_send_req>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	da01      	bge.n	800bcda <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bcd6:	23ff      	movs	r3, #255	; 0xff
 800bcd8:	e005      	b.n	800bce6 <hci_reset+0x4a>
  if (status) 
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <hci_reset+0x48>
  {
    return status;
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	e000      	b.n	800bce6 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3720      	adds	r7, #32
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy(uint16_t Connection_Handle,
                           uint8_t *TX_PHY,
                           uint8_t *RX_PHY)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b0ce      	sub	sp, #312	; 0x138
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	f107 0308 	add.w	r3, r7, #8
 800bcf8:	6019      	str	r1, [r3, #0]
 800bcfa:	1d3b      	adds	r3, r7, #4
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	f107 030e 	add.w	r3, r7, #14
 800bd02:	4602      	mov	r2, r0
 800bd04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800bd06:	f107 0318 	add.w	r3, r7, #24
 800bd0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet(&resp, 0, sizeof(resp));
 800bd0e:	f107 0310 	add.w	r3, r7, #16
 800bd12:	2205      	movs	r2, #5
 800bd14:	2100      	movs	r1, #0
 800bd16:	4618      	mov	r0, r3
 800bd18:	f000 f8cf 	bl	800beba <Osal_MemSet>
  int index_input = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800bd22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bd26:	f107 020e 	add.w	r2, r7, #14
 800bd2a:	8812      	ldrh	r2, [r2, #0]
 800bd2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bd2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd32:	3302      	adds	r3, #2
 800bd34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet(&rq, 0, sizeof(rq));
 800bd38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd3c:	2218      	movs	r2, #24
 800bd3e:	2100      	movs	r1, #0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 f8ba 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x08;
 800bd46:	2308      	movs	r3, #8
 800bd48:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800bd4c:	2330      	movs	r3, #48	; 0x30
 800bd4e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800bd52:	f107 0318 	add.w	r3, r7, #24
 800bd56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800bd5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800bd62:	f107 0310 	add.w	r3, r7, #16
 800bd66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800bd6a:	2305      	movs	r3, #5
 800bd6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800bd70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 fa10 	bl	800c19c <hci_send_req>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da01      	bge.n	800bd86 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800bd82:	23ff      	movs	r3, #255	; 0xff
 800bd84:	e016      	b.n	800bdb4 <hci_le_read_phy+0xc6>
  if (resp.Status) 
 800bd86:	f107 0310 	add.w	r3, r7, #16
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <hci_le_read_phy+0xaa>
  {
    return resp.Status;
 800bd90:	f107 0310 	add.w	r3, r7, #16
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	e00d      	b.n	800bdb4 <hci_le_read_phy+0xc6>
  }
  *TX_PHY = btoh(resp.TX_PHY, 1);
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	78da      	ldrb	r2, [r3, #3]
 800bd9e:	f107 0308 	add.w	r3, r7, #8
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	701a      	strb	r2, [r3, #0]
  *RX_PHY = btoh(resp.RX_PHY, 1);
 800bda6:	f107 0310 	add.w	r3, r7, #16
 800bdaa:	791a      	ldrb	r2, [r3, #4]
 800bdac:	1d3b      	adds	r3, r7, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS,
                                  uint8_t TX_PHYS,
                                  uint8_t RX_PHYS)
{
 800bdbe:	b590      	push	{r4, r7, lr}
 800bdc0:	b0cd      	sub	sp, #308	; 0x134
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	4604      	mov	r4, r0
 800bdc6:	4608      	mov	r0, r1
 800bdc8:	4611      	mov	r1, r2
 800bdca:	1dfb      	adds	r3, r7, #7
 800bdcc:	4622      	mov	r2, r4
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	1dbb      	adds	r3, r7, #6
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	1d7b      	adds	r3, r7, #5
 800bdd8:	460a      	mov	r2, r1
 800bdda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800bddc:	f107 0310 	add.w	r3, r7, #16
 800bde0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bde4:	f107 030f 	add.w	r3, r7, #15
 800bde8:	2200      	movs	r2, #0
 800bdea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bdec:	2300      	movs	r3, #0
 800bdee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = htob(ALL_PHYS, 1);
 800bdf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bdf6:	1dfa      	adds	r2, r7, #7
 800bdf8:	7812      	ldrb	r2, [r2, #0]
 800bdfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bdfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be00:	3301      	adds	r3, #1
 800be02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = htob(TX_PHYS, 1);
 800be06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be0a:	1dba      	adds	r2, r7, #6
 800be0c:	7812      	ldrb	r2, [r2, #0]
 800be0e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800be10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be14:	3301      	adds	r3, #1
 800be16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = htob(RX_PHYS, 1);
 800be1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be1e:	1d7a      	adds	r2, r7, #5
 800be20:	7812      	ldrb	r2, [r2, #0]
 800be22:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800be24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be28:	3301      	adds	r3, #1
 800be2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet(&rq, 0, sizeof(rq));
 800be2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be32:	2218      	movs	r2, #24
 800be34:	2100      	movs	r1, #0
 800be36:	4618      	mov	r0, r3
 800be38:	f000 f83f 	bl	800beba <Osal_MemSet>
  rq.ogf = 0x08;
 800be3c:	2308      	movs	r3, #8
 800be3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800be42:	2331      	movs	r3, #49	; 0x31
 800be44:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800be48:	f107 0310 	add.w	r3, r7, #16
 800be4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800be50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800be58:	f107 030f 	add.w	r3, r7, #15
 800be5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800be60:	2301      	movs	r3, #1
 800be62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800be66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be6a:	2100      	movs	r1, #0
 800be6c:	4618      	mov	r0, r3
 800be6e:	f000 f995 	bl	800c19c <hci_send_req>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	da01      	bge.n	800be7c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800be78:	23ff      	movs	r3, #255	; 0xff
 800be7a:	e009      	b.n	800be90 <hci_le_set_default_phy+0xd2>
  if (status) 
 800be7c:	f107 030f 	add.w	r3, r7, #15
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <hci_le_set_default_phy+0xd0>
  {
    return status;
 800be86:	f107 030f 	add.w	r3, r7, #15
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	e000      	b.n	800be90 <hci_le_set_default_phy+0xd2>
  }
  return BLE_STATUS_SUCCESS;
 800be8e:	2300      	movs	r3, #0
}
 800be90:	4618      	mov	r0, r3
 800be92:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800be96:	46bd      	mov	sp, r7
 800be98:	bd90      	pop	{r4, r7, pc}

0800be9a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	f001 fd5c 	bl	800d968 <memcpy>
 800beb0:	4603      	mov	r3, r0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	60f8      	str	r0, [r7, #12]
 800bec2:	60b9      	str	r1, [r7, #8]
 800bec4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f001 fd57 	bl	800d97e <memset>
 800bed0:	4603      	mov	r3, r0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800beda:	b480      	push	{r7}
 800bedc:	af00      	add	r7, sp, #0
  return;
 800bede:	bf00      	nop
}
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800bee8:	b480      	push	{r7}
 800beea:	af00      	add	r7, sp, #0
  return;
 800beec:	bf00      	nop
}
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <DIS_Init>:
__weak void DIS_Init( void )
{
 800bef6:	b480      	push	{r7}
 800bef8:	af00      	add	r7, sp, #0
  return;
 800befa:	bf00      	nop
}
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800bf04:	b480      	push	{r7}
 800bf06:	af00      	add	r7, sp, #0
  return;
 800bf08:	bf00      	nop
}
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800bf12:	b480      	push	{r7}
 800bf14:	af00      	add	r7, sp, #0
  return;
 800bf16:	bf00      	nop
}
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HRS_Init>:
__weak void HRS_Init( void )
{
 800bf20:	b480      	push	{r7}
 800bf22:	af00      	add	r7, sp, #0
  return;
 800bf24:	bf00      	nop
}
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <HTS_Init>:
__weak void HTS_Init( void )
{
 800bf2e:	b480      	push	{r7}
 800bf30:	af00      	add	r7, sp, #0
  return;
 800bf32:	bf00      	nop
}
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <IAS_Init>:
__weak void IAS_Init( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
  return;
 800bf40:	bf00      	nop
}
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <LLS_Init>:
__weak void LLS_Init( void )
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	af00      	add	r7, sp, #0
  return;
 800bf4e:	bf00      	nop
}
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <TPS_Init>:
__weak void TPS_Init( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	af00      	add	r7, sp, #0
  return;
 800bf5c:	bf00      	nop
}
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800bf66:	b480      	push	{r7}
 800bf68:	af00      	add	r7, sp, #0
  return;
 800bf6a:	bf00      	nop
}
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
  return;
 800bf78:	bf00      	nop
}
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <MESH_Init>:
__weak void MESH_Init( void )
{
 800bf82:	b480      	push	{r7}
 800bf84:	af00      	add	r7, sp, #0
  return;
 800bf86:	bf00      	nop
}
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800bf90:	b480      	push	{r7}
 800bf92:	af00      	add	r7, sp, #0
  return;
 800bf94:	bf00      	nop
}
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bfa4:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <SVCCTL_Init+0x18>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bfaa:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <SVCCTL_Init+0x1c>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bfb0:	f7f6 fbf6 	bl	80027a0 <SVCCTL_SvcInit>

  return;
 800bfb4:	bf00      	nop
}
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	20000140 	.word	0x20000140
 800bfbc:	20000160 	.word	0x20000160

0800bfc0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bfc8:	4b09      	ldr	r3, [pc, #36]	; (800bff0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfca:	7f1b      	ldrb	r3, [r3, #28]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4a08      	ldr	r2, [pc, #32]	; (800bff0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bfd6:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfd8:	7f1b      	ldrb	r3, [r3, #28]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	4b04      	ldr	r3, [pc, #16]	; (800bff0 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfe0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800bfe2:	bf00      	nop
}
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20000140 	.word	0x20000140

0800bff4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3301      	adds	r3, #1
 800c000:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c002:	2300      	movs	r3, #0
 800c004:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	2bff      	cmp	r3, #255	; 0xff
 800c00c:	d000      	beq.n	800c010 <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800c00e:	e025      	b.n	800c05c <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	3302      	adds	r3, #2
 800c014:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c020:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c024:	d000      	beq.n	800c028 <SVCCTL_UserEvtRx+0x34>
          break;
 800c026:	e018      	b.n	800c05a <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c028:	2300      	movs	r3, #0
 800c02a:	757b      	strb	r3, [r7, #21]
 800c02c:	e00d      	b.n	800c04a <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c02e:	7d7b      	ldrb	r3, [r7, #21]
 800c030:	4a18      	ldr	r2, [pc, #96]	; (800c094 <SVCCTL_UserEvtRx+0xa0>)
 800c032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	4798      	blx	r3
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d108      	bne.n	800c056 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c044:	7d7b      	ldrb	r3, [r7, #21]
 800c046:	3301      	adds	r3, #1
 800c048:	757b      	strb	r3, [r7, #21]
 800c04a:	4b12      	ldr	r3, [pc, #72]	; (800c094 <SVCCTL_UserEvtRx+0xa0>)
 800c04c:	7f1b      	ldrb	r3, [r3, #28]
 800c04e:	7d7a      	ldrb	r2, [r7, #21]
 800c050:	429a      	cmp	r2, r3
 800c052:	d3ec      	bcc.n	800c02e <SVCCTL_UserEvtRx+0x3a>
          break;
 800c054:	e000      	b.n	800c058 <SVCCTL_UserEvtRx+0x64>
              break;
 800c056:	bf00      	nop
          break;
 800c058:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800c05a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d009      	beq.n	800c076 <SVCCTL_UserEvtRx+0x82>
 800c062:	2b02      	cmp	r3, #2
 800c064:	d00a      	beq.n	800c07c <SVCCTL_UserEvtRx+0x88>
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10b      	bne.n	800c082 <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fe1a 	bl	800cca4 <SVCCTL_App_Notification>
 800c070:	4603      	mov	r3, r0
 800c072:	75bb      	strb	r3, [r7, #22]
      break;
 800c074:	e008      	b.n	800c088 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c076:	2301      	movs	r3, #1
 800c078:	75bb      	strb	r3, [r7, #22]
      break;
 800c07a:	e005      	b.n	800c088 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c07c:	2300      	movs	r3, #0
 800c07e:	75bb      	strb	r3, [r7, #22]
      break;
 800c080:	e002      	b.n	800c088 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c082:	2301      	movs	r3, #1
 800c084:	75bb      	strb	r3, [r7, #22]
      break;
 800c086:	bf00      	nop
  }

  return (return_status);
 800c088:	7dbb      	ldrb	r3, [r7, #22]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3718      	adds	r7, #24
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20000140 	.word	0x20000140

0800c098 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	2121      	movs	r1, #33	; 0x21
 800c0b0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800c0b4:	f000 fa08 	bl	800c4c8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	330b      	adds	r3, #11
 800c0bc:	78db      	ldrb	r3, [r3, #3]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3720      	adds	r7, #32
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
	...

0800c0c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	4a08      	ldr	r2, [pc, #32]	; (800c0f8 <hci_init+0x30>)
 800c0d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c0da:	4a08      	ldr	r2, [pc, #32]	; (800c0fc <hci_init+0x34>)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c0e0:	4806      	ldr	r0, [pc, #24]	; (800c0fc <hci_init+0x34>)
 800c0e2:	f000 f973 	bl	800c3cc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f8d4 	bl	800c298 <TlInit>

  return;
 800c0f0:	bf00      	nop
}
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	2000039c 	.word	0x2000039c
 800c0fc:	20000374 	.word	0x20000374

0800c100 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c106:	4822      	ldr	r0, [pc, #136]	; (800c190 <hci_user_evt_proc+0x90>)
 800c108:	f000 fc9a 	bl	800ca40 <LST_is_empty>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d12b      	bne.n	800c16a <hci_user_evt_proc+0x6a>
 800c112:	4b20      	ldr	r3, [pc, #128]	; (800c194 <hci_user_evt_proc+0x94>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d027      	beq.n	800c16a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c11a:	f107 030c 	add.w	r3, r7, #12
 800c11e:	4619      	mov	r1, r3
 800c120:	481b      	ldr	r0, [pc, #108]	; (800c190 <hci_user_evt_proc+0x90>)
 800c122:	f000 fd14 	bl	800cb4e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c126:	4b1c      	ldr	r3, [pc, #112]	; (800c198 <hci_user_evt_proc+0x98>)
 800c128:	69db      	ldr	r3, [r3, #28]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c132:	2301      	movs	r3, #1
 800c134:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c136:	4b18      	ldr	r3, [pc, #96]	; (800c198 <hci_user_evt_proc+0x98>)
 800c138:	69db      	ldr	r3, [r3, #28]
 800c13a:	1d3a      	adds	r2, r7, #4
 800c13c:	4610      	mov	r0, r2
 800c13e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c140:	793a      	ldrb	r2, [r7, #4]
 800c142:	4b14      	ldr	r3, [pc, #80]	; (800c194 <hci_user_evt_proc+0x94>)
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	e002      	b.n	800c14e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c148:	4b12      	ldr	r3, [pc, #72]	; (800c194 <hci_user_evt_proc+0x94>)
 800c14a:	2201      	movs	r2, #1
 800c14c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c14e:	4b11      	ldr	r3, [pc, #68]	; (800c194 <hci_user_evt_proc+0x94>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d004      	beq.n	800c160 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fbcf 	bl	800c8fc <TL_MM_EvtDone>
 800c15e:	e004      	b.n	800c16a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4619      	mov	r1, r3
 800c164:	480a      	ldr	r0, [pc, #40]	; (800c190 <hci_user_evt_proc+0x90>)
 800c166:	f000 fc8b 	bl	800ca80 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c16a:	4809      	ldr	r0, [pc, #36]	; (800c190 <hci_user_evt_proc+0x90>)
 800c16c:	f000 fc68 	bl	800ca40 <LST_is_empty>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d107      	bne.n	800c186 <hci_user_evt_proc+0x86>
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <hci_user_evt_proc+0x94>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d003      	beq.n	800c186 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c17e:	4804      	ldr	r0, [pc, #16]	; (800c190 <hci_user_evt_proc+0x90>)
 800c180:	f001 f80d 	bl	800d19e <hci_notify_asynch_evt>
  }


  return;
 800c184:	bf00      	nop
 800c186:	bf00      	nop
}
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20000168 	.word	0x20000168
 800c194:	20000174 	.word	0x20000174
 800c198:	20000374 	.word	0x20000374

0800c19c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	f000 f8cb 	bl	800c344 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	b21b      	sxth	r3, r3
 800c1b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1bc:	b21a      	sxth	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	881b      	ldrh	r3, [r3, #0]
 800c1c2:	029b      	lsls	r3, r3, #10
 800c1c4:	b21b      	sxth	r3, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	b21b      	sxth	r3, r3
 800c1ca:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	b2d9      	uxtb	r1, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689a      	ldr	r2, [r3, #8]
 800c1d6:	8bbb      	ldrh	r3, [r7, #28]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 f88d 	bl	800c2f8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c1de:	e04e      	b.n	800c27e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c1e0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c1e4:	f000 fff2 	bl	800d1cc <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c1e8:	e043      	b.n	800c272 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4828      	ldr	r0, [pc, #160]	; (800c294 <hci_send_req+0xf8>)
 800c1f2:	f000 fcac 	bl	800cb4e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	7a5b      	ldrb	r3, [r3, #9]
 800c1fa:	2b0f      	cmp	r3, #15
 800c1fc:	d114      	bne.n	800c228 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	330b      	adds	r3, #11
 800c202:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	885b      	ldrh	r3, [r3, #2]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	8bba      	ldrh	r2, [r7, #28]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d104      	bne.n	800c21a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	693a      	ldr	r2, [r7, #16]
 800c216:	7812      	ldrb	r2, [r2, #0]
 800c218:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d027      	beq.n	800c272 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c222:	2301      	movs	r3, #1
 800c224:	77fb      	strb	r3, [r7, #31]
 800c226:	e024      	b.n	800c272 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	330b      	adds	r3, #11
 800c22c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c234:	b29b      	uxth	r3, r3
 800c236:	8bba      	ldrh	r2, [r7, #28]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d114      	bne.n	800c266 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	7a9b      	ldrb	r3, [r3, #10]
 800c240:	3b03      	subs	r3, #3
 800c242:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	695a      	ldr	r2, [r3, #20]
 800c248:	7dfb      	ldrb	r3, [r7, #23]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	bfa8      	it	ge
 800c24e:	461a      	movge	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6918      	ldr	r0, [r3, #16]
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	1cd9      	adds	r1, r3, #3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	461a      	mov	r2, r3
 800c262:	f001 fb81 	bl	800d968 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c26e:	2301      	movs	r3, #1
 800c270:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c272:	4808      	ldr	r0, [pc, #32]	; (800c294 <hci_send_req+0xf8>)
 800c274:	f000 fbe4 	bl	800ca40 <LST_is_empty>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0b5      	beq.n	800c1ea <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c27e:	7ffb      	ldrb	r3, [r7, #31]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0ad      	beq.n	800c1e0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c284:	2001      	movs	r0, #1
 800c286:	f000 f85d 	bl	800c344 <NotifyCmdStatus>

  return 0;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}
 800c294:	20000394 	.word	0x20000394

0800c298 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c2a0:	480f      	ldr	r0, [pc, #60]	; (800c2e0 <TlInit+0x48>)
 800c2a2:	f000 fbbd 	bl	800ca20 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c2a6:	4a0f      	ldr	r2, [pc, #60]	; (800c2e4 <TlInit+0x4c>)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c2ac:	480e      	ldr	r0, [pc, #56]	; (800c2e8 <TlInit+0x50>)
 800c2ae:	f000 fbb7 	bl	800ca20 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c2b2:	4b0e      	ldr	r3, [pc, #56]	; (800c2ec <TlInit+0x54>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c2b8:	4b0d      	ldr	r3, [pc, #52]	; (800c2f0 <TlInit+0x58>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00a      	beq.n	800c2d6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <TlInit+0x5c>)
 800c2c6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c2c8:	4b09      	ldr	r3, [pc, #36]	; (800c2f0 <TlInit+0x58>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f107 0208 	add.w	r2, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
  }

  return;
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
}
 800c2d8:	3718      	adds	r7, #24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	20000394 	.word	0x20000394
 800c2e4:	20000170 	.word	0x20000170
 800c2e8:	20000168 	.word	0x20000168
 800c2ec:	20000174 	.word	0x20000174
 800c2f0:	20000374 	.word	0x20000374
 800c2f4:	0800c385 	.word	0x0800c385

0800c2f8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	603a      	str	r2, [r7, #0]
 800c302:	80fb      	strh	r3, [r7, #6]
 800c304:	460b      	mov	r3, r1
 800c306:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c308:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <SendCmd+0x44>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	88fa      	ldrh	r2, [r7, #6]
 800c30e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c312:	4b0a      	ldr	r3, [pc, #40]	; (800c33c <SendCmd+0x44>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	797a      	ldrb	r2, [r7, #5]
 800c318:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c31a:	4b08      	ldr	r3, [pc, #32]	; (800c33c <SendCmd+0x44>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	330c      	adds	r3, #12
 800c320:	797a      	ldrb	r2, [r7, #5]
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	4618      	mov	r0, r3
 800c326:	f001 fb1f 	bl	800d968 <memcpy>

  hciContext.io.Send(0,0);
 800c32a:	4b05      	ldr	r3, [pc, #20]	; (800c340 <SendCmd+0x48>)
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	2100      	movs	r1, #0
 800c330:	2000      	movs	r0, #0
 800c332:	4798      	blx	r3

  return;
 800c334:	bf00      	nop
}
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000170 	.word	0x20000170
 800c340:	20000374 	.word	0x20000374

0800c344 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	4603      	mov	r3, r0
 800c34c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d108      	bne.n	800c366 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c354:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <NotifyCmdStatus+0x3c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00d      	beq.n	800c378 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c35c:	4b08      	ldr	r3, [pc, #32]	; (800c380 <NotifyCmdStatus+0x3c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2000      	movs	r0, #0
 800c362:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c364:	e008      	b.n	800c378 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c366:	4b06      	ldr	r3, [pc, #24]	; (800c380 <NotifyCmdStatus+0x3c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d004      	beq.n	800c378 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c36e:	4b04      	ldr	r3, [pc, #16]	; (800c380 <NotifyCmdStatus+0x3c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2001      	movs	r0, #1
 800c374:	4798      	blx	r3
  return;
 800c376:	bf00      	nop
 800c378:	bf00      	nop
}
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	2000039c 	.word	0x2000039c

0800c384 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7a5b      	ldrb	r3, [r3, #9]
 800c390:	2b0f      	cmp	r3, #15
 800c392:	d003      	beq.n	800c39c <TlEvtReceived+0x18>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7a5b      	ldrb	r3, [r3, #9]
 800c398:	2b0e      	cmp	r3, #14
 800c39a:	d107      	bne.n	800c3ac <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	4809      	ldr	r0, [pc, #36]	; (800c3c4 <TlEvtReceived+0x40>)
 800c3a0:	f000 fb92 	bl	800cac8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	f000 ff06 	bl	800d1b6 <hci_cmd_resp_release>
 800c3aa:	e006      	b.n	800c3ba <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	4806      	ldr	r0, [pc, #24]	; (800c3c8 <TlEvtReceived+0x44>)
 800c3b0:	f000 fb8a 	bl	800cac8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c3b4:	4804      	ldr	r0, [pc, #16]	; (800c3c8 <TlEvtReceived+0x44>)
 800c3b6:	f000 fef2 	bl	800d19e <hci_notify_asynch_evt>
  }

  return;
 800c3ba:	bf00      	nop
}
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	20000394 	.word	0x20000394
 800c3c8:	20000168 	.word	0x20000168

0800c3cc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a05      	ldr	r2, [pc, #20]	; (800c3ec <hci_register_io_bus+0x20>)
 800c3d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a04      	ldr	r2, [pc, #16]	; (800c3f0 <hci_register_io_bus+0x24>)
 800c3de:	611a      	str	r2, [r3, #16]

  return;
 800c3e0:	bf00      	nop
}
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	0800c6d5 	.word	0x0800c6d5
 800c3f0:	0800c73d 	.word	0x0800c73d

0800c3f4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	4a08      	ldr	r2, [pc, #32]	; (800c424 <shci_init+0x30>)
 800c404:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c406:	4a08      	ldr	r2, [pc, #32]	; (800c428 <shci_init+0x34>)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c40c:	4806      	ldr	r0, [pc, #24]	; (800c428 <shci_init+0x34>)
 800c40e:	f000 f911 	bl	800c634 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f894 	bl	800c544 <TlInit>

  return;
 800c41c:	bf00      	nop
}
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	200003c0 	.word	0x200003c0
 800c428:	200003a0 	.word	0x200003a0

0800c42c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c432:	4822      	ldr	r0, [pc, #136]	; (800c4bc <shci_user_evt_proc+0x90>)
 800c434:	f000 fb04 	bl	800ca40 <LST_is_empty>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d12b      	bne.n	800c496 <shci_user_evt_proc+0x6a>
 800c43e:	4b20      	ldr	r3, [pc, #128]	; (800c4c0 <shci_user_evt_proc+0x94>)
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d027      	beq.n	800c496 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	4619      	mov	r1, r3
 800c44c:	481b      	ldr	r0, [pc, #108]	; (800c4bc <shci_user_evt_proc+0x90>)
 800c44e:	f000 fb7e 	bl	800cb4e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <shci_user_evt_proc+0x98>)
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00c      	beq.n	800c474 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c45e:	2301      	movs	r3, #1
 800c460:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c462:	4b18      	ldr	r3, [pc, #96]	; (800c4c4 <shci_user_evt_proc+0x98>)
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	1d3a      	adds	r2, r7, #4
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c46c:	793a      	ldrb	r2, [r7, #4]
 800c46e:	4b14      	ldr	r3, [pc, #80]	; (800c4c0 <shci_user_evt_proc+0x94>)
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	e002      	b.n	800c47a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c474:	4b12      	ldr	r3, [pc, #72]	; (800c4c0 <shci_user_evt_proc+0x94>)
 800c476:	2201      	movs	r2, #1
 800c478:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c47a:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <shci_user_evt_proc+0x94>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d004      	beq.n	800c48c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fa39 	bl	800c8fc <TL_MM_EvtDone>
 800c48a:	e004      	b.n	800c496 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4619      	mov	r1, r3
 800c490:	480a      	ldr	r0, [pc, #40]	; (800c4bc <shci_user_evt_proc+0x90>)
 800c492:	f000 faf5 	bl	800ca80 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c496:	4809      	ldr	r0, [pc, #36]	; (800c4bc <shci_user_evt_proc+0x90>)
 800c498:	f000 fad2 	bl	800ca40 <LST_is_empty>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d107      	bne.n	800c4b2 <shci_user_evt_proc+0x86>
 800c4a2:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <shci_user_evt_proc+0x94>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c4aa:	4804      	ldr	r0, [pc, #16]	; (800c4bc <shci_user_evt_proc+0x90>)
 800c4ac:	f7f5 f929 	bl	8001702 <shci_notify_asynch_evt>
  }


  return;
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
}
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20000178 	.word	0x20000178
 800c4c0:	20000188 	.word	0x20000188
 800c4c4:	200003a0 	.word	0x200003a0

0800c4c8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60ba      	str	r2, [r7, #8]
 800c4d0:	607b      	str	r3, [r7, #4]
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	81fb      	strh	r3, [r7, #14]
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f000 f864 	bl	800c5a8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c4e0:	4b16      	ldr	r3, [pc, #88]	; (800c53c <shci_send+0x74>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	89fa      	ldrh	r2, [r7, #14]
 800c4e6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c4ea:	4b14      	ldr	r3, [pc, #80]	; (800c53c <shci_send+0x74>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	7b7a      	ldrb	r2, [r7, #13]
 800c4f0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c4f2:	4b12      	ldr	r3, [pc, #72]	; (800c53c <shci_send+0x74>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	330c      	adds	r3, #12
 800c4f8:	7b7a      	ldrb	r2, [r7, #13]
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fa33 	bl	800d968 <memcpy>

  shciContext.io.Send(0,0);
 800c502:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <shci_send+0x78>)
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	2100      	movs	r1, #0
 800c508:	2000      	movs	r0, #0
 800c50a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c50c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800c510:	f7f5 f90e 	bl	8001730 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f103 0008 	add.w	r0, r3, #8
 800c51a:	4b08      	ldr	r3, [pc, #32]	; (800c53c <shci_send+0x74>)
 800c51c:	6819      	ldr	r1, [r3, #0]
 800c51e:	4b07      	ldr	r3, [pc, #28]	; (800c53c <shci_send+0x74>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	789b      	ldrb	r3, [r3, #2]
 800c524:	3303      	adds	r3, #3
 800c526:	461a      	mov	r2, r3
 800c528:	f001 fa1e 	bl	800d968 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c52c:	2001      	movs	r0, #1
 800c52e:	f000 f83b 	bl	800c5a8 <Cmd_SetStatus>

  return;
 800c532:	bf00      	nop
}
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20000184 	.word	0x20000184
 800c540:	200003a0 	.word	0x200003a0

0800c544 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c54c:	4a10      	ldr	r2, [pc, #64]	; (800c590 <TlInit+0x4c>)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c552:	4810      	ldr	r0, [pc, #64]	; (800c594 <TlInit+0x50>)
 800c554:	f000 fa64 	bl	800ca20 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c558:	2001      	movs	r0, #1
 800c55a:	f000 f825 	bl	800c5a8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c55e:	4b0e      	ldr	r3, [pc, #56]	; (800c598 <TlInit+0x54>)
 800c560:	2201      	movs	r2, #1
 800c562:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c564:	4b0d      	ldr	r3, [pc, #52]	; (800c59c <TlInit+0x58>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00c      	beq.n	800c586 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c570:	4b0b      	ldr	r3, [pc, #44]	; (800c5a0 <TlInit+0x5c>)
 800c572:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c574:	4b0b      	ldr	r3, [pc, #44]	; (800c5a4 <TlInit+0x60>)
 800c576:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c578:	4b08      	ldr	r3, [pc, #32]	; (800c59c <TlInit+0x58>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f107 020c 	add.w	r2, r7, #12
 800c580:	4610      	mov	r0, r2
 800c582:	4798      	blx	r3
  }

  return;
 800c584:	bf00      	nop
 800c586:	bf00      	nop
}
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000184 	.word	0x20000184
 800c594:	20000178 	.word	0x20000178
 800c598:	20000188 	.word	0x20000188
 800c59c:	200003a0 	.word	0x200003a0
 800c5a0:	0800c5f9 	.word	0x0800c5f9
 800c5a4:	0800c611 	.word	0x0800c611

0800c5a8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10b      	bne.n	800c5d0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c5b8:	4b0d      	ldr	r3, [pc, #52]	; (800c5f0 <Cmd_SetStatus+0x48>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	; (800c5f0 <Cmd_SetStatus+0x48>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <Cmd_SetStatus+0x4c>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c5ce:	e00b      	b.n	800c5e8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c5d0:	4b08      	ldr	r3, [pc, #32]	; (800c5f4 <Cmd_SetStatus+0x4c>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <Cmd_SetStatus+0x48>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c5de:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <Cmd_SetStatus+0x48>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2001      	movs	r0, #1
 800c5e4:	4798      	blx	r3
  return;
 800c5e6:	bf00      	nop
 800c5e8:	bf00      	nop
}
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200003c0 	.word	0x200003c0
 800c5f4:	20000180 	.word	0x20000180

0800c5f8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c600:	2000      	movs	r0, #0
 800c602:	f7f5 f88a 	bl	800171a <shci_cmd_resp_release>

  return;
 800c606:	bf00      	nop
}
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c618:	6879      	ldr	r1, [r7, #4]
 800c61a:	4805      	ldr	r0, [pc, #20]	; (800c630 <TlUserEvtReceived+0x20>)
 800c61c:	f000 fa54 	bl	800cac8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c620:	4803      	ldr	r0, [pc, #12]	; (800c630 <TlUserEvtReceived+0x20>)
 800c622:	f7f5 f86e 	bl	8001702 <shci_notify_asynch_evt>

  return;
 800c626:	bf00      	nop
}
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20000178 	.word	0x20000178

0800c634 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a05      	ldr	r2, [pc, #20]	; (800c654 <shci_register_io_bus+0x20>)
 800c640:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a04      	ldr	r2, [pc, #16]	; (800c658 <shci_register_io_bus+0x24>)
 800c646:	611a      	str	r2, [r3, #16]

  return;
 800c648:	bf00      	nop
}
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	0800c7b1 	.word	0x0800c7b1
 800c658:	0800c805 	.word	0x0800c805

0800c65c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c660:	f000 ff9a 	bl	800d598 <HW_IPCC_Enable>

  return;
 800c664:	bf00      	nop
}
 800c666:	bd80      	pop	{r7, pc}

0800c668 <TL_Init>:


void TL_Init( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c66c:	4b0f      	ldr	r3, [pc, #60]	; (800c6ac <TL_Init+0x44>)
 800c66e:	4a10      	ldr	r2, [pc, #64]	; (800c6b0 <TL_Init+0x48>)
 800c670:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c672:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <TL_Init+0x44>)
 800c674:	4a0f      	ldr	r2, [pc, #60]	; (800c6b4 <TL_Init+0x4c>)
 800c676:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c678:	4b0c      	ldr	r3, [pc, #48]	; (800c6ac <TL_Init+0x44>)
 800c67a:	4a0f      	ldr	r2, [pc, #60]	; (800c6b8 <TL_Init+0x50>)
 800c67c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c67e:	4b0b      	ldr	r3, [pc, #44]	; (800c6ac <TL_Init+0x44>)
 800c680:	4a0e      	ldr	r2, [pc, #56]	; (800c6bc <TL_Init+0x54>)
 800c682:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c684:	4b09      	ldr	r3, [pc, #36]	; (800c6ac <TL_Init+0x44>)
 800c686:	4a0e      	ldr	r2, [pc, #56]	; (800c6c0 <TL_Init+0x58>)
 800c688:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c68a:	4b08      	ldr	r3, [pc, #32]	; (800c6ac <TL_Init+0x44>)
 800c68c:	4a0d      	ldr	r2, [pc, #52]	; (800c6c4 <TL_Init+0x5c>)
 800c68e:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c690:	4b06      	ldr	r3, [pc, #24]	; (800c6ac <TL_Init+0x44>)
 800c692:	4a0d      	ldr	r2, [pc, #52]	; (800c6c8 <TL_Init+0x60>)
 800c694:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c696:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <TL_Init+0x44>)
 800c698:	4a0c      	ldr	r2, [pc, #48]	; (800c6cc <TL_Init+0x64>)
 800c69a:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c69c:	4b03      	ldr	r3, [pc, #12]	; (800c6ac <TL_Init+0x44>)
 800c69e:	4a0c      	ldr	r2, [pc, #48]	; (800c6d0 <TL_Init+0x68>)
 800c6a0:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c6a2:	f000 ff89 	bl	800d5b8 <HW_IPCC_Init>

  return;
 800c6a6:	bf00      	nop
}
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20030000 	.word	0x20030000
 800c6b0:	20030024 	.word	0x20030024
 800c6b4:	20030044 	.word	0x20030044
 800c6b8:	20030054 	.word	0x20030054
 800c6bc:	20030060 	.word	0x20030060
 800c6c0:	20030068 	.word	0x20030068
 800c6c4:	20030070 	.word	0x20030070
 800c6c8:	2003008c 	.word	0x2003008c
 800c6cc:	20030090 	.word	0x20030090
 800c6d0:	2003009c 	.word	0x2003009c

0800c6d4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c6e0:	4811      	ldr	r0, [pc, #68]	; (800c728 <TL_BLE_Init+0x54>)
 800c6e2:	f000 f99d 	bl	800ca20 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c6e6:	4b11      	ldr	r3, [pc, #68]	; (800c72c <TL_BLE_Init+0x58>)
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	4a0c      	ldr	r2, [pc, #48]	; (800c730 <TL_BLE_Init+0x5c>)
 800c700:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	4a08      	ldr	r2, [pc, #32]	; (800c728 <TL_BLE_Init+0x54>)
 800c706:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c708:	f000 ff6c 	bl	800d5e4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a08      	ldr	r2, [pc, #32]	; (800c734 <TL_BLE_Init+0x60>)
 800c712:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4a07      	ldr	r2, [pc, #28]	; (800c738 <TL_BLE_Init+0x64>)
 800c71a:	6013      	str	r3, [r2, #0]

  return 0;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20030a34 	.word	0x20030a34
 800c72c:	20030000 	.word	0x20030000
 800c730:	20030a24 	.word	0x20030a24
 800c734:	200003cc 	.word	0x200003cc
 800c738:	200003d0 	.word	0x200003d0

0800c73c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	460b      	mov	r3, r1
 800c746:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);
  
  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c748:	4b05      	ldr	r3, [pc, #20]	; (800c760 <TL_BLE_SendCmd+0x24>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2201      	movs	r2, #1
 800c750:	721a      	strb	r2, [r3, #8]

  HW_IPCC_BLE_SendCmd();
 800c752:	f000 ff51 	bl	800d5f8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20030000 	.word	0x20030000

0800c764 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c76a:	e009      	b.n	800c780 <HW_IPCC_BLE_RxEvtNot+0x1c>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c76c:	1d3b      	adds	r3, r7, #4
 800c76e:	4619      	mov	r1, r3
 800c770:	4808      	ldr	r0, [pc, #32]	; (800c794 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c772:	f000 f9ec 	bl	800cb4e <LST_remove_head>

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c776:	4b08      	ldr	r3, [pc, #32]	; (800c798 <HW_IPCC_BLE_RxEvtNot+0x34>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	4610      	mov	r0, r2
 800c77e:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c780:	4804      	ldr	r0, [pc, #16]	; (800c794 <HW_IPCC_BLE_RxEvtNot+0x30>)
 800c782:	f000 f95d 	bl	800ca40 <LST_is_empty>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d0ef      	beq.n	800c76c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c78c:	bf00      	nop
}
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	20030a34 	.word	0x20030a34
 800c798:	200003cc 	.word	0x200003cc

0800c79c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c7a0:	4b02      	ldr	r3, [pc, #8]	; (800c7ac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4798      	blx	r3

  return;
 800c7a6:	bf00      	nop
}
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	200003d0 	.word	0x200003d0

0800c7b0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c7bc:	480d      	ldr	r0, [pc, #52]	; (800c7f4 <TL_SYS_Init+0x44>)
 800c7be:	f000 f92f 	bl	800ca20 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c7c2:	4b0d      	ldr	r3, [pc, #52]	; (800c7f8 <TL_SYS_Init+0x48>)
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	4a08      	ldr	r2, [pc, #32]	; (800c7f4 <TL_SYS_Init+0x44>)
 800c7d4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c7d6:	f000 ff31 	bl	800d63c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4a07      	ldr	r2, [pc, #28]	; (800c7fc <TL_SYS_Init+0x4c>)
 800c7e0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	4a06      	ldr	r2, [pc, #24]	; (800c800 <TL_SYS_Init+0x50>)
 800c7e8:	6013      	str	r3, [r2, #0]

  return 0;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	20030a3c 	.word	0x20030a3c
 800c7f8:	20030000 	.word	0x20030000
 800c7fc:	200003d4 	.word	0x200003d4
 800c800:	200003d8 	.word	0x200003d8

0800c804 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <TL_SYS_SendCmd+0x24>)
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2210      	movs	r2, #16
 800c818:	721a      	strb	r2, [r3, #8]

  HW_IPCC_SYS_SendCmd();
 800c81a:	f000 ff19 	bl	800d650 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}
 800c828:	20030000 	.word	0x20030000

0800c82c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	af00      	add	r7, sp, #0
  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <HW_IPCC_SYS_CmdEvtNot+0x18>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a04      	ldr	r2, [pc, #16]	; (800c848 <HW_IPCC_SYS_CmdEvtNot+0x1c>)
 800c836:	68d2      	ldr	r2, [r2, #12]
 800c838:	6812      	ldr	r2, [r2, #0]
 800c83a:	4610      	mov	r0, r2
 800c83c:	4798      	blx	r3

  return;
 800c83e:	bf00      	nop
}
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	200003d4 	.word	0x200003d4
 800c848:	20030000 	.word	0x20030000

0800c84c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c852:	e009      	b.n	800c868 <HW_IPCC_SYS_EvtNot+0x1c>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c854:	1d3b      	adds	r3, r7, #4
 800c856:	4619      	mov	r1, r3
 800c858:	4808      	ldr	r0, [pc, #32]	; (800c87c <HW_IPCC_SYS_EvtNot+0x30>)
 800c85a:	f000 f978 	bl	800cb4e <LST_remove_head>
    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c85e:	4b08      	ldr	r3, [pc, #32]	; (800c880 <HW_IPCC_SYS_EvtNot+0x34>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4610      	mov	r0, r2
 800c866:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c868:	4804      	ldr	r0, [pc, #16]	; (800c87c <HW_IPCC_SYS_EvtNot+0x30>)
 800c86a:	f000 f8e9 	bl	800ca40 <LST_is_empty>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0ef      	beq.n	800c854 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c874:	bf00      	nop
}
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	20030a3c 	.word	0x20030a3c
 800c880:	200003d8 	.word	0x200003d8

0800c884 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c88c:	4817      	ldr	r0, [pc, #92]	; (800c8ec <TL_MM_Init+0x68>)
 800c88e:	f000 f8c7 	bl	800ca20 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c892:	4817      	ldr	r0, [pc, #92]	; (800c8f0 <TL_MM_Init+0x6c>)
 800c894:	f000 f8c4 	bl	800ca20 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c898:	4b16      	ldr	r3, [pc, #88]	; (800c8f4 <TL_MM_Init+0x70>)
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	4a16      	ldr	r2, [pc, #88]	; (800c8f8 <TL_MM_Init+0x74>)
 800c89e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c8a0:	4b15      	ldr	r3, [pc, #84]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	6892      	ldr	r2, [r2, #8]
 800c8a8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c8aa:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	68d2      	ldr	r2, [r2, #12]
 800c8b2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c8b4:	4b10      	ldr	r3, [pc, #64]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a0c      	ldr	r2, [pc, #48]	; (800c8ec <TL_MM_Init+0x68>)
 800c8ba:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c8bc:	4b0e      	ldr	r3, [pc, #56]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	6812      	ldr	r2, [r2, #0]
 800c8c4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c8c6:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	6852      	ldr	r2, [r2, #4]
 800c8ce:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c8d0:	4b09      	ldr	r3, [pc, #36]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	6912      	ldr	r2, [r2, #16]
 800c8d8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c8da:	4b07      	ldr	r3, [pc, #28]	; (800c8f8 <TL_MM_Init+0x74>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	6952      	ldr	r2, [r2, #20]
 800c8e2:	619a      	str	r2, [r3, #24]

  return;
 800c8e4:	bf00      	nop
}
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}
 800c8ec:	200300a8 	.word	0x200300a8
 800c8f0:	200003c4 	.word	0x200003c4
 800c8f4:	20030000 	.word	0x20030000
 800c8f8:	200003dc 	.word	0x200003dc

0800c8fc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	4805      	ldr	r0, [pc, #20]	; (800c91c <TL_MM_EvtDone+0x20>)
 800c908:	f000 f8de 	bl	800cac8 <LST_insert_tail>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c90c:	4804      	ldr	r0, [pc, #16]	; (800c920 <TL_MM_EvtDone+0x24>)
 800c90e:	f000 fec5 	bl	800d69c <HW_IPCC_MM_SendFreeBuf>

  return;
 800c912:	bf00      	nop
}
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	200003c4 	.word	0x200003c4
 800c920:	0800c925 	.word	0x0800c925

0800c924 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c92a:	e00c      	b.n	800c946 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c92c:	1d3b      	adds	r3, r7, #4
 800c92e:	4619      	mov	r1, r3
 800c930:	480a      	ldr	r0, [pc, #40]	; (800c95c <SendFreeBuf+0x38>)
 800c932:	f000 f90c 	bl	800cb4e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c936:	4b0a      	ldr	r3, [pc, #40]	; (800c960 <SendFreeBuf+0x3c>)
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	691b      	ldr	r3, [r3, #16]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f000 f8c1 	bl	800cac8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c946:	4805      	ldr	r0, [pc, #20]	; (800c95c <SendFreeBuf+0x38>)
 800c948:	f000 f87a 	bl	800ca40 <LST_is_empty>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0ec      	beq.n	800c92c <SendFreeBuf+0x8>
  }

  return;
 800c952:	bf00      	nop
}
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200003c4 	.word	0x200003c4
 800c960:	20030000 	.word	0x20030000

0800c964 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c968:	4805      	ldr	r0, [pc, #20]	; (800c980 <TL_TRACES_Init+0x1c>)
 800c96a:	f000 f859 	bl	800ca20 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c96e:	4b05      	ldr	r3, [pc, #20]	; (800c984 <TL_TRACES_Init+0x20>)
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	4a03      	ldr	r2, [pc, #12]	; (800c980 <TL_TRACES_Init+0x1c>)
 800c974:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c976:	f000 fec7 	bl	800d708 <HW_IPCC_TRACES_Init>

  return;
 800c97a:	bf00      	nop
}
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	200300b0 	.word	0x200300b0
 800c984:	20030000 	.word	0x20030000

0800c988 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c98e:	e008      	b.n	800c9a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c990:	1d3b      	adds	r3, r7, #4
 800c992:	4619      	mov	r1, r3
 800c994:	4808      	ldr	r0, [pc, #32]	; (800c9b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c996:	f000 f8da 	bl	800cb4e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 f80d 	bl	800c9bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c9a2:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c9a4:	f000 f84c 	bl	800ca40 <LST_is_empty>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0f0      	beq.n	800c990 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c9ae:	bf00      	nop
}
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	200300b0 	.word	0x200300b0

0800c9bc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    (void)(hcievt);
}
 800c9c4:	bf00      	nop
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c9da:	4b0f      	ldr	r3, [pc, #60]	; (800ca18 <OTP_Read+0x48>)
 800c9dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c9de:	e002      	b.n	800c9e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3b08      	subs	r3, #8
 800c9e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	3307      	adds	r3, #7
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	79fa      	ldrb	r2, [r7, #7]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d003      	beq.n	800c9fa <OTP_Read+0x2a>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4a09      	ldr	r2, [pc, #36]	; (800ca1c <OTP_Read+0x4c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d1f2      	bne.n	800c9e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3307      	adds	r3, #7
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	79fa      	ldrb	r2, [r7, #7]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d001      	beq.n	800ca0a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	1fff73f8 	.word	0x1fff73f8
 800ca1c:	1fff7000 	.word	0x1fff7000

0800ca20 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	605a      	str	r2, [r3, #4]
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca48:	f3ef 8310 	mrs	r3, PRIMASK
 800ca4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca52:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d102      	bne.n	800ca64 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	75fb      	strb	r3, [r7, #23]
 800ca62:	e001      	b.n	800ca68 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800ca64:	2300      	movs	r3, #0
 800ca66:	75fb      	strb	r3, [r7, #23]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca8a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca90:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ca92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca94:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	605a      	str	r2, [r3, #4]
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cabc:	bf00      	nop
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cad2:	f3ef 8310 	mrs	r3, PRIMASK
 800cad6:	60fb      	str	r3, [r7, #12]
  return(result);
 800cad8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cada:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cadc:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb04:	bf00      	nop
 800cb06:	371c      	adds	r7, #28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb18:	f3ef 8310 	mrs	r3, PRIMASK
 800cb1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb22:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6812      	ldr	r2, [r2, #0]
 800cb2c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	6852      	ldr	r2, [r2, #4]
 800cb36:	605a      	str	r2, [r3, #4]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb42:	bf00      	nop
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb58:	f3ef 8310 	mrs	r3, PRIMASK
 800cb5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cb60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb62:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff ffcd 	bl	800cb10 <LST_remove_node>
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cb80:	bf00      	nop
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800cb8c:	4b03      	ldr	r3, [pc, #12]	; (800cb9c <LL_FLASH_GetUDN+0x14>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	1fff7580 	.word	0x1fff7580

0800cba0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800cba4:	4b03      	ldr	r3, [pc, #12]	; (800cbb4 <LL_FLASH_GetDeviceID+0x14>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	1fff7584 	.word	0x1fff7584

0800cbb8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800cbbc:	4b03      	ldr	r3, [pc, #12]	; (800cbcc <LL_FLASH_GetSTCompanyID+0x14>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	0a1b      	lsrs	r3, r3, #8
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	1fff7584 	.word	0x1fff7584

0800cbd0 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800cbd0:	b5b0      	push	{r4, r5, r7, lr}
 800cbd2:	b08c      	sub	sp, #48	; 0x30
 800cbd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cbd6:	4b29      	ldr	r3, [pc, #164]	; (800cc7c <APP_BLE_Init+0xac>)
 800cbd8:	463c      	mov	r4, r7
 800cbda:	461d      	mov	r5, r3
 800cbdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cbe8:	c407      	stmia	r4!, {r0, r1, r2}
 800cbea:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800cbec:	f000 f908 	bl	800ce00 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	2002      	movs	r0, #2
 800cbf4:	f7f6 f920 	bl	8002e38 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800cbf8:	4a21      	ldr	r2, [pc, #132]	; (800cc80 <APP_BLE_Init+0xb0>)
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	2004      	movs	r0, #4
 800cbfe:	f7f6 fa25 	bl	800304c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800cc02:	463b      	mov	r3, r7
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fa47 	bl	800c098 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800cc0a:	f000 f90f 	bl	800ce2c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800cc0e:	f7ff f9c7 	bl	800bfa0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cc12:	4b1c      	ldr	r3, [pc, #112]	; (800cc84 <APP_BLE_Init+0xb4>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;  
 800cc1a:	4b1a      	ldr	r3, [pc, #104]	; (800cc84 <APP_BLE_Init+0xb4>)
 800cc1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc20:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800cc22:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <APP_BLE_Init+0xb8>)
 800cc24:	2100      	movs	r1, #0
 800cc26:	2001      	movs	r0, #1
 800cc28:	f7f6 fa10 	bl	800304c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)  
  aci_hal_set_radio_activity_mask(0x0006);
 800cc2c:	2006      	movs	r0, #6
 800cc2e:	f7fe ffe4 	bl	800bbfa <aci_hal_set_radio_activity_mask>
  mutex = 1; 
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800cc32:	f000 fb21 	bl	800d278 <P2PS_APP_Init>

  /**
   * Initialize Custom Server Application
   */
  TEMPLATE_APP_Init();
 800cc36:	f000 fb27 	bl	800d288 <TEMPLATE_APP_Init>
  

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800cc3a:	4b14      	ldr	r3, [pc, #80]	; (800cc8c <APP_BLE_Init+0xbc>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4914      	ldr	r1, [pc, #80]	; (800cc90 <APP_BLE_Init+0xc0>)
 800cc40:	2000      	movs	r0, #0
 800cc42:	f7f5 fa87 	bl	8002154 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800cc46:	4b13      	ldr	r3, [pc, #76]	; (800cc94 <APP_BLE_Init+0xc4>)
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4913      	ldr	r1, [pc, #76]	; (800cc98 <APP_BLE_Init+0xc8>)
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	f7f5 fa81 	bl	8002154 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800cc52:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <APP_BLE_Init+0xb4>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <APP_BLE_Init+0xb4>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800cc62:	4b0e      	ldr	r3, [pc, #56]	; (800cc9c <APP_BLE_Init+0xcc>)
 800cc64:	2280      	movs	r2, #128	; 0x80
 800cc66:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800cc68:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <APP_BLE_Init+0xd0>)
 800cc6a:	22a0      	movs	r2, #160	; 0xa0
 800cc6c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800cc6e:	2001      	movs	r0, #1
 800cc70:	f000 f9b6 	bl	800cfe0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 800cc74:	bf00      	nop
}
 800cc76:	3730      	adds	r7, #48	; 0x30
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bdb0      	pop	{r4, r5, r7, pc}
 800cc7c:	0800dc40 	.word	0x0800dc40
 800cc80:	0800c101 	.word	0x0800c101
 800cc84:	2000018c 	.word	0x2000018c
 800cc88:	0800d14d 	.word	0x0800d14d
 800cc8c:	0800d181 	.word	0x0800d181
 800cc90:	2000021d 	.word	0x2000021d
 800cc94:	0800d191 	.word	0x0800d191
 800cc98:	2000021e 	.word	0x2000021e
 800cc9c:	20000220 	.word	0x20000220
 800cca0:	20000222 	.word	0x20000222

0800cca4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b08a      	sub	sp, #40	; 0x28
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete; 
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ccac:	2342      	movs	r3, #66	; 0x42
 800ccae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800ccb8:	6a3b      	ldr	r3, [r7, #32]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b3e      	cmp	r3, #62	; 0x3e
 800ccbe:	d024      	beq.n	800cd0a <SVCCTL_App_Notification+0x66>
 800ccc0:	2bff      	cmp	r3, #255	; 0xff
 800ccc2:	d070      	beq.n	800cda6 <SVCCTL_App_Notification+0x102>
 800ccc4:	2b05      	cmp	r3, #5
 800ccc6:	d000      	beq.n	800ccca <SVCCTL_App_Notification+0x26>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 800ccc8:	e08f      	b.n	800cdea <SVCCTL_App_Notification+0x146>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	3302      	adds	r3, #2
 800ccce:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	4b46      	ldr	r3, [pc, #280]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800ccda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d106      	bne.n	800ccee <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800cce0:	4b44      	ldr	r3, [pc, #272]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cce6:	4b43      	ldr	r3, [pc, #268]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800ccee:	2001      	movs	r0, #1
 800ccf0:	f000 f976 	bl	800cfe0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ccf4:	4b40      	ldr	r3, [pc, #256]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ccfa:	4b3e      	ldr	r3, [pc, #248]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800ccfc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800ccfe:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800cd00:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 800cd02:	483d      	ldr	r0, [pc, #244]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800cd04:	f000 faa4 	bl	800d250 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 800cd08:	e06f      	b.n	800cdea <SVCCTL_App_Notification+0x146>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	3302      	adds	r3, #2
 800cd0e:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d042      	beq.n	800cd9e <SVCCTL_App_Notification+0xfa>
 800cd18:	2b0c      	cmp	r3, #12
 800cd1a:	d002      	beq.n	800cd22 <SVCCTL_App_Notification+0x7e>
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d016      	beq.n	800cd4e <SVCCTL_App_Notification+0xaa>
          break;
 800cd20:	e040      	b.n	800cda4 <SVCCTL_App_Notification+0x100>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	3301      	adds	r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800cd28:	4b32      	ldr	r3, [pc, #200]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd2c:	f107 020a 	add.w	r2, r7, #10
 800cd30:	f107 010b 	add.w	r1, r7, #11
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7fe ffda 	bl	800bcee <hci_le_read_phy>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 800cd40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d12c      	bne.n	800cda2 <SVCCTL_App_Notification+0xfe>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	2b02      	cmp	r3, #2
          break;
 800cd4c:	e029      	b.n	800cda2 <SVCCTL_App_Notification+0xfe>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	3301      	adds	r3, #1
 800cd52:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800cd54:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd56:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f5 fa70 	bl	8002240 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800cd60:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd62:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	d104      	bne.n	800cd74 <SVCCTL_App_Notification+0xd0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800cd6a:	4b22      	ldr	r3, [pc, #136]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd6c:	2206      	movs	r2, #6
 800cd6e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800cd72:	e003      	b.n	800cd7c <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800cd74:	4b1f      	ldr	r3, [pc, #124]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd76:	2205      	movs	r2, #5
 800cd78:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cd82:	b29a      	uxth	r2, r3
 800cd84:	4b1b      	ldr	r3, [pc, #108]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd86:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800cd88:	4b1b      	ldr	r3, [pc, #108]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800cd8e:	4b19      	ldr	r3, [pc, #100]	; (800cdf4 <SVCCTL_App_Notification+0x150>)
 800cd90:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800cd92:	4b19      	ldr	r3, [pc, #100]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800cd94:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800cd96:	4818      	ldr	r0, [pc, #96]	; (800cdf8 <SVCCTL_App_Notification+0x154>)
 800cd98:	f000 fa5a 	bl	800d250 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800cd9c:	e002      	b.n	800cda4 <SVCCTL_App_Notification+0x100>
          break;
 800cd9e:	bf00      	nop
 800cda0:	e023      	b.n	800cdea <SVCCTL_App_Notification+0x146>
          break;
 800cda2:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800cda4:	e021      	b.n	800cdea <SVCCTL_App_Notification+0x146>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800cda6:	6a3b      	ldr	r3, [r7, #32]
 800cda8:	3302      	adds	r3, #2
 800cdaa:	61fb      	str	r3, [r7, #28]
      switch (blue_evt->ecode)
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f240 4207 	movw	r2, #1031	; 0x407
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d013      	beq.n	800cde2 <SVCCTL_App_Notification+0x13e>
 800cdba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdbe:	d012      	beq.n	800cde6 <SVCCTL_App_Notification+0x142>
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d000      	beq.n	800cdc6 <SVCCTL_App_Notification+0x122>
      break; /* EVT_VENDOR */
 800cdc4:	e010      	b.n	800cde8 <SVCCTL_App_Notification+0x144>
        	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	2101      	movs	r1, #1
 800cdca:	480c      	ldr	r0, [pc, #48]	; (800cdfc <SVCCTL_App_Notification+0x158>)
 800cdcc:	f7f7 fffa 	bl	8004dc4 <HAL_GPIO_WritePin>
        	HAL_Delay(5);
 800cdd0:	2005      	movs	r0, #5
 800cdd2:	f7f7 f9fb 	bl	80041cc <HAL_Delay>
        	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2101      	movs	r1, #1
 800cdda:	4808      	ldr	r0, [pc, #32]	; (800cdfc <SVCCTL_App_Notification+0x158>)
 800cddc:	f7f7 fff2 	bl	8004dc4 <HAL_GPIO_WritePin>
          break; /* RADIO_ACTIVITY_EVENT */
 800cde0:	e002      	b.n	800cde8 <SVCCTL_App_Notification+0x144>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800cde2:	bf00      	nop
 800cde4:	e000      	b.n	800cde8 <SVCCTL_App_Notification+0x144>
      break;
 800cde6:	bf00      	nop
      break; /* EVT_VENDOR */
 800cde8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800cdea:	2301      	movs	r3, #1
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3728      	adds	r7, #40	; 0x28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	2000018c 	.word	0x2000018c
 800cdf8:	200008e0 	.word	0x200008e0
 800cdfc:	48000400 	.word	0x48000400

0800ce00 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ce06:	4b06      	ldr	r3, [pc, #24]	; (800ce20 <Ble_Tl_Init+0x20>)
 800ce08:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ce0a:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <Ble_Tl_Init+0x24>)
 800ce0c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ce0e:	463b      	mov	r3, r7
 800ce10:	4619      	mov	r1, r3
 800ce12:	4805      	ldr	r0, [pc, #20]	; (800ce28 <Ble_Tl_Init+0x28>)
 800ce14:	f7ff f958 	bl	800c0c8 <hci_init>

  return;
 800ce18:	bf00      	nop
}
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	200300b8 	.word	0x200300b8
 800ce24:	0800d21b 	.word	0x0800d21b
 800ce28:	0800d1e3 	.word	0x0800d1e3

0800ce2c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	b091      	sub	sp, #68	; 0x44
 800ce30:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE }; 
 800ce32:	2300      	movs	r3, #0
 800ce34:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800ce36:	f7fe ff31 	bl	800bc9c <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800ce3a:	f000 f943 	bl	800d0c4 <BleGetBdAddress>
 800ce3e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800ce40:	6a3a      	ldr	r2, [r7, #32]
 800ce42:	2106      	movs	r1, #6
 800ce44:	2000      	movs	r0, #0
 800ce46:	f7fe fe0a 	bl	800ba5e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	795a      	ldrb	r2, [r3, #5]
 800ce4e:	4b5e      	ldr	r3, [pc, #376]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce50:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	791a      	ldrb	r2, [r3, #4]
 800ce56:	4b5c      	ldr	r3, [pc, #368]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce58:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800ce5a:	6a3b      	ldr	r3, [r7, #32]
 800ce5c:	78da      	ldrb	r2, [r3, #3]
 800ce5e:	4b5a      	ldr	r3, [pc, #360]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce60:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	789a      	ldrb	r2, [r3, #2]
 800ce66:	4b58      	ldr	r3, [pc, #352]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce68:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800ce6a:	6a3b      	ldr	r3, [r7, #32]
 800ce6c:	785a      	ldrb	r2, [r3, #1]
 800ce6e:	4b56      	ldr	r3, [pc, #344]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce70:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	4b54      	ldr	r3, [pc, #336]	; (800cfc8 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800ce78:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800ce7a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800ce7e:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 800ce80:	f7ff fe82 	bl	800cb88 <LL_FLASH_GetUDN>
 800ce84:	4603      	mov	r3, r0
 800ce86:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800ce88:	f107 0308 	add.w	r3, r7, #8
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	2106      	movs	r1, #6
 800ce90:	202e      	movs	r0, #46	; 0x2e
 800ce92:	f7fe fde4 	bl	800ba5e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK 
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800ce96:	4a4d      	ldr	r2, [pc, #308]	; (800cfcc <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 800ce98:	2110      	movs	r1, #16
 800ce9a:	2018      	movs	r0, #24
 800ce9c:	f7fe fddf 	bl	800ba5e <aci_hal_write_config_data>
    
   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800cea0:	4a4b      	ldr	r2, [pc, #300]	; (800cfd0 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800cea2:	2110      	movs	r1, #16
 800cea4:	2008      	movs	r0, #8
 800cea6:	f7fe fdda 	bl	800ba5e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ceaa:	2118      	movs	r1, #24
 800ceac:	2001      	movs	r0, #1
 800ceae:	f7fe fe46 	bl	800bb3e <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800ceb2:	f7fe fb83 	bl	800b5bc <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ceba:	7ffb      	ldrb	r3, [r7, #31]
 800cebc:	f043 0301 	orr.w	r3, r3, #1
 800cec0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800cec2:	7ffb      	ldrb	r3, [r7, #31]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01e      	beq.n	800cf06 <Ble_Hci_Gap_Gatt_Init+0xda>
  {
    const char *name = "ST_THP";
 800cec8:	4b42      	ldr	r3, [pc, #264]	; (800cfd4 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 800ceca:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 800cecc:	f107 0216 	add.w	r2, r7, #22
 800ced0:	7ff8      	ldrb	r0, [r7, #31]
 800ced2:	f107 0312 	add.w	r3, r7, #18
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	f107 0314 	add.w	r3, r7, #20
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	4613      	mov	r3, r2
 800cee0:	2207      	movs	r2, #7
 800cee2:	2100      	movs	r1, #0
 800cee4:	f7fe fa53 	bl	800b38e <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800cee8:	8afc      	ldrh	r4, [r7, #22]
 800ceea:	8abd      	ldrh	r5, [r7, #20]
 800ceec:	69b8      	ldr	r0, [r7, #24]
 800ceee:	f7f3 f947 	bl	8000180 <strlen>
 800cef2:	4603      	mov	r3, r0
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4613      	mov	r3, r2
 800cefc:	2200      	movs	r2, #0
 800cefe:	4629      	mov	r1, r5
 800cf00:	4620      	mov	r0, r4
 800cf02:	f7fe fd1e 	bl	800b942 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 800cf06:	8af8      	ldrh	r0, [r7, #22]
 800cf08:	8a79      	ldrh	r1, [r7, #18]
 800cf0a:	1d3b      	adds	r3, r7, #4
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	2302      	movs	r3, #2
 800cf10:	2200      	movs	r2, #0
 800cf12:	f7fe fd16 	bl	800b942 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
/**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED); 
 800cf16:	2202      	movs	r2, #2
 800cf18:	2102      	movs	r1, #2
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	f7fe ff4f 	bl	800bdbe <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cf20:	4b2d      	ldr	r3, [pc, #180]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf22:	2201      	movs	r2, #1
 800cf24:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cf26:	4b2c      	ldr	r3, [pc, #176]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe f92f 	bl	800b18e <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cf30:	4b29      	ldr	r3, [pc, #164]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf32:	2201      	movs	r2, #1
 800cf34:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 800cf36:	4b28      	ldr	r3, [pc, #160]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = 8;
 800cf3c:	4b26      	ldr	r3, [pc, #152]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf3e:	2208      	movs	r2, #8
 800cf40:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = 16;
 800cf42:	4b25      	ldr	r3, [pc, #148]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf44:	2210      	movs	r2, #16
 800cf46:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = 1;
 800cf48:	4b23      	ldr	r3, [pc, #140]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = 111111;
 800cf4e:	4b22      	ldr	r3, [pc, #136]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf50:	4a22      	ldr	r2, [pc, #136]	; (800cfdc <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800cf52:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = 1;
 800cf54:	4b20      	ldr	r3, [pc, #128]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf56:	2201      	movs	r2, #1
 800cf58:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf60:	e00b      	b.n	800cf7a <Ble_Hci_Gap_Gatt_Init+0x14e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 800cf62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf66:	4a1c      	ldr	r2, [pc, #112]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf68:	4413      	add	r3, r2
 800cf6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf6e:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 800cf70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf74:	3301      	adds	r3, #1
 800cf76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf7e:	2b0f      	cmp	r3, #15
 800cf80:	d9ef      	bls.n	800cf62 <Ble_Hci_Gap_Gatt_Init+0x136>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cf82:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf84:	789d      	ldrb	r5, [r3, #2]
 800cf86:	4b14      	ldr	r3, [pc, #80]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf88:	785e      	ldrb	r6, [r3, #1]
 800cf8a:	4b13      	ldr	r3, [pc, #76]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf8c:	7d5b      	ldrb	r3, [r3, #21]
 800cf8e:	4a12      	ldr	r2, [pc, #72]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf90:	7d92      	ldrb	r2, [r2, #22]
 800cf92:	4911      	ldr	r1, [pc, #68]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf94:	7d09      	ldrb	r1, [r1, #20]
 800cf96:	4810      	ldr	r0, [pc, #64]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cf98:	6980      	ldr	r0, [r0, #24]
 800cf9a:	2400      	movs	r4, #0
 800cf9c:	9404      	str	r4, [sp, #16]
 800cf9e:	9003      	str	r0, [sp, #12]
 800cfa0:	9102      	str	r1, [sp, #8]
 800cfa2:	9201      	str	r2, [sp, #4]
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	4631      	mov	r1, r6
 800cfac:	4628      	mov	r0, r5
 800cfae:	f7fe f93f 	bl	800b230 <aci_gap_set_authentication_requirement>
                                        );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cfb2:	4b09      	ldr	r3, [pc, #36]	; (800cfd8 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 800cfb4:	789b      	ldrb	r3, [r3, #2]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <Ble_Hci_Gap_Gatt_Init+0x192>
   {
     aci_gap_configure_whitelist();
 800cfba:	f7fe fad6 	bl	800b56a <aci_gap_configure_whitelist>
   }
}
 800cfbe:	bf00      	nop
 800cfc0:	372c      	adds	r7, #44	; 0x2c
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000018 	.word	0x20000018
 800cfcc:	0800dd58 	.word	0x0800dd58
 800cfd0:	0800dd68 	.word	0x0800dd68
 800cfd4:	0800dc70 	.word	0x0800dc70
 800cfd8:	2000018c 	.word	0x2000018c
 800cfdc:	0001b207 	.word	0x0001b207

0800cfe0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08c      	sub	sp, #48	; 0x30
 800cfe4:	af08      	add	r7, sp, #32
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cfea:	2342      	movs	r3, #66	; 0x42
 800cfec:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d106      	bne.n	800d002 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800cff4:	4b2c      	ldr	r3, [pc, #176]	; (800d0a8 <Adv_Request+0xc8>)
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800cffa:	4b2c      	ldr	r3, [pc, #176]	; (800d0ac <Adv_Request+0xcc>)
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	81bb      	strh	r3, [r7, #12]
 800d000:	e005      	b.n	800d00e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d002:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800d006:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d008:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d00c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d00e:	4b28      	ldr	r3, [pc, #160]	; (800d0b0 <Adv_Request+0xd0>)
 800d010:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d014:	4618      	mov	r0, r3
 800d016:	f7f5 f913 	bl	8002240 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	d10d      	bne.n	800d03c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d020:	4b23      	ldr	r3, [pc, #140]	; (800d0b0 <Adv_Request+0xd0>)
 800d022:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d026:	2b01      	cmp	r3, #1
 800d028:	d004      	beq.n	800d034 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d02a:	4b21      	ldr	r3, [pc, #132]	; (800d0b0 <Adv_Request+0xd0>)
 800d02c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d030:	2b02      	cmp	r3, #2
 800d032:	d103      	bne.n	800d03c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 800d034:	f7fd ff9d 	bl	800af72 <aci_gap_set_non_discoverable>
 800d038:	4603      	mov	r3, r0
 800d03a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800d03c:	4a1c      	ldr	r2, [pc, #112]	; (800d0b0 <Adv_Request+0xd0>)
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800d044:	4b1a      	ldr	r3, [pc, #104]	; (800d0b0 <Adv_Request+0xd0>)
 800d046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d04a:	89b8      	ldrh	r0, [r7, #12]
 800d04c:	89f9      	ldrh	r1, [r7, #14]
 800d04e:	2200      	movs	r2, #0
 800d050:	9206      	str	r2, [sp, #24]
 800d052:	2200      	movs	r2, #0
 800d054:	9205      	str	r2, [sp, #20]
 800d056:	4a17      	ldr	r2, [pc, #92]	; (800d0b4 <Adv_Request+0xd4>)
 800d058:	9204      	str	r2, [sp, #16]
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	4b16      	ldr	r3, [pc, #88]	; (800d0b8 <Adv_Request+0xd8>)
 800d05e:	9302      	str	r3, [sp, #8]
 800d060:	2307      	movs	r3, #7
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	2300      	movs	r3, #0
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2300      	movs	r3, #0
 800d06a:	4602      	mov	r2, r0
 800d06c:	2000      	movs	r0, #0
 800d06e:	f7fd ffa9 	bl	800afc4 <aci_gap_set_discoverable>
 800d072:	4603      	mov	r3, r0
 800d074:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);
    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800d076:	4911      	ldr	r1, [pc, #68]	; (800d0bc <Adv_Request+0xdc>)
 800d078:	200e      	movs	r0, #14
 800d07a:	f7fe fa13 	bl	800b4a4 <aci_gap_update_adv_data>
 800d07e:	4603      	mov	r3, r0
 800d080:	72fb      	strb	r3, [r7, #11]

    if (ret == BLE_STATUS_SUCCESS)
 800d082:	7afb      	ldrb	r3, [r7, #11]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d10a      	bne.n	800d09e <Adv_Request+0xbe>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d107      	bne.n	800d09e <Adv_Request+0xbe>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800d08e:	4b08      	ldr	r3, [pc, #32]	; (800d0b0 <Adv_Request+0xd0>)
 800d090:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800d094:	490a      	ldr	r1, [pc, #40]	; (800d0c0 <Adv_Request+0xe0>)
 800d096:	4618      	mov	r0, r3
 800d098:	f7f5 f95c 	bl	8002354 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800d09c:	bf00      	nop
 800d09e:	bf00      	nop
}
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000220 	.word	0x20000220
 800d0ac:	20000222 	.word	0x20000222
 800d0b0:	2000018c 	.word	0x2000018c
 800d0b4:	200001b5 	.word	0x200001b5
 800d0b8:	0800dd78 	.word	0x0800dd78
 800d0bc:	20000018 	.word	0x20000018
 800d0c0:	0001e046 	.word	0x0001e046

0800d0c4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d0ca:	f7ff fd5d 	bl	800cb88 <LL_FLASH_GetUDN>
 800d0ce:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d6:	d023      	beq.n	800d120 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d0d8:	f7ff fd6e 	bl	800cbb8 <LL_FLASH_GetSTCompanyID>
 800d0dc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d0de:	f7ff fd5f 	bl	800cba0 <LL_FLASH_GetDeviceID>
 800d0e2:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	4b16      	ldr	r3, [pc, #88]	; (800d144 <BleGetBdAddress+0x80>)
 800d0ea:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	0a1b      	lsrs	r3, r3, #8
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	4b14      	ldr	r3, [pc, #80]	; (800d144 <BleGetBdAddress+0x80>)
 800d0f4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	0c1b      	lsrs	r3, r3, #16
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	4b11      	ldr	r3, [pc, #68]	; (800d144 <BleGetBdAddress+0x80>)
 800d0fe:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	b2da      	uxtb	r2, r3
 800d104:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <BleGetBdAddress+0x80>)
 800d106:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	4b0d      	ldr	r3, [pc, #52]	; (800d144 <BleGetBdAddress+0x80>)
 800d10e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	0a1b      	lsrs	r3, r3, #8
 800d114:	b2da      	uxtb	r2, r3
 800d116:	4b0b      	ldr	r3, [pc, #44]	; (800d144 <BleGetBdAddress+0x80>)
 800d118:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800d11a:	4b0a      	ldr	r3, [pc, #40]	; (800d144 <BleGetBdAddress+0x80>)
 800d11c:	617b      	str	r3, [r7, #20]
 800d11e:	e00b      	b.n	800d138 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800d120:	2000      	movs	r0, #0
 800d122:	f7ff fc55 	bl	800c9d0 <OTP_Read>
 800d126:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	617b      	str	r3, [r7, #20]
 800d132:	e001      	b.n	800d138 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800d134:	4b04      	ldr	r3, [pc, #16]	; (800d148 <BleGetBdAddress+0x84>)
 800d136:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800d138:	697b      	ldr	r3, [r7, #20]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	200003e0 	.word	0x200003e0
 800d148:	0800dd50 	.word	0x0800dd50

0800d14c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d152:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <Adv_Cancel+0x30>)
 800d154:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800d158:	2b05      	cmp	r3, #5
 800d15a:	d00a      	beq.n	800d172 <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 800d15c:	2300      	movs	r3, #0
 800d15e:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800d160:	f7fd ff07 	bl	800af72 <aci_gap_set_non_discoverable>
 800d164:	4603      	mov	r3, r0
 800d166:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <Adv_Cancel+0x30>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 800d170:	bf00      	nop
 800d172:	bf00      	nop
}
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	2000018c 	.word	0x2000018c

0800d180 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800d180:	b580      	push	{r7, lr}
 800d182:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800d184:	2100      	movs	r1, #0
 800d186:	2001      	movs	r0, #1
 800d188:	f7f5 ff80 	bl	800308c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 800d18c:	bf00      	nop
}
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800d190:	b480      	push	{r7}
 800d192:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */

/* USER CODE END Switch_OFF_GPIO */
}
 800d194:	bf00      	nop
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	2004      	movs	r0, #4
 800d1aa:	f7f5 ff6f 	bl	800308c <UTIL_SEQ_SetTask>
  return;
 800d1ae:	bf00      	nop
}
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1be:	2001      	movs	r0, #1
 800d1c0:	f7f5 ffca 	bl	8003158 <UTIL_SEQ_SetEvt>
  return;
 800d1c4:	bf00      	nop
}
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1d4:	2001      	movs	r0, #1
 800d1d6:	f7f5 ffdd 	bl	8003194 <UTIL_SEQ_WaitEvt>
  return;
 800d1da:	bf00      	nop
}
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload; 
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7fe fefd 	bl	800bff4 <SVCCTL_UserEvtRx>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d1fe:	7afb      	ldrb	r3, [r7, #11]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d003      	beq.n	800d20c <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800d20a:	e002      	b.n	800d212 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b084      	sub	sp, #16
 800d21e:	af00      	add	r7, sp, #0
 800d220:	4603      	mov	r3, r0
 800d222:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800d224:	79fb      	ldrb	r3, [r7, #7]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <BLE_StatusNot+0x16>
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d006      	beq.n	800d23c <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800d22e:	e00b      	b.n	800d248 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d230:	231f      	movs	r3, #31
 800d232:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f7f5 ff53 	bl	80030e0 <UTIL_SEQ_PauseTask>
      break;
 800d23a:	e005      	b.n	800d248 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d23c:	231f      	movs	r3, #31
 800d23e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7f5 ff6b 	bl	800311c <UTIL_SEQ_ResumeTask>
      break;
 800d246:	bf00      	nop
  }
  return;
 800d248:	bf00      	nop
}
 800d24a:	3710      	adds	r7, #16
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <P2PS_APP_Notification>:
/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
}

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <P2PS_APP_Notification+0x16>
 800d260:	2b01      	cmp	r3, #1
 800d262:	d002      	beq.n	800d26a <P2PS_APP_Notification+0x1a>
    
    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800d264:	e002      	b.n	800d26c <P2PS_APP_Notification+0x1c>
    break;
 800d266:	bf00      	nop
 800d268:	e000      	b.n	800d26c <P2PS_APP_Notification+0x1c>
    break;
 800d26a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800d26c:	bf00      	nop
}
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800d278:	b480      	push	{r7}
 800d27a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 800d27c:	bf00      	nop
}
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <TEMPLATE_APP_Init>:

  return;
}

void TEMPLATE_APP_Init(void)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	af00      	add	r7, sp, #0
  /**
   * Initialize Template application context
   */
  TEMPLATE_Server_App_Context.NotificationStatus=0;
 800d28c:	4b03      	ldr	r3, [pc, #12]	; (800d29c <TEMPLATE_APP_Init+0x14>)
 800d28e:	2200      	movs	r2, #0
 800d290:	701a      	strb	r2, [r3, #0]
  TEMPLATE_APP_context_Init();
 800d292:	f000 f805 	bl	800d2a0 <TEMPLATE_APP_context_Init>
  return;
 800d296:	bf00      	nop
}
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20000224 	.word	0x20000224

0800d2a0 <TEMPLATE_APP_context_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void TEMPLATE_APP_context_Init(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0
  TEMPLATE_Server_App_Context.Parameter = 0;
 800d2a4:	4b03      	ldr	r3, [pc, #12]	; (800d2b4 <TEMPLATE_APP_context_Init+0x14>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	805a      	strh	r2, [r3, #2]
}
 800d2aa:	bf00      	nop
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr
 800d2b4:	20000224 	.word	0x20000224

0800d2b8 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d2bc:	4b05      	ldr	r3, [pc, #20]	; (800d2d4 <LL_PWR_EnableBootC2+0x1c>)
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <LL_PWR_EnableBootC2+0x1c>)
 800d2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2c6:	60d3      	str	r3, [r2, #12]
}
 800d2c8:	bf00      	nop
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	58000400 	.word	0x58000400

0800d2d8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d2e0:	4b06      	ldr	r3, [pc, #24]	; (800d2fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d2e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d2e6:	4905      	ldr	r1, [pc, #20]	; (800d2fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	58000800 	.word	0x58000800

0800d300 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d308:	4b05      	ldr	r3, [pc, #20]	; (800d320 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d30a:	6a1a      	ldr	r2, [r3, #32]
 800d30c:	4904      	ldr	r1, [pc, #16]	; (800d320 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4313      	orrs	r3, r2
 800d312:	620b      	str	r3, [r1, #32]
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	58000800 	.word	0x58000800

0800d324 <LL_AHB3_GRP1_EnableClock>:
{
 800d324:	b480      	push	{r7}
 800d326:	b085      	sub	sp, #20
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d32c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	4313      	orrs	r3, r2
 800d33a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4013      	ands	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d348:	68fb      	ldr	r3, [r7, #12]
}
 800d34a:	bf00      	nop
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr

0800d356 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f043 0201 	orr.w	r2, r3, #1
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	601a      	str	r2, [r3, #0]
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d396:	b480      	push	{r7}
 800d398:	b083      	sub	sp, #12
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	041b      	lsls	r3, r3, #16
 800d3a8:	43db      	mvns	r3, r3
 800d3aa:	401a      	ands	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	605a      	str	r2, [r3, #4]
}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	041b      	lsls	r3, r3, #16
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	605a      	str	r2, [r3, #4]
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	43db      	mvns	r3, r3
 800d3f2:	401a      	ands	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	605a      	str	r2, [r3, #4]
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	609a      	str	r2, [r3, #8]
}
 800d414:	bf00      	nop
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	041a      	lsls	r2, r3, #16
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	609a      	str	r2, [r3, #8]
}
 800d432:	bf00      	nop
 800d434:	370c      	adds	r7, #12
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
 800d446:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68da      	ldr	r2, [r3, #12]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	4013      	ands	r3, r2
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	429a      	cmp	r2, r3
 800d454:	d101      	bne.n	800d45a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d456:	2301      	movs	r3, #1
 800d458:	e000      	b.n	800d45c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	69da      	ldr	r2, [r3, #28]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	4013      	ands	r3, r2
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d101      	bne.n	800d484 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d480:	2301      	movs	r3, #1
 800d482:	e000      	b.n	800d486 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	370c      	adds	r7, #12
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
	...

0800d494 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d498:	2102      	movs	r1, #2
 800d49a:	4819      	ldr	r0, [pc, #100]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d49c:	f7ff ffe4 	bl	800d468 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d009      	beq.n	800d4ba <HW_IPCC_Rx_Handler+0x26>
 800d4a6:	4b16      	ldr	r3, [pc, #88]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	43db      	mvns	r3, r3
 800d4ac:	f003 0302 	and.w	r3, r3, #2
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d4b4:	f000 f8e6 	bl	800d684 <HW_IPCC_SYS_EvtHandler>
 800d4b8:	e01f      	b.n	800d4fa <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_THREAD_CLI_NOTIFICATION_ACK_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CliNotifEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	4810      	ldr	r0, [pc, #64]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d4be:	f7ff ffd3 	bl	800d468 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d008      	beq.n	800d4da <HW_IPCC_Rx_Handler+0x46>
 800d4c8:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d4d4:	f000 f89a 	bl	800d60c <HW_IPCC_BLE_EvtHandler>
 800d4d8:	e00f      	b.n	800d4fa <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d4da:	2108      	movs	r1, #8
 800d4dc:	4808      	ldr	r0, [pc, #32]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d4de:	f7ff ffc3 	bl	800d468 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d009      	beq.n	800d4fc <HW_IPCC_Rx_Handler+0x68>
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <HW_IPCC_Rx_Handler+0x6c>)
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	43db      	mvns	r3, r3
 800d4ee:	f003 0308 	and.w	r3, r3, #8
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d002      	beq.n	800d4fc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d4f6:	f000 f911 	bl	800d71c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d4fa:	bf00      	nop
 800d4fc:	bf00      	nop
}
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	58000c00 	.word	0x58000c00

0800d504 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d508:	2102      	movs	r1, #2
 800d50a:	4822      	ldr	r0, [pc, #136]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d50c:	f7ff ff97 	bl	800d43e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <HW_IPCC_Tx_Handler+0x26>
 800d516:	4b1f      	ldr	r3, [pc, #124]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	43db      	mvns	r3, r3
 800d51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d524:	f000 f8a2 	bl	800d66c <HW_IPCC_SYS_CmdEvtHandler>
 800d528:	e031      	b.n	800d58e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_THREAD_OT_CMD_RSP_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d52a:	2102      	movs	r1, #2
 800d52c:	4819      	ldr	r0, [pc, #100]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d52e:	f7ff ff86 	bl	800d43e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d109      	bne.n	800d54c <HW_IPCC_Tx_Handler+0x48>
 800d538:	4b16      	ldr	r3, [pc, #88]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	43db      	mvns	r3, r3
 800d53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d546:	f000 f891 	bl	800d66c <HW_IPCC_SYS_CmdEvtHandler>
 800d54a:	e020      	b.n	800d58e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d54c:	2108      	movs	r1, #8
 800d54e:	4811      	ldr	r0, [pc, #68]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d550:	f7ff ff75 	bl	800d43e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d109      	bne.n	800d56e <HW_IPCC_Tx_Handler+0x6a>
 800d55a:	4b0e      	ldr	r3, [pc, #56]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	43db      	mvns	r3, r3
 800d560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d568:	f000 f8ba 	bl	800d6e0 <HW_IPCC_MM_FreeBufHandler>
 800d56c:	e00f      	b.n	800d58e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d56e:	2120      	movs	r1, #32
 800d570:	4808      	ldr	r0, [pc, #32]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d572:	f7ff ff64 	bl	800d43e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d109      	bne.n	800d590 <HW_IPCC_Tx_Handler+0x8c>
 800d57c:	4b05      	ldr	r3, [pc, #20]	; (800d594 <HW_IPCC_Tx_Handler+0x90>)
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	43db      	mvns	r3, r3
 800d582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d58a:	f000 f84b 	bl	800d624 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d58e:	bf00      	nop
 800d590:	bf00      	nop
}
 800d592:	bd80      	pop	{r7, pc}
 800d594:	58000c00 	.word	0x58000c00

0800d598 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	af00      	add	r7, sp, #0
  /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d59c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d5a0:	f7ff fe9a 	bl	800d2d8 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d5a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d5a8:	f7ff feaa 	bl	800d300 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d5ac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d5ae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d5b0:	f7ff fe82 	bl	800d2b8 <LL_PWR_EnableBootC2>

  return;
 800d5b4:	bf00      	nop
}
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d5bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d5c0:	f7ff feb0 	bl	800d324 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d5c4:	4806      	ldr	r0, [pc, #24]	; (800d5e0 <HW_IPCC_Init+0x28>)
 800d5c6:	f7ff fed6 	bl	800d376 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d5ca:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <HW_IPCC_Init+0x28>)
 800d5cc:	f7ff fec3 	bl	800d356 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d5d0:	202c      	movs	r0, #44	; 0x2c
 800d5d2:	f7f6 ff70 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d5d6:	202d      	movs	r0, #45	; 0x2d
 800d5d8:	f7f6 ff6d 	bl	80044b6 <HAL_NVIC_EnableIRQ>

  return;
 800d5dc:	bf00      	nop
}
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	58000c00 	.word	0x58000c00

0800d5e4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	4802      	ldr	r0, [pc, #8]	; (800d5f4 <HW_IPCC_BLE_Init+0x10>)
 800d5ec:	f7ff fef8 	bl	800d3e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d5f0:	bf00      	nop
}
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	58000c00 	.word	0x58000c00

0800d5f8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	4802      	ldr	r0, [pc, #8]	; (800d608 <HW_IPCC_BLE_SendCmd+0x10>)
 800d600:	f7ff ff0e 	bl	800d420 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d604:	bf00      	nop
}
 800d606:	bd80      	pop	{r7, pc}
 800d608:	58000c00 	.word	0x58000c00

0800d60c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d610:	f7ff f8a8 	bl	800c764 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d614:	2101      	movs	r1, #1
 800d616:	4802      	ldr	r0, [pc, #8]	; (800d620 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d618:	f7ff fef4 	bl	800d404 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d61c:	bf00      	nop
}
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	58000c00 	.word	0x58000c00

0800d624 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d628:	2120      	movs	r1, #32
 800d62a:	4803      	ldr	r0, [pc, #12]	; (800d638 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d62c:	f7ff fec6 	bl	800d3bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d630:	f7ff f8b4 	bl	800c79c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d634:	bf00      	nop
}
 800d636:	bd80      	pop	{r7, pc}
 800d638:	58000c00 	.word	0x58000c00

0800d63c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d640:	2102      	movs	r1, #2
 800d642:	4802      	ldr	r0, [pc, #8]	; (800d64c <HW_IPCC_SYS_Init+0x10>)
 800d644:	f7ff fecc 	bl	800d3e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d648:	bf00      	nop
}
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	58000c00 	.word	0x58000c00

0800d650 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d654:	2102      	movs	r1, #2
 800d656:	4804      	ldr	r0, [pc, #16]	; (800d668 <HW_IPCC_SYS_SendCmd+0x18>)
 800d658:	f7ff fee2 	bl	800d420 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d65c:	2102      	movs	r1, #2
 800d65e:	4802      	ldr	r0, [pc, #8]	; (800d668 <HW_IPCC_SYS_SendCmd+0x18>)
 800d660:	f7ff fe99 	bl	800d396 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d664:	bf00      	nop
}
 800d666:	bd80      	pop	{r7, pc}
 800d668:	58000c00 	.word	0x58000c00

0800d66c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d670:	2102      	movs	r1, #2
 800d672:	4803      	ldr	r0, [pc, #12]	; (800d680 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d674:	f7ff fea2 	bl	800d3bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d678:	f7ff f8d8 	bl	800c82c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d67c:	bf00      	nop
}
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	58000c00 	.word	0x58000c00

0800d684 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d688:	f7ff f8e0 	bl	800c84c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d68c:	2102      	movs	r1, #2
 800d68e:	4802      	ldr	r0, [pc, #8]	; (800d698 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d690:	f7ff feb8 	bl	800d404 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d694:	bf00      	nop
}
 800d696:	bd80      	pop	{r7, pc}
 800d698:	58000c00 	.word	0x58000c00

0800d69c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d6a4:	2108      	movs	r1, #8
 800d6a6:	480c      	ldr	r0, [pc, #48]	; (800d6d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d6a8:	f7ff fec9 	bl	800d43e <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d007      	beq.n	800d6c2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d6b2:	4a0a      	ldr	r2, [pc, #40]	; (800d6dc <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6b8:	2108      	movs	r1, #8
 800d6ba:	4807      	ldr	r0, [pc, #28]	; (800d6d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d6bc:	f7ff fe6b 	bl	800d396 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d6c0:	e006      	b.n	800d6d0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6c6:	2108      	movs	r1, #8
 800d6c8:	4803      	ldr	r0, [pc, #12]	; (800d6d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d6ca:	f7ff fea9 	bl	800d420 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d6ce:	bf00      	nop
}
 800d6d0:	3708      	adds	r7, #8
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	58000c00 	.word	0x58000c00
 800d6dc:	200003e8 	.word	0x200003e8

0800d6e0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6e4:	2108      	movs	r1, #8
 800d6e6:	4806      	ldr	r0, [pc, #24]	; (800d700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d6e8:	f7ff fe68 	bl	800d3bc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d6ec:	4b05      	ldr	r3, [pc, #20]	; (800d704 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d6f2:	2108      	movs	r1, #8
 800d6f4:	4802      	ldr	r0, [pc, #8]	; (800d700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d6f6:	f7ff fe93 	bl	800d420 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d6fa:	bf00      	nop
}
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	58000c00 	.word	0x58000c00
 800d704:	200003e8 	.word	0x200003e8

0800d708 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d70c:	2108      	movs	r1, #8
 800d70e:	4802      	ldr	r0, [pc, #8]	; (800d718 <HW_IPCC_TRACES_Init+0x10>)
 800d710:	f7ff fe66 	bl	800d3e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d714:	bf00      	nop
}
 800d716:	bd80      	pop	{r7, pc}
 800d718:	58000c00 	.word	0x58000c00

0800d71c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d720:	f7ff f932 	bl	800c988 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d724:	2108      	movs	r1, #8
 800d726:	4802      	ldr	r0, [pc, #8]	; (800d730 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d728:	f7ff fe6c 	bl	800d404 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d72c:	bf00      	nop
}
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	58000c00 	.word	0x58000c00

0800d734 <__cxa_pure_virtual>:
 800d734:	b508      	push	{r3, lr}
 800d736:	f000 f825 	bl	800d784 <_ZSt9terminatev>

0800d73a <_Znwj>:
 800d73a:	b510      	push	{r4, lr}
 800d73c:	2800      	cmp	r0, #0
 800d73e:	bf14      	ite	ne
 800d740:	4604      	movne	r4, r0
 800d742:	2401      	moveq	r4, #1
 800d744:	4620      	mov	r0, r4
 800d746:	f000 f907 	bl	800d958 <malloc>
 800d74a:	b930      	cbnz	r0, 800d75a <_Znwj+0x20>
 800d74c:	f000 f806 	bl	800d75c <_ZSt15get_new_handlerv>
 800d750:	b908      	cbnz	r0, 800d756 <_Znwj+0x1c>
 800d752:	f000 f8c9 	bl	800d8e8 <abort>
 800d756:	4780      	blx	r0
 800d758:	e7f4      	b.n	800d744 <_Znwj+0xa>
 800d75a:	bd10      	pop	{r4, pc}

0800d75c <_ZSt15get_new_handlerv>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <_ZSt15get_new_handlerv+0xc>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	f3bf 8f5b 	dmb	ish
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	200003ec 	.word	0x200003ec

0800d76c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d76c:	b508      	push	{r3, lr}
 800d76e:	4780      	blx	r0
 800d770:	f000 f8ba 	bl	800d8e8 <abort>

0800d774 <_ZSt13get_terminatev>:
 800d774:	4b02      	ldr	r3, [pc, #8]	; (800d780 <_ZSt13get_terminatev+0xc>)
 800d776:	6818      	ldr	r0, [r3, #0]
 800d778:	f3bf 8f5b 	dmb	ish
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	20000028 	.word	0x20000028

0800d784 <_ZSt9terminatev>:
 800d784:	b508      	push	{r3, lr}
 800d786:	f7ff fff5 	bl	800d774 <_ZSt13get_terminatev>
 800d78a:	f7ff ffef 	bl	800d76c <_ZN10__cxxabiv111__terminateEPFvvE>

0800d78e <_ZSt19__throw_logic_errorPKc>:
 800d78e:	b508      	push	{r3, lr}
 800d790:	f000 f8aa 	bl	800d8e8 <abort>

0800d794 <_ZSt24__throw_out_of_range_fmtPKcz>:
 800d794:	b40f      	push	{r0, r1, r2, r3}
 800d796:	b580      	push	{r7, lr}
 800d798:	b082      	sub	sp, #8
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	f107 0410 	add.w	r4, r7, #16
 800d7a0:	f854 5b04 	ldr.w	r5, [r4], #4
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f7f2 fceb 	bl	8000180 <strlen>
 800d7aa:	f200 230e 	addw	r3, r0, #526	; 0x20e
 800d7ae:	f023 0307 	bic.w	r3, r3, #7
 800d7b2:	ebad 0d03 	sub.w	sp, sp, r3
 800d7b6:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800d7ba:	4623      	mov	r3, r4
 800d7bc:	462a      	mov	r2, r5
 800d7be:	4668      	mov	r0, sp
 800d7c0:	607c      	str	r4, [r7, #4]
 800d7c2:	f000 f851 	bl	800d868 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 800d7c6:	f000 f88f 	bl	800d8e8 <abort>
	...

0800d7cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b09c      	sub	sp, #112	; 0x70
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	1a0e      	subs	r6, r1, r0
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	2269      	movs	r2, #105	; 0x69
 800d7d8:	490e      	ldr	r1, [pc, #56]	; (800d814 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800d7da:	1d38      	adds	r0, r7, #4
 800d7dc:	f000 f8c4 	bl	800d968 <memcpy>
 800d7e0:	f106 0377 	add.w	r3, r6, #119	; 0x77
 800d7e4:	f023 0307 	bic.w	r3, r3, #7
 800d7e8:	ebad 0d03 	sub.w	sp, sp, r3
 800d7ec:	466c      	mov	r4, sp
 800d7ee:	2268      	movs	r2, #104	; 0x68
 800d7f0:	1d39      	adds	r1, r7, #4
 800d7f2:	1c75      	adds	r5, r6, #1
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 f8b7 	bl	800d968 <memcpy>
 800d7fa:	4425      	add	r5, r4
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	4641      	mov	r1, r8
 800d800:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d804:	f000 f8b0 	bl	800d968 <memcpy>
 800d808:	2300      	movs	r3, #0
 800d80a:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
 800d80e:	4620      	mov	r0, r4
 800d810:	f7ff ffbd 	bl	800d78e <_ZSt19__throw_logic_errorPKc>
 800d814:	0800dd8a 	.word	0x0800dd8a

0800d818 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 800d818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	b086      	sub	sp, #24
 800d81e:	466d      	mov	r5, sp
 800d820:	f105 040c 	add.w	r4, r5, #12
 800d824:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800d864 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 800d828:	4623      	mov	r3, r4
 800d82a:	f04f 0c0a 	mov.w	ip, #10
 800d82e:	fbb2 f6fc 	udiv	r6, r2, ip
 800d832:	fb0c 2216 	mls	r2, ip, r6, r2
 800d836:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800d83a:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800d83e:	4632      	mov	r2, r6
 800d840:	2e00      	cmp	r6, #0
 800d842:	d1f4      	bne.n	800d82e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x16>
 800d844:	1ae4      	subs	r4, r4, r3
 800d846:	428c      	cmp	r4, r1
 800d848:	d808      	bhi.n	800d85c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 800d84a:	f1c4 010c 	rsb	r1, r4, #12
 800d84e:	4622      	mov	r2, r4
 800d850:	4429      	add	r1, r5
 800d852:	f000 f889 	bl	800d968 <memcpy>
 800d856:	4620      	mov	r0, r4
 800d858:	46bd      	mov	sp, r7
 800d85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d85c:	f04f 34ff 	mov.w	r4, #4294967295
 800d860:	e7f9      	b.n	800d856 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3e>
 800d862:	bf00      	nop
 800d864:	0800dd7f 	.word	0x0800dd7f

0800d868 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 800d868:	3901      	subs	r1, #1
 800d86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d86e:	4606      	mov	r6, r0
 800d870:	4615      	mov	r5, r2
 800d872:	1847      	adds	r7, r0, r1
 800d874:	4604      	mov	r4, r0
 800d876:	782a      	ldrb	r2, [r5, #0]
 800d878:	b392      	cbz	r2, 800d8e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
 800d87a:	42bc      	cmp	r4, r7
 800d87c:	d22c      	bcs.n	800d8d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800d87e:	2a25      	cmp	r2, #37	; 0x25
 800d880:	d107      	bne.n	800d892 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800d882:	786a      	ldrb	r2, [r5, #1]
 800d884:	2a73      	cmp	r2, #115	; 0x73
 800d886:	d009      	beq.n	800d89c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
 800d888:	2a7a      	cmp	r2, #122	; 0x7a
 800d88a:	d012      	beq.n	800d8b2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
 800d88c:	2a25      	cmp	r2, #37	; 0x25
 800d88e:	d100      	bne.n	800d892 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800d890:	3501      	adds	r5, #1
 800d892:	782a      	ldrb	r2, [r5, #0]
 800d894:	7022      	strb	r2, [r4, #0]
 800d896:	3501      	adds	r5, #1
 800d898:	3401      	adds	r4, #1
 800d89a:	e7ec      	b.n	800d876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800d89c:	1d19      	adds	r1, r3, #4
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d8a6:	b1a2      	cbz	r2, 800d8d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
 800d8a8:	42bc      	cmp	r4, r7
 800d8aa:	d015      	beq.n	800d8d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800d8ac:	f804 2b01 	strb.w	r2, [r4], #1
 800d8b0:	e7f7      	b.n	800d8a2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
 800d8b2:	78aa      	ldrb	r2, [r5, #2]
 800d8b4:	2a75      	cmp	r2, #117	; 0x75
 800d8b6:	d1ec      	bne.n	800d892 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	1b39      	subs	r1, r7, r4
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f103 0804 	add.w	r8, r3, #4
 800d8c2:	f7ff ffa9 	bl	800d818 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	dd06      	ble.n	800d8d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
 800d8ca:	4404      	add	r4, r0
 800d8cc:	3503      	adds	r5, #3
 800d8ce:	4643      	mov	r3, r8
 800d8d0:	e7d1      	b.n	800d876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800d8d2:	3502      	adds	r5, #2
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	e7ce      	b.n	800d876 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 800d8d8:	4621      	mov	r1, r4
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7ff ff76 	bl	800d7cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800d8e0:	7022      	strb	r2, [r4, #0]
 800d8e2:	1ba0      	subs	r0, r4, r6
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8e8 <abort>:
 800d8e8:	b508      	push	{r3, lr}
 800d8ea:	2006      	movs	r0, #6
 800d8ec:	f000 f8e2 	bl	800dab4 <raise>
 800d8f0:	2001      	movs	r0, #1
 800d8f2:	f7f5 ff4e 	bl	8003792 <_exit>

0800d8f6 <atexit>:
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	4601      	mov	r1, r0
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f000 b8f5 	b.w	800daec <__register_exitproc>
	...

0800d904 <__errno>:
 800d904:	4b01      	ldr	r3, [pc, #4]	; (800d90c <__errno+0x8>)
 800d906:	6818      	ldr	r0, [r3, #0]
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	2000002c 	.word	0x2000002c

0800d910 <__libc_init_array>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	4e0d      	ldr	r6, [pc, #52]	; (800d948 <__libc_init_array+0x38>)
 800d914:	4c0d      	ldr	r4, [pc, #52]	; (800d94c <__libc_init_array+0x3c>)
 800d916:	1ba4      	subs	r4, r4, r6
 800d918:	10a4      	asrs	r4, r4, #2
 800d91a:	2500      	movs	r5, #0
 800d91c:	42a5      	cmp	r5, r4
 800d91e:	d109      	bne.n	800d934 <__libc_init_array+0x24>
 800d920:	4e0b      	ldr	r6, [pc, #44]	; (800d950 <__libc_init_array+0x40>)
 800d922:	4c0c      	ldr	r4, [pc, #48]	; (800d954 <__libc_init_array+0x44>)
 800d924:	f000 f948 	bl	800dbb8 <_init>
 800d928:	1ba4      	subs	r4, r4, r6
 800d92a:	10a4      	asrs	r4, r4, #2
 800d92c:	2500      	movs	r5, #0
 800d92e:	42a5      	cmp	r5, r4
 800d930:	d105      	bne.n	800d93e <__libc_init_array+0x2e>
 800d932:	bd70      	pop	{r4, r5, r6, pc}
 800d934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d938:	4798      	blx	r3
 800d93a:	3501      	adds	r5, #1
 800d93c:	e7ee      	b.n	800d91c <__libc_init_array+0xc>
 800d93e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d942:	4798      	blx	r3
 800d944:	3501      	adds	r5, #1
 800d946:	e7f2      	b.n	800d92e <__libc_init_array+0x1e>
 800d948:	0800de5c 	.word	0x0800de5c
 800d94c:	0800de5c 	.word	0x0800de5c
 800d950:	0800de5c 	.word	0x0800de5c
 800d954:	0800de60 	.word	0x0800de60

0800d958 <malloc>:
 800d958:	4b02      	ldr	r3, [pc, #8]	; (800d964 <malloc+0xc>)
 800d95a:	4601      	mov	r1, r0
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	f000 b817 	b.w	800d990 <_malloc_r>
 800d962:	bf00      	nop
 800d964:	2000002c 	.word	0x2000002c

0800d968 <memcpy>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	1e43      	subs	r3, r0, #1
 800d96c:	440a      	add	r2, r1
 800d96e:	4291      	cmp	r1, r2
 800d970:	d100      	bne.n	800d974 <memcpy+0xc>
 800d972:	bd10      	pop	{r4, pc}
 800d974:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d97c:	e7f7      	b.n	800d96e <memcpy+0x6>

0800d97e <memset>:
 800d97e:	4402      	add	r2, r0
 800d980:	4603      	mov	r3, r0
 800d982:	4293      	cmp	r3, r2
 800d984:	d100      	bne.n	800d988 <memset+0xa>
 800d986:	4770      	bx	lr
 800d988:	f803 1b01 	strb.w	r1, [r3], #1
 800d98c:	e7f9      	b.n	800d982 <memset+0x4>
	...

0800d990 <_malloc_r>:
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	1ccd      	adds	r5, r1, #3
 800d994:	f025 0503 	bic.w	r5, r5, #3
 800d998:	3508      	adds	r5, #8
 800d99a:	2d0c      	cmp	r5, #12
 800d99c:	bf38      	it	cc
 800d99e:	250c      	movcc	r5, #12
 800d9a0:	2d00      	cmp	r5, #0
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	db01      	blt.n	800d9aa <_malloc_r+0x1a>
 800d9a6:	42a9      	cmp	r1, r5
 800d9a8:	d903      	bls.n	800d9b2 <_malloc_r+0x22>
 800d9aa:	230c      	movs	r3, #12
 800d9ac:	6033      	str	r3, [r6, #0]
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	bd70      	pop	{r4, r5, r6, pc}
 800d9b2:	f000 f8ff 	bl	800dbb4 <__malloc_lock>
 800d9b6:	4a21      	ldr	r2, [pc, #132]	; (800da3c <_malloc_r+0xac>)
 800d9b8:	6814      	ldr	r4, [r2, #0]
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	b991      	cbnz	r1, 800d9e4 <_malloc_r+0x54>
 800d9be:	4c20      	ldr	r4, [pc, #128]	; (800da40 <_malloc_r+0xb0>)
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	b91b      	cbnz	r3, 800d9cc <_malloc_r+0x3c>
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f000 f83d 	bl	800da44 <_sbrk_r>
 800d9ca:	6020      	str	r0, [r4, #0]
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	4630      	mov	r0, r6
 800d9d0:	f000 f838 	bl	800da44 <_sbrk_r>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d124      	bne.n	800da22 <_malloc_r+0x92>
 800d9d8:	230c      	movs	r3, #12
 800d9da:	6033      	str	r3, [r6, #0]
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f000 f8ea 	bl	800dbb6 <__malloc_unlock>
 800d9e2:	e7e4      	b.n	800d9ae <_malloc_r+0x1e>
 800d9e4:	680b      	ldr	r3, [r1, #0]
 800d9e6:	1b5b      	subs	r3, r3, r5
 800d9e8:	d418      	bmi.n	800da1c <_malloc_r+0x8c>
 800d9ea:	2b0b      	cmp	r3, #11
 800d9ec:	d90f      	bls.n	800da0e <_malloc_r+0x7e>
 800d9ee:	600b      	str	r3, [r1, #0]
 800d9f0:	50cd      	str	r5, [r1, r3]
 800d9f2:	18cc      	adds	r4, r1, r3
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f000 f8de 	bl	800dbb6 <__malloc_unlock>
 800d9fa:	f104 000b 	add.w	r0, r4, #11
 800d9fe:	1d23      	adds	r3, r4, #4
 800da00:	f020 0007 	bic.w	r0, r0, #7
 800da04:	1ac3      	subs	r3, r0, r3
 800da06:	d0d3      	beq.n	800d9b0 <_malloc_r+0x20>
 800da08:	425a      	negs	r2, r3
 800da0a:	50e2      	str	r2, [r4, r3]
 800da0c:	e7d0      	b.n	800d9b0 <_malloc_r+0x20>
 800da0e:	428c      	cmp	r4, r1
 800da10:	684b      	ldr	r3, [r1, #4]
 800da12:	bf16      	itet	ne
 800da14:	6063      	strne	r3, [r4, #4]
 800da16:	6013      	streq	r3, [r2, #0]
 800da18:	460c      	movne	r4, r1
 800da1a:	e7eb      	b.n	800d9f4 <_malloc_r+0x64>
 800da1c:	460c      	mov	r4, r1
 800da1e:	6849      	ldr	r1, [r1, #4]
 800da20:	e7cc      	b.n	800d9bc <_malloc_r+0x2c>
 800da22:	1cc4      	adds	r4, r0, #3
 800da24:	f024 0403 	bic.w	r4, r4, #3
 800da28:	42a0      	cmp	r0, r4
 800da2a:	d005      	beq.n	800da38 <_malloc_r+0xa8>
 800da2c:	1a21      	subs	r1, r4, r0
 800da2e:	4630      	mov	r0, r6
 800da30:	f000 f808 	bl	800da44 <_sbrk_r>
 800da34:	3001      	adds	r0, #1
 800da36:	d0cf      	beq.n	800d9d8 <_malloc_r+0x48>
 800da38:	6025      	str	r5, [r4, #0]
 800da3a:	e7db      	b.n	800d9f4 <_malloc_r+0x64>
 800da3c:	200003f0 	.word	0x200003f0
 800da40:	200003f4 	.word	0x200003f4

0800da44 <_sbrk_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	4c06      	ldr	r4, [pc, #24]	; (800da60 <_sbrk_r+0x1c>)
 800da48:	2300      	movs	r3, #0
 800da4a:	4605      	mov	r5, r0
 800da4c:	4608      	mov	r0, r1
 800da4e:	6023      	str	r3, [r4, #0]
 800da50:	f7f5 feaa 	bl	80037a8 <_sbrk>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_sbrk_r+0x1a>
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_sbrk_r+0x1a>
 800da5c:	602b      	str	r3, [r5, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	200008e4 	.word	0x200008e4

0800da64 <_raise_r>:
 800da64:	291f      	cmp	r1, #31
 800da66:	b538      	push	{r3, r4, r5, lr}
 800da68:	4604      	mov	r4, r0
 800da6a:	460d      	mov	r5, r1
 800da6c:	d904      	bls.n	800da78 <_raise_r+0x14>
 800da6e:	2316      	movs	r3, #22
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	f04f 30ff 	mov.w	r0, #4294967295
 800da76:	bd38      	pop	{r3, r4, r5, pc}
 800da78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da7a:	b112      	cbz	r2, 800da82 <_raise_r+0x1e>
 800da7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da80:	b94b      	cbnz	r3, 800da96 <_raise_r+0x32>
 800da82:	4620      	mov	r0, r4
 800da84:	f000 f830 	bl	800dae8 <_getpid_r>
 800da88:	462a      	mov	r2, r5
 800da8a:	4601      	mov	r1, r0
 800da8c:	4620      	mov	r0, r4
 800da8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da92:	f000 b817 	b.w	800dac4 <_kill_r>
 800da96:	2b01      	cmp	r3, #1
 800da98:	d00a      	beq.n	800dab0 <_raise_r+0x4c>
 800da9a:	1c59      	adds	r1, r3, #1
 800da9c:	d103      	bne.n	800daa6 <_raise_r+0x42>
 800da9e:	2316      	movs	r3, #22
 800daa0:	6003      	str	r3, [r0, #0]
 800daa2:	2001      	movs	r0, #1
 800daa4:	e7e7      	b.n	800da76 <_raise_r+0x12>
 800daa6:	2400      	movs	r4, #0
 800daa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800daac:	4628      	mov	r0, r5
 800daae:	4798      	blx	r3
 800dab0:	2000      	movs	r0, #0
 800dab2:	e7e0      	b.n	800da76 <_raise_r+0x12>

0800dab4 <raise>:
 800dab4:	4b02      	ldr	r3, [pc, #8]	; (800dac0 <raise+0xc>)
 800dab6:	4601      	mov	r1, r0
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	f7ff bfd3 	b.w	800da64 <_raise_r>
 800dabe:	bf00      	nop
 800dac0:	2000002c 	.word	0x2000002c

0800dac4 <_kill_r>:
 800dac4:	b538      	push	{r3, r4, r5, lr}
 800dac6:	4c07      	ldr	r4, [pc, #28]	; (800dae4 <_kill_r+0x20>)
 800dac8:	2300      	movs	r3, #0
 800daca:	4605      	mov	r5, r0
 800dacc:	4608      	mov	r0, r1
 800dace:	4611      	mov	r1, r2
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	f7f5 fe4e 	bl	8003772 <_kill>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d102      	bne.n	800dae0 <_kill_r+0x1c>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	b103      	cbz	r3, 800dae0 <_kill_r+0x1c>
 800dade:	602b      	str	r3, [r5, #0]
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	bf00      	nop
 800dae4:	200008e4 	.word	0x200008e4

0800dae8 <_getpid_r>:
 800dae8:	f7f5 be3b 	b.w	8003762 <_getpid>

0800daec <__register_exitproc>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	4d2c      	ldr	r5, [pc, #176]	; (800dba4 <__register_exitproc+0xb8>)
 800daf2:	682c      	ldr	r4, [r5, #0]
 800daf4:	4607      	mov	r7, r0
 800daf6:	460e      	mov	r6, r1
 800daf8:	4691      	mov	r9, r2
 800dafa:	4698      	mov	r8, r3
 800dafc:	b934      	cbnz	r4, 800db0c <__register_exitproc+0x20>
 800dafe:	4b2a      	ldr	r3, [pc, #168]	; (800dba8 <__register_exitproc+0xbc>)
 800db00:	4c2a      	ldr	r4, [pc, #168]	; (800dbac <__register_exitproc+0xc0>)
 800db02:	602c      	str	r4, [r5, #0]
 800db04:	b113      	cbz	r3, 800db0c <__register_exitproc+0x20>
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	2b1f      	cmp	r3, #31
 800db10:	dd3d      	ble.n	800db8e <__register_exitproc+0xa2>
 800db12:	4b27      	ldr	r3, [pc, #156]	; (800dbb0 <__register_exitproc+0xc4>)
 800db14:	b91b      	cbnz	r3, 800db1e <__register_exitproc+0x32>
 800db16:	f04f 30ff 	mov.w	r0, #4294967295
 800db1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1e:	208c      	movs	r0, #140	; 0x8c
 800db20:	f7ff ff1a 	bl	800d958 <malloc>
 800db24:	4604      	mov	r4, r0
 800db26:	2800      	cmp	r0, #0
 800db28:	d0f5      	beq.n	800db16 <__register_exitproc+0x2a>
 800db2a:	2300      	movs	r3, #0
 800db2c:	682a      	ldr	r2, [r5, #0]
 800db2e:	6002      	str	r2, [r0, #0]
 800db30:	6043      	str	r3, [r0, #4]
 800db32:	6028      	str	r0, [r5, #0]
 800db34:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800db38:	b30f      	cbz	r7, 800db7e <__register_exitproc+0x92>
 800db3a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800db3e:	f7ff ff0b 	bl	800d958 <malloc>
 800db42:	2800      	cmp	r0, #0
 800db44:	d0e7      	beq.n	800db16 <__register_exitproc+0x2a>
 800db46:	2300      	movs	r3, #0
 800db48:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800db4c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800db50:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800db54:	6862      	ldr	r2, [r4, #4]
 800db56:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800db5a:	2301      	movs	r3, #1
 800db5c:	4093      	lsls	r3, r2
 800db5e:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800db62:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800db66:	431a      	orrs	r2, r3
 800db68:	2f02      	cmp	r7, #2
 800db6a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800db6e:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800db72:	bf02      	ittt	eq
 800db74:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800db78:	4313      	orreq	r3, r2
 800db7a:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800db7e:	6863      	ldr	r3, [r4, #4]
 800db80:	1c5a      	adds	r2, r3, #1
 800db82:	3302      	adds	r3, #2
 800db84:	6062      	str	r2, [r4, #4]
 800db86:	2000      	movs	r0, #0
 800db88:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800db8c:	e7c5      	b.n	800db1a <__register_exitproc+0x2e>
 800db8e:	2f00      	cmp	r7, #0
 800db90:	d0f5      	beq.n	800db7e <__register_exitproc+0x92>
 800db92:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800db96:	2800      	cmp	r0, #0
 800db98:	d1dc      	bne.n	800db54 <__register_exitproc+0x68>
 800db9a:	4b05      	ldr	r3, [pc, #20]	; (800dbb0 <__register_exitproc+0xc4>)
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d0ba      	beq.n	800db16 <__register_exitproc+0x2a>
 800dba0:	e7cb      	b.n	800db3a <__register_exitproc+0x4e>
 800dba2:	bf00      	nop
 800dba4:	20000484 	.word	0x20000484
 800dba8:	00000000 	.word	0x00000000
 800dbac:	200003f8 	.word	0x200003f8
 800dbb0:	0800d959 	.word	0x0800d959

0800dbb4 <__malloc_lock>:
 800dbb4:	4770      	bx	lr

0800dbb6 <__malloc_unlock>:
 800dbb6:	4770      	bx	lr

0800dbb8 <_init>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	bf00      	nop
 800dbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbbe:	bc08      	pop	{r3}
 800dbc0:	469e      	mov	lr, r3
 800dbc2:	4770      	bx	lr

0800dbc4 <_fini>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	bf00      	nop
 800dbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbca:	bc08      	pop	{r3}
 800dbcc:	469e      	mov	lr, r3
 800dbce:	4770      	bx	lr
